<?php
/**
 * FileUploadState
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * FileUploadState Class Doc Comment
 *
 * @category Class
 * @description Модель статуса выгрузки файла
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class FileUploadState implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    const STATUS_ATTACHING = 'ATTACHING';
    const STATUS_ATTACH_FINISHED = 'ATTACH_FINISHED';
    const STATUS_UPLOADING = 'UPLOADING';
    const STATUS_UPLOADED = 'UPLOADED';
    const STATUS_UPLOAD_ERROR = 'UPLOAD_ERROR';
    const STATUS_ANTIVIRUS_ERROR = 'ANTIVIRUS_ERROR';
    const STATUS_FILE_TYPE_ERROR = 'FILE_TYPE_ERROR';
    const STATUS_FILE_EXTENSION_ERROR = 'FILE_EXTENSION_ERROR';
    const STATUS_MAX_SIZE_ERROR = 'MAX_SIZE_ERROR';
    const STATUS_SIGN_ERROR = 'SIGN_ERROR';
    const STATUS_SIGNING = 'SIGNING';
    const STATUS_SIGNED = 'SIGNED';
    const STATUS_PARTIALLY_UPLOADED = 'PARTIALLY_UPLOADED';
    const STATUS_UNKNOWN_STATUS = 'UNKNOWN_STATUS';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'FileUploadState';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'bankComment' => 'string',
        'fileId' => 'string',
        'status' => 'string',
        'url' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'bankComment' => null,
        'fileId' => null,
        'status' => null,
        'url' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankComment' => 'bankComment',
        'fileId' => 'fileId',
        'status' => 'status',
        'url' => 'url',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankComment' => 'setBankComment',
        'fileId' => 'setFileId',
        'status' => 'setStatus',
        'url' => 'setUrl',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankComment' => 'getBankComment',
        'fileId' => 'getFileId',
        'status' => 'getStatus',
        'url' => 'getUrl',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bankComment'] = isset($data['bankComment']) ? $data['bankComment'] : null;
        $this->container['fileId'] = isset($data['fileId']) ? $data['fileId'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ATTACHING,
            self::STATUS_ATTACH_FINISHED,
            self::STATUS_UPLOADING,
            self::STATUS_UPLOADED,
            self::STATUS_UPLOAD_ERROR,
            self::STATUS_ANTIVIRUS_ERROR,
            self::STATUS_FILE_TYPE_ERROR,
            self::STATUS_FILE_EXTENSION_ERROR,
            self::STATUS_MAX_SIZE_ERROR,
            self::STATUS_SIGN_ERROR,
            self::STATUS_SIGNING,
            self::STATUS_SIGNED,
            self::STATUS_PARTIALLY_UPLOADED,
            self::STATUS_UNKNOWN_STATUS,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets bankComment
     *
     * @return string
     */
    public function getBankComment()
    {
        return $this->container['bankComment'];
    }

    /**
     * Sets bankComment
     *
     * @param string $bankComment Банковский комментарий к статусу выгрузки файла
     *
     * @return $this
     */
    public function setBankComment($bankComment)
    {
        $this->container['bankComment'] = $bankComment;

        return $this;
    }

    /**
     * Gets fileId
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['fileId'];
    }

    /**
     * Sets fileId
     *
     * @param string $fileId Идентификатор файла
     *
     * @return $this
     */
    public function setFileId($fileId)
    {
        $this->container['fileId'] = $fileId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Статус выгрузки файла
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Ссылка для выгрузки файла
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
