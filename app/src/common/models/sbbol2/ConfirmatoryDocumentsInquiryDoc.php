<?php
/**
 * ConfirmatoryDocumentsInquiryDoc
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * ConfirmatoryDocumentsInquiryDoc Class Doc Comment
 *
 * @category Class
 * @description Документ, включённый в справку о подтверждающих документах
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ConfirmatoryDocumentsInquiryDoc implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    const SUPPLY_FEATURE__1 = '1';
    const SUPPLY_FEATURE__2 = '2';
    const SUPPLY_FEATURE__3 = '3';
    const SUPPLY_FEATURE__4 = '4';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ConfirmatoryDocumentsInquiryDoc';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'addInfo' => 'string',
        'confDocDate' => '\DateTime',
        'confDocNumber' => 'string',
        'contractSum' => '\common\models\sbbol2\AmountCurrency',
        'contractSumDel' => 'float',
        'correctionDate' => '\DateTime',
        'correctionNumber' => 'int',
        'countryCode' => 'string',
        'countryName' => 'string',
        'docCode' => 'string',
        'docName' => 'string',
        'docSum' => '\common\models\sbbol2\AmountCurrency',
        'docSumDel' => 'float',
        'expectedLife' => '\DateTime',
        'hasConfDocNumber' => 'bool',
        'ordinalNumber' => 'int',
        'supplyFeature' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'addInfo' => null,
        'confDocDate' => 'date-time',
        'confDocNumber' => null,
        'contractSum' => null,
        'contractSumDel' => null,
        'correctionDate' => 'date-time',
        'correctionNumber' => 'int32',
        'countryCode' => null,
        'countryName' => null,
        'docCode' => null,
        'docName' => null,
        'docSum' => null,
        'docSumDel' => null,
        'expectedLife' => 'date-time',
        'hasConfDocNumber' => null,
        'ordinalNumber' => 'int32',
        'supplyFeature' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addInfo' => 'addInfo',
        'confDocDate' => 'confDocDate',
        'confDocNumber' => 'confDocNumber',
        'contractSum' => 'contractSum',
        'contractSumDel' => 'contractSumDel',
        'correctionDate' => 'correctionDate',
        'correctionNumber' => 'correctionNumber',
        'countryCode' => 'countryCode',
        'countryName' => 'countryName',
        'docCode' => 'docCode',
        'docName' => 'docName',
        'docSum' => 'docSum',
        'docSumDel' => 'docSumDel',
        'expectedLife' => 'expectedLife',
        'hasConfDocNumber' => 'hasConfDocNumber',
        'ordinalNumber' => 'ordinalNumber',
        'supplyFeature' => 'supplyFeature',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addInfo' => 'setAddInfo',
        'confDocDate' => 'setConfDocDate',
        'confDocNumber' => 'setConfDocNumber',
        'contractSum' => 'setContractSum',
        'contractSumDel' => 'setContractSumDel',
        'correctionDate' => 'setCorrectionDate',
        'correctionNumber' => 'setCorrectionNumber',
        'countryCode' => 'setCountryCode',
        'countryName' => 'setCountryName',
        'docCode' => 'setDocCode',
        'docName' => 'setDocName',
        'docSum' => 'setDocSum',
        'docSumDel' => 'setDocSumDel',
        'expectedLife' => 'setExpectedLife',
        'hasConfDocNumber' => 'setHasConfDocNumber',
        'ordinalNumber' => 'setOrdinalNumber',
        'supplyFeature' => 'setSupplyFeature',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addInfo' => 'getAddInfo',
        'confDocDate' => 'getConfDocDate',
        'confDocNumber' => 'getConfDocNumber',
        'contractSum' => 'getContractSum',
        'contractSumDel' => 'getContractSumDel',
        'correctionDate' => 'getCorrectionDate',
        'correctionNumber' => 'getCorrectionNumber',
        'countryCode' => 'getCountryCode',
        'countryName' => 'getCountryName',
        'docCode' => 'getDocCode',
        'docName' => 'getDocName',
        'docSum' => 'getDocSum',
        'docSumDel' => 'getDocSumDel',
        'expectedLife' => 'getExpectedLife',
        'hasConfDocNumber' => 'getHasConfDocNumber',
        'ordinalNumber' => 'getOrdinalNumber',
        'supplyFeature' => 'getSupplyFeature',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addInfo'] = isset($data['addInfo']) ? $data['addInfo'] : null;
        $this->container['confDocDate'] = isset($data['confDocDate']) ? $data['confDocDate'] : null;
        $this->container['confDocNumber'] = isset($data['confDocNumber']) ? $data['confDocNumber'] : null;
        $this->container['contractSum'] = isset($data['contractSum']) ? $data['contractSum'] : null;
        $this->container['contractSumDel'] = isset($data['contractSumDel']) ? $data['contractSumDel'] : null;
        $this->container['correctionDate'] = isset($data['correctionDate']) ? $data['correctionDate'] : null;
        $this->container['correctionNumber'] = isset($data['correctionNumber']) ? $data['correctionNumber'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['countryName'] = isset($data['countryName']) ? $data['countryName'] : null;
        $this->container['docCode'] = isset($data['docCode']) ? $data['docCode'] : null;
        $this->container['docName'] = isset($data['docName']) ? $data['docName'] : null;
        $this->container['docSum'] = isset($data['docSum']) ? $data['docSum'] : null;
        $this->container['docSumDel'] = isset($data['docSumDel']) ? $data['docSumDel'] : null;
        $this->container['expectedLife'] = isset($data['expectedLife']) ? $data['expectedLife'] : null;
        $this->container['hasConfDocNumber'] = isset($data['hasConfDocNumber']) ? $data['hasConfDocNumber'] : null;
        $this->container['ordinalNumber'] = isset($data['ordinalNumber']) ? $data['ordinalNumber'] : null;
        $this->container['supplyFeature'] = isset($data['supplyFeature']) ? $data['supplyFeature'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplyFeatureAllowableValues()
    {
        return [
            self::SUPPLY_FEATURE__1,
            self::SUPPLY_FEATURE__2,
            self::SUPPLY_FEATURE__3,
            self::SUPPLY_FEATURE__4,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contractSum'] === null) {
            $invalidProperties[] = "'contractSum' can't be null";
        }
        if ($this->container['docCode'] === null) {
            $invalidProperties[] = "'docCode' can't be null";
        }
        if ($this->container['docName'] === null) {
            $invalidProperties[] = "'docName' can't be null";
        }
        if ($this->container['docSum'] === null) {
            $invalidProperties[] = "'docSum' can't be null";
        }
        if ($this->container['ordinalNumber'] === null) {
            $invalidProperties[] = "'ordinalNumber' can't be null";
        }
        $allowedValues = $this->getSupplyFeatureAllowableValues();
        if (!is_null($this->container['supplyFeature']) && !in_array($this->container['supplyFeature'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'supplyFeature', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets addInfo
     *
     * @return string
     */
    public function getAddInfo()
    {
        return $this->container['addInfo'];
    }

    /**
     * Sets addInfo
     *
     * @param string $addInfo Дополнительная информация
     *
     * @return $this
     */
    public function setAddInfo($addInfo)
    {
        $this->container['addInfo'] = $addInfo;

        return $this;
    }

    /**
     * Gets confDocDate
     *
     * @return \DateTime
     */
    public function getConfDocDate()
    {
        return $this->container['confDocDate'];
    }

    /**
     * Sets confDocDate
     *
     * @param \DateTime $confDocDate Дата подтверждающего документа
     *
     * @return $this
     */
    public function setConfDocDate($confDocDate)
    {
        $this->container['confDocDate'] = $confDocDate;

        return $this;
    }

    /**
     * Gets confDocNumber
     *
     * @return string
     */
    public function getConfDocNumber()
    {
        return $this->container['confDocNumber'];
    }

    /**
     * Sets confDocNumber
     *
     * @param string $confDocNumber Номер подтверждающего документа
     *
     * @return $this
     */
    public function setConfDocNumber($confDocNumber)
    {
        $this->container['confDocNumber'] = $confDocNumber;

        return $this;
    }

    /**
     * Gets contractSum
     *
     * @return \common\models\sbbol2\AmountCurrency
     */
    public function getContractSum()
    {
        return $this->container['contractSum'];
    }

    /**
     * Sets contractSum
     *
     * @param \common\models\sbbol2\AmountCurrency $contractSum contractSum
     *
     * @return $this
     */
    public function setContractSum($contractSum)
    {
        $this->container['contractSum'] = $contractSum;

        return $this;
    }

    /**
     * Gets contractSumDel
     *
     * @return float
     */
    public function getContractSumDel()
    {
        return $this->container['contractSumDel'];
    }

    /**
     * Sets contractSumDel
     *
     * @param float $contractSumDel Сумма, соответствующая признаку поставки 2 или 3, в валюте цены контракта (кредитного договора)
     *
     * @return $this
     */
    public function setContractSumDel($contractSumDel)
    {
        $this->container['contractSumDel'] = $contractSumDel;

        return $this;
    }

    /**
     * Gets correctionDate
     *
     * @return \DateTime
     */
    public function getCorrectionDate()
    {
        return $this->container['correctionDate'];
    }

    /**
     * Sets correctionDate
     *
     * @param \DateTime $correctionDate Дата корректировки
     *
     * @return $this
     */
    public function setCorrectionDate($correctionDate)
    {
        $this->container['correctionDate'] = $correctionDate;

        return $this;
    }

    /**
     * Gets correctionNumber
     *
     * @return int
     */
    public function getCorrectionNumber()
    {
        return $this->container['correctionNumber'];
    }

    /**
     * Sets correctionNumber
     *
     * @param int $correctionNumber Номер корректировки
     *
     * @return $this
     */
    public function setCorrectionNumber($correctionNumber)
    {
        $this->container['correctionNumber'] = $correctionNumber;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode Код страны грузополучателя (грузоотправителя)
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets countryName
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['countryName'];
    }

    /**
     * Sets countryName
     *
     * @param string $countryName Наименование страны грузополучателя (грузоотправителя)
     *
     * @return $this
     */
    public function setCountryName($countryName)
    {
        $this->container['countryName'] = $countryName;

        return $this;
    }

    /**
     * Gets docCode
     *
     * @return string
     */
    public function getDocCode()
    {
        return $this->container['docCode'];
    }

    /**
     * Sets docCode
     *
     * @param string $docCode Код вида документа
     *
     * @return $this
     */
    public function setDocCode($docCode)
    {
        $this->container['docCode'] = $docCode;

        return $this;
    }

    /**
     * Gets docName
     *
     * @return string
     */
    public function getDocName()
    {
        return $this->container['docName'];
    }

    /**
     * Sets docName
     *
     * @param string $docName Наименование вида документа
     *
     * @return $this
     */
    public function setDocName($docName)
    {
        $this->container['docName'] = $docName;

        return $this;
    }

    /**
     * Gets docSum
     *
     * @return \common\models\sbbol2\AmountCurrency
     */
    public function getDocSum()
    {
        return $this->container['docSum'];
    }

    /**
     * Sets docSum
     *
     * @param \common\models\sbbol2\AmountCurrency $docSum docSum
     *
     * @return $this
     */
    public function setDocSum($docSum)
    {
        $this->container['docSum'] = $docSum;

        return $this;
    }

    /**
     * Gets docSumDel
     *
     * @return float
     */
    public function getDocSumDel()
    {
        return $this->container['docSumDel'];
    }

    /**
     * Sets docSumDel
     *
     * @param float $docSumDel Сумма, соответствующая признаку поставки 2 или 3, в валюте документа
     *
     * @return $this
     */
    public function setDocSumDel($docSumDel)
    {
        $this->container['docSumDel'] = $docSumDel;

        return $this;
    }

    /**
     * Gets expectedLife
     *
     * @return \DateTime
     */
    public function getExpectedLife()
    {
        return $this->container['expectedLife'];
    }

    /**
     * Sets expectedLife
     *
     * @param \DateTime $expectedLife Ожидаемый срок
     *
     * @return $this
     */
    public function setExpectedLife($expectedLife)
    {
        $this->container['expectedLife'] = $expectedLife;

        return $this;
    }

    /**
     * Gets hasConfDocNumber
     *
     * @return bool
     */
    public function getHasConfDocNumber()
    {
        return $this->container['hasConfDocNumber'];
    }

    /**
     * Sets hasConfDocNumber
     *
     * @param bool $hasConfDocNumber Признак присутствия номера подтверждающего документа
     *
     * @return $this
     */
    public function setHasConfDocNumber($hasConfDocNumber)
    {
        $this->container['hasConfDocNumber'] = $hasConfDocNumber;

        return $this;
    }

    /**
     * Gets ordinalNumber
     *
     * @return int
     */
    public function getOrdinalNumber()
    {
        return $this->container['ordinalNumber'];
    }

    /**
     * Sets ordinalNumber
     *
     * @param int $ordinalNumber Порядковый номер строки в справке
     *
     * @return $this
     */
    public function setOrdinalNumber($ordinalNumber)
    {
        $this->container['ordinalNumber'] = $ordinalNumber;

        return $this;
    }

    /**
     * Gets supplyFeature
     *
     * @return string
     */
    public function getSupplyFeature()
    {
        return $this->container['supplyFeature'];
    }

    /**
     * Sets supplyFeature
     *
     * @param string $supplyFeature Признак поставки
     *
     * @return $this
     */
    public function setSupplyFeature($supplyFeature)
    {
        $allowedValues = $this->getSupplyFeatureAllowableValues();
        if (!is_null($supplyFeature) && !in_array($supplyFeature, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supplyFeature', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplyFeature'] = $supplyFeature;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
