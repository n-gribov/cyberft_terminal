<?php
/**
 * StatementSummary
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * StatementSummary Class Doc Comment
 *
 * @category Class
 * @description Сводная информация по выписке
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class StatementSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'StatementSummary';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'closingBalance' => '\common\models\sbbol2\Amount',
        'closingBalanceRub' => '\common\models\sbbol2\Amount',
        'composedDateTime' => '\DateTime',
        'creditTransactionsNumber' => 'int',
        'creditTurnover' => '\common\models\sbbol2\Amount',
        'creditTurnoverRub' => '\common\models\sbbol2\Amount',
        'debitTransactionsNumber' => 'int',
        'debitTurnover' => '\common\models\sbbol2\Amount',
        'debitTurnoverRub' => '\common\models\sbbol2\Amount',
        'lastMovementDate' => '\DateTime',
        'openingBalance' => '\common\models\sbbol2\Amount',
        'openingBalanceRub' => '\common\models\sbbol2\Amount',
        'openingRate' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'closingBalance' => null,
        'closingBalanceRub' => null,
        'composedDateTime' => 'date-time',
        'creditTransactionsNumber' => 'int32',
        'creditTurnover' => null,
        'creditTurnoverRub' => null,
        'debitTransactionsNumber' => 'int32',
        'debitTurnover' => null,
        'debitTurnoverRub' => null,
        'lastMovementDate' => 'date-time',
        'openingBalance' => null,
        'openingBalanceRub' => null,
        'openingRate' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'closingBalance' => 'closingBalance',
        'closingBalanceRub' => 'closingBalanceRub',
        'composedDateTime' => 'composedDateTime',
        'creditTransactionsNumber' => 'creditTransactionsNumber',
        'creditTurnover' => 'creditTurnover',
        'creditTurnoverRub' => 'creditTurnoverRub',
        'debitTransactionsNumber' => 'debitTransactionsNumber',
        'debitTurnover' => 'debitTurnover',
        'debitTurnoverRub' => 'debitTurnoverRub',
        'lastMovementDate' => 'lastMovementDate',
        'openingBalance' => 'openingBalance',
        'openingBalanceRub' => 'openingBalanceRub',
        'openingRate' => 'openingRate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'closingBalance' => 'setClosingBalance',
        'closingBalanceRub' => 'setClosingBalanceRub',
        'composedDateTime' => 'setComposedDateTime',
        'creditTransactionsNumber' => 'setCreditTransactionsNumber',
        'creditTurnover' => 'setCreditTurnover',
        'creditTurnoverRub' => 'setCreditTurnoverRub',
        'debitTransactionsNumber' => 'setDebitTransactionsNumber',
        'debitTurnover' => 'setDebitTurnover',
        'debitTurnoverRub' => 'setDebitTurnoverRub',
        'lastMovementDate' => 'setLastMovementDate',
        'openingBalance' => 'setOpeningBalance',
        'openingBalanceRub' => 'setOpeningBalanceRub',
        'openingRate' => 'setOpeningRate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'closingBalance' => 'getClosingBalance',
        'closingBalanceRub' => 'getClosingBalanceRub',
        'composedDateTime' => 'getComposedDateTime',
        'creditTransactionsNumber' => 'getCreditTransactionsNumber',
        'creditTurnover' => 'getCreditTurnover',
        'creditTurnoverRub' => 'getCreditTurnoverRub',
        'debitTransactionsNumber' => 'getDebitTransactionsNumber',
        'debitTurnover' => 'getDebitTurnover',
        'debitTurnoverRub' => 'getDebitTurnoverRub',
        'lastMovementDate' => 'getLastMovementDate',
        'openingBalance' => 'getOpeningBalance',
        'openingBalanceRub' => 'getOpeningBalanceRub',
        'openingRate' => 'getOpeningRate',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['closingBalance'] = isset($data['closingBalance']) ? $data['closingBalance'] : null;
        $this->container['closingBalanceRub'] = isset($data['closingBalanceRub']) ? $data['closingBalanceRub'] : null;
        $this->container['composedDateTime'] = isset($data['composedDateTime']) ? $data['composedDateTime'] : null;
        $this->container['creditTransactionsNumber'] = isset($data['creditTransactionsNumber']) ? $data['creditTransactionsNumber'] : null;
        $this->container['creditTurnover'] = isset($data['creditTurnover']) ? $data['creditTurnover'] : null;
        $this->container['creditTurnoverRub'] = isset($data['creditTurnoverRub']) ? $data['creditTurnoverRub'] : null;
        $this->container['debitTransactionsNumber'] = isset($data['debitTransactionsNumber']) ? $data['debitTransactionsNumber'] : null;
        $this->container['debitTurnover'] = isset($data['debitTurnover']) ? $data['debitTurnover'] : null;
        $this->container['debitTurnoverRub'] = isset($data['debitTurnoverRub']) ? $data['debitTurnoverRub'] : null;
        $this->container['lastMovementDate'] = isset($data['lastMovementDate']) ? $data['lastMovementDate'] : null;
        $this->container['openingBalance'] = isset($data['openingBalance']) ? $data['openingBalance'] : null;
        $this->container['openingBalanceRub'] = isset($data['openingBalanceRub']) ? $data['openingBalanceRub'] : null;
        $this->container['openingRate'] = isset($data['openingRate']) ? $data['openingRate'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets closingBalance
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getClosingBalance()
    {
        return $this->container['closingBalance'];
    }

    /**
     * Sets closingBalance
     *
     * @param \common\models\sbbol2\Amount $closingBalance closingBalance
     *
     * @return $this
     */
    public function setClosingBalance($closingBalance)
    {
        $this->container['closingBalance'] = $closingBalance;

        return $this;
    }

    /**
     * Gets closingBalanceRub
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getClosingBalanceRub()
    {
        return $this->container['closingBalanceRub'];
    }

    /**
     * Sets closingBalanceRub
     *
     * @param \common\models\sbbol2\Amount $closingBalanceRub closingBalanceRub
     *
     * @return $this
     */
    public function setClosingBalanceRub($closingBalanceRub)
    {
        $this->container['closingBalanceRub'] = $closingBalanceRub;

        return $this;
    }

    /**
     * Gets composedDateTime
     *
     * @return \DateTime
     */
    public function getComposedDateTime()
    {
        return $this->container['composedDateTime'];
    }

    /**
     * Sets composedDateTime
     *
     * @param \DateTime $composedDateTime Дата и время составления сводки
     *
     * @return $this
     */
    public function setComposedDateTime($composedDateTime)
    {
        $this->container['composedDateTime'] = $composedDateTime;

        return $this;
    }

    /**
     * Gets creditTransactionsNumber
     *
     * @return int
     */
    public function getCreditTransactionsNumber()
    {
        return $this->container['creditTransactionsNumber'];
    }

    /**
     * Sets creditTransactionsNumber
     *
     * @param int $creditTransactionsNumber Количество кредитовых операций по счёту
     *
     * @return $this
     */
    public function setCreditTransactionsNumber($creditTransactionsNumber)
    {
        $this->container['creditTransactionsNumber'] = $creditTransactionsNumber;

        return $this;
    }

    /**
     * Gets creditTurnover
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getCreditTurnover()
    {
        return $this->container['creditTurnover'];
    }

    /**
     * Sets creditTurnover
     *
     * @param \common\models\sbbol2\Amount $creditTurnover creditTurnover
     *
     * @return $this
     */
    public function setCreditTurnover($creditTurnover)
    {
        $this->container['creditTurnover'] = $creditTurnover;

        return $this;
    }

    /**
     * Gets creditTurnoverRub
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getCreditTurnoverRub()
    {
        return $this->container['creditTurnoverRub'];
    }

    /**
     * Sets creditTurnoverRub
     *
     * @param \common\models\sbbol2\Amount $creditTurnoverRub creditTurnoverRub
     *
     * @return $this
     */
    public function setCreditTurnoverRub($creditTurnoverRub)
    {
        $this->container['creditTurnoverRub'] = $creditTurnoverRub;

        return $this;
    }

    /**
     * Gets debitTransactionsNumber
     *
     * @return int
     */
    public function getDebitTransactionsNumber()
    {
        return $this->container['debitTransactionsNumber'];
    }

    /**
     * Sets debitTransactionsNumber
     *
     * @param int $debitTransactionsNumber Количество дебетовых операций по счёту
     *
     * @return $this
     */
    public function setDebitTransactionsNumber($debitTransactionsNumber)
    {
        $this->container['debitTransactionsNumber'] = $debitTransactionsNumber;

        return $this;
    }

    /**
     * Gets debitTurnover
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getDebitTurnover()
    {
        return $this->container['debitTurnover'];
    }

    /**
     * Sets debitTurnover
     *
     * @param \common\models\sbbol2\Amount $debitTurnover debitTurnover
     *
     * @return $this
     */
    public function setDebitTurnover($debitTurnover)
    {
        $this->container['debitTurnover'] = $debitTurnover;

        return $this;
    }

    /**
     * Gets debitTurnoverRub
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getDebitTurnoverRub()
    {
        return $this->container['debitTurnoverRub'];
    }

    /**
     * Sets debitTurnoverRub
     *
     * @param \common\models\sbbol2\Amount $debitTurnoverRub debitTurnoverRub
     *
     * @return $this
     */
    public function setDebitTurnoverRub($debitTurnoverRub)
    {
        $this->container['debitTurnoverRub'] = $debitTurnoverRub;

        return $this;
    }

    /**
     * Gets lastMovementDate
     *
     * @return \DateTime
     */
    public function getLastMovementDate()
    {
        return $this->container['lastMovementDate'];
    }

    /**
     * Sets lastMovementDate
     *
     * @param \DateTime $lastMovementDate Дата последней операции по счёту за запрошенный период
     *
     * @return $this
     */
    public function setLastMovementDate($lastMovementDate)
    {
        $this->container['lastMovementDate'] = $lastMovementDate;

        return $this;
    }

    /**
     * Gets openingBalance
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getOpeningBalance()
    {
        return $this->container['openingBalance'];
    }

    /**
     * Sets openingBalance
     *
     * @param \common\models\sbbol2\Amount $openingBalance openingBalance
     *
     * @return $this
     */
    public function setOpeningBalance($openingBalance)
    {
        $this->container['openingBalance'] = $openingBalance;

        return $this;
    }

    /**
     * Gets openingBalanceRub
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getOpeningBalanceRub()
    {
        return $this->container['openingBalanceRub'];
    }

    /**
     * Sets openingBalanceRub
     *
     * @param \common\models\sbbol2\Amount $openingBalanceRub openingBalanceRub
     *
     * @return $this
     */
    public function setOpeningBalanceRub($openingBalanceRub)
    {
        $this->container['openingBalanceRub'] = $openingBalanceRub;

        return $this;
    }

    /**
     * Gets openingRate
     *
     * @return float
     */
    public function getOpeningRate()
    {
        return $this->container['openingRate'];
    }

    /**
     * Sets openingRate
     *
     * @param float $openingRate Курс ЦБ за единицу валюты на начало периода
     *
     * @return $this
     */
    public function setOpeningRate($openingRate)
    {
        $this->container['openingRate'] = $openingRate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
