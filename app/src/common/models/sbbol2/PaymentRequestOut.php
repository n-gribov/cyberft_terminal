<?php
/**
 * PaymentRequestOut
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * PaymentRequestOut Class Doc Comment
 *
 * @category Class
 * @description Исходящее платёжное требование
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class PaymentRequestOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PaymentRequestOut';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'acceptanceTerm' => 'string',
        'amount' => 'float',
        'bankComment' => 'string',
        'bankStatus' => 'string',
        'crucialFieldsHash' => 'string',
        'date' => '\DateTime',
        'deliveryKind' => 'string',
        'digestSignatures' => '\common\models\sbbol2\Signature[]',
        'externalId' => 'string',
        'number' => 'string',
        'operationCode' => 'string',
        'payeeAccount' => 'string',
        'payeeBankBic' => 'string',
        'payeeBankCorrAccount' => 'string',
        'payeeInn' => 'string',
        'payeeName' => 'string',
        'payerAccount' => 'string',
        'payerBankBic' => 'string',
        'payerBankCorrAccount' => 'string',
        'payerInn' => 'string',
        'payerName' => 'string',
        'paymentCondition' => 'string',
        'priority' => 'string',
        'purpose' => 'string',
        'vat' => '\common\models\sbbol2\Vat',
        'voCode' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'acceptanceTerm' => null,
        'amount' => null,
        'bankComment' => null,
        'bankStatus' => null,
        'crucialFieldsHash' => null,
        'date' => 'date-time',
        'deliveryKind' => null,
        'digestSignatures' => null,
        'externalId' => null,
        'number' => null,
        'operationCode' => null,
        'payeeAccount' => null,
        'payeeBankBic' => null,
        'payeeBankCorrAccount' => null,
        'payeeInn' => null,
        'payeeName' => null,
        'payerAccount' => null,
        'payerBankBic' => null,
        'payerBankCorrAccount' => null,
        'payerInn' => null,
        'payerName' => null,
        'paymentCondition' => null,
        'priority' => null,
        'purpose' => null,
        'vat' => null,
        'voCode' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptanceTerm' => 'acceptanceTerm',
        'amount' => 'amount',
        'bankComment' => 'bankComment',
        'bankStatus' => 'bankStatus',
        'crucialFieldsHash' => 'crucialFieldsHash',
        'date' => 'date',
        'deliveryKind' => 'deliveryKind',
        'digestSignatures' => 'digestSignatures',
        'externalId' => 'externalId',
        'number' => 'number',
        'operationCode' => 'operationCode',
        'payeeAccount' => 'payeeAccount',
        'payeeBankBic' => 'payeeBankBic',
        'payeeBankCorrAccount' => 'payeeBankCorrAccount',
        'payeeInn' => 'payeeInn',
        'payeeName' => 'payeeName',
        'payerAccount' => 'payerAccount',
        'payerBankBic' => 'payerBankBic',
        'payerBankCorrAccount' => 'payerBankCorrAccount',
        'payerInn' => 'payerInn',
        'payerName' => 'payerName',
        'paymentCondition' => 'paymentCondition',
        'priority' => 'priority',
        'purpose' => 'purpose',
        'vat' => 'vat',
        'voCode' => 'voCode',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptanceTerm' => 'setAcceptanceTerm',
        'amount' => 'setAmount',
        'bankComment' => 'setBankComment',
        'bankStatus' => 'setBankStatus',
        'crucialFieldsHash' => 'setCrucialFieldsHash',
        'date' => 'setDate',
        'deliveryKind' => 'setDeliveryKind',
        'digestSignatures' => 'setDigestSignatures',
        'externalId' => 'setExternalId',
        'number' => 'setNumber',
        'operationCode' => 'setOperationCode',
        'payeeAccount' => 'setPayeeAccount',
        'payeeBankBic' => 'setPayeeBankBic',
        'payeeBankCorrAccount' => 'setPayeeBankCorrAccount',
        'payeeInn' => 'setPayeeInn',
        'payeeName' => 'setPayeeName',
        'payerAccount' => 'setPayerAccount',
        'payerBankBic' => 'setPayerBankBic',
        'payerBankCorrAccount' => 'setPayerBankCorrAccount',
        'payerInn' => 'setPayerInn',
        'payerName' => 'setPayerName',
        'paymentCondition' => 'setPaymentCondition',
        'priority' => 'setPriority',
        'purpose' => 'setPurpose',
        'vat' => 'setVat',
        'voCode' => 'setVoCode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptanceTerm' => 'getAcceptanceTerm',
        'amount' => 'getAmount',
        'bankComment' => 'getBankComment',
        'bankStatus' => 'getBankStatus',
        'crucialFieldsHash' => 'getCrucialFieldsHash',
        'date' => 'getDate',
        'deliveryKind' => 'getDeliveryKind',
        'digestSignatures' => 'getDigestSignatures',
        'externalId' => 'getExternalId',
        'number' => 'getNumber',
        'operationCode' => 'getOperationCode',
        'payeeAccount' => 'getPayeeAccount',
        'payeeBankBic' => 'getPayeeBankBic',
        'payeeBankCorrAccount' => 'getPayeeBankCorrAccount',
        'payeeInn' => 'getPayeeInn',
        'payeeName' => 'getPayeeName',
        'payerAccount' => 'getPayerAccount',
        'payerBankBic' => 'getPayerBankBic',
        'payerBankCorrAccount' => 'getPayerBankCorrAccount',
        'payerInn' => 'getPayerInn',
        'payerName' => 'getPayerName',
        'paymentCondition' => 'getPaymentCondition',
        'priority' => 'getPriority',
        'purpose' => 'getPurpose',
        'vat' => 'getVat',
        'voCode' => 'getVoCode',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acceptanceTerm'] = isset($data['acceptanceTerm']) ? $data['acceptanceTerm'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['bankComment'] = isset($data['bankComment']) ? $data['bankComment'] : null;
        $this->container['bankStatus'] = isset($data['bankStatus']) ? $data['bankStatus'] : null;
        $this->container['crucialFieldsHash'] = isset($data['crucialFieldsHash']) ? $data['crucialFieldsHash'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['deliveryKind'] = isset($data['deliveryKind']) ? $data['deliveryKind'] : null;
        $this->container['digestSignatures'] = isset($data['digestSignatures']) ? $data['digestSignatures'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['operationCode'] = isset($data['operationCode']) ? $data['operationCode'] : null;
        $this->container['payeeAccount'] = isset($data['payeeAccount']) ? $data['payeeAccount'] : null;
        $this->container['payeeBankBic'] = isset($data['payeeBankBic']) ? $data['payeeBankBic'] : null;
        $this->container['payeeBankCorrAccount'] = isset($data['payeeBankCorrAccount']) ? $data['payeeBankCorrAccount'] : null;
        $this->container['payeeInn'] = isset($data['payeeInn']) ? $data['payeeInn'] : null;
        $this->container['payeeName'] = isset($data['payeeName']) ? $data['payeeName'] : null;
        $this->container['payerAccount'] = isset($data['payerAccount']) ? $data['payerAccount'] : null;
        $this->container['payerBankBic'] = isset($data['payerBankBic']) ? $data['payerBankBic'] : null;
        $this->container['payerBankCorrAccount'] = isset($data['payerBankCorrAccount']) ? $data['payerBankCorrAccount'] : null;
        $this->container['payerInn'] = isset($data['payerInn']) ? $data['payerInn'] : null;
        $this->container['payerName'] = isset($data['payerName']) ? $data['payerName'] : null;
        $this->container['paymentCondition'] = isset($data['paymentCondition']) ? $data['paymentCondition'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['voCode'] = isset($data['voCode']) ? $data['voCode'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['operationCode'] === null) {
            $invalidProperties[] = "'operationCode' can't be null";
        }
        if ($this->container['payeeBankBic'] === null) {
            $invalidProperties[] = "'payeeBankBic' can't be null";
        }
        if ($this->container['payeeName'] === null) {
            $invalidProperties[] = "'payeeName' can't be null";
        }
        if ($this->container['payerAccount'] === null) {
            $invalidProperties[] = "'payerAccount' can't be null";
        }
        if ($this->container['payerBankBic'] === null) {
            $invalidProperties[] = "'payerBankBic' can't be null";
        }
        if ($this->container['payerBankCorrAccount'] === null) {
            $invalidProperties[] = "'payerBankCorrAccount' can't be null";
        }
        if ($this->container['payerInn'] === null) {
            $invalidProperties[] = "'payerInn' can't be null";
        }
        if ($this->container['payerName'] === null) {
            $invalidProperties[] = "'payerName' can't be null";
        }
        if ($this->container['paymentCondition'] === null) {
            $invalidProperties[] = "'paymentCondition' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['purpose'] === null) {
            $invalidProperties[] = "'purpose' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets acceptanceTerm
     *
     * @return string
     */
    public function getAcceptanceTerm()
    {
        return $this->container['acceptanceTerm'];
    }

    /**
     * Sets acceptanceTerm
     *
     * @param string $acceptanceTerm Срок для акцепта (поле 36). Указывается количество дней для получения акцепта плательщика.
     *
     * @return $this
     */
    public function setAcceptanceTerm($acceptanceTerm)
    {
        $this->container['acceptanceTerm'] = $acceptanceTerm;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Сумма платежа
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets bankComment
     *
     * @return string
     */
    public function getBankComment()
    {
        return $this->container['bankComment'];
    }

    /**
     * Sets bankComment
     *
     * @param string $bankComment Банковский комментарий к статусу документа
     *
     * @return $this
     */
    public function setBankComment($bankComment)
    {
        $this->container['bankComment'] = $bankComment;

        return $this;
    }

    /**
     * Gets bankStatus
     *
     * @return string
     */
    public function getBankStatus()
    {
        return $this->container['bankStatus'];
    }

    /**
     * Sets bankStatus
     *
     * @param string $bankStatus Статус документа
     *
     * @return $this
     */
    public function setBankStatus($bankStatus)
    {
        $this->container['bankStatus'] = $bankStatus;

        return $this;
    }

    /**
     * Gets crucialFieldsHash
     *
     * @return string
     */
    public function getCrucialFieldsHash()
    {
        return $this->container['crucialFieldsHash'];
    }

    /**
     * Sets crucialFieldsHash
     *
     * @param string $crucialFieldsHash Hash от ключевых полей документа
     *
     * @return $this
     */
    public function setCrucialFieldsHash($crucialFieldsHash)
    {
        $this->container['crucialFieldsHash'] = $crucialFieldsHash;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата составления документа
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets deliveryKind
     *
     * @return string
     */
    public function getDeliveryKind()
    {
        return $this->container['deliveryKind'];
    }

    /**
     * Sets deliveryKind
     *
     * @param string $deliveryKind Вид платежа
     *
     * @return $this
     */
    public function setDeliveryKind($deliveryKind)
    {
        $this->container['deliveryKind'] = $deliveryKind;

        return $this;
    }

    /**
     * Gets digestSignatures
     *
     * @return \common\models\sbbol2\Signature[]
     */
    public function getDigestSignatures()
    {
        return $this->container['digestSignatures'];
    }

    /**
     * Sets digestSignatures
     *
     * @param \common\models\sbbol2\Signature[] $digestSignatures Электронные подписи по дайджесту документа
     *
     * @return $this
     */
    public function setDigestSignatures($digestSignatures)
    {
        $this->container['digestSignatures'] = $digestSignatures;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Идентификатор документа, присвоенный партнёром (UUID)
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер документа
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets operationCode
     *
     * @return string
     */
    public function getOperationCode()
    {
        return $this->container['operationCode'];
    }

    /**
     * Sets operationCode
     *
     * @param string $operationCode Код операции
     *
     * @return $this
     */
    public function setOperationCode($operationCode)
    {
        $this->container['operationCode'] = $operationCode;

        return $this;
    }

    /**
     * Gets payeeAccount
     *
     * @return string
     */
    public function getPayeeAccount()
    {
        return $this->container['payeeAccount'];
    }

    /**
     * Sets payeeAccount
     *
     * @param string $payeeAccount Счёт получателя платежа
     *
     * @return $this
     */
    public function setPayeeAccount($payeeAccount)
    {
        $this->container['payeeAccount'] = $payeeAccount;

        return $this;
    }

    /**
     * Gets payeeBankBic
     *
     * @return string
     */
    public function getPayeeBankBic()
    {
        return $this->container['payeeBankBic'];
    }

    /**
     * Sets payeeBankBic
     *
     * @param string $payeeBankBic БИК получателя платежа
     *
     * @return $this
     */
    public function setPayeeBankBic($payeeBankBic)
    {
        $this->container['payeeBankBic'] = $payeeBankBic;

        return $this;
    }

    /**
     * Gets payeeBankCorrAccount
     *
     * @return string
     */
    public function getPayeeBankCorrAccount()
    {
        return $this->container['payeeBankCorrAccount'];
    }

    /**
     * Sets payeeBankCorrAccount
     *
     * @param string $payeeBankCorrAccount Корсчёт банка получателя платежа
     *
     * @return $this
     */
    public function setPayeeBankCorrAccount($payeeBankCorrAccount)
    {
        $this->container['payeeBankCorrAccount'] = $payeeBankCorrAccount;

        return $this;
    }

    /**
     * Gets payeeInn
     *
     * @return string
     */
    public function getPayeeInn()
    {
        return $this->container['payeeInn'];
    }

    /**
     * Sets payeeInn
     *
     * @param string $payeeInn ИНН получателя платежа
     *
     * @return $this
     */
    public function setPayeeInn($payeeInn)
    {
        $this->container['payeeInn'] = $payeeInn;

        return $this;
    }

    /**
     * Gets payeeName
     *
     * @return string
     */
    public function getPayeeName()
    {
        return $this->container['payeeName'];
    }

    /**
     * Sets payeeName
     *
     * @param string $payeeName Полное наименование получателя платежа
     *
     * @return $this
     */
    public function setPayeeName($payeeName)
    {
        $this->container['payeeName'] = $payeeName;

        return $this;
    }

    /**
     * Gets payerAccount
     *
     * @return string
     */
    public function getPayerAccount()
    {
        return $this->container['payerAccount'];
    }

    /**
     * Sets payerAccount
     *
     * @param string $payerAccount Счёт плательщика
     *
     * @return $this
     */
    public function setPayerAccount($payerAccount)
    {
        $this->container['payerAccount'] = $payerAccount;

        return $this;
    }

    /**
     * Gets payerBankBic
     *
     * @return string
     */
    public function getPayerBankBic()
    {
        return $this->container['payerBankBic'];
    }

    /**
     * Sets payerBankBic
     *
     * @param string $payerBankBic БИК банка плательщика
     *
     * @return $this
     */
    public function setPayerBankBic($payerBankBic)
    {
        $this->container['payerBankBic'] = $payerBankBic;

        return $this;
    }

    /**
     * Gets payerBankCorrAccount
     *
     * @return string
     */
    public function getPayerBankCorrAccount()
    {
        return $this->container['payerBankCorrAccount'];
    }

    /**
     * Sets payerBankCorrAccount
     *
     * @param string $payerBankCorrAccount Корсчёт банка плательщика
     *
     * @return $this
     */
    public function setPayerBankCorrAccount($payerBankCorrAccount)
    {
        $this->container['payerBankCorrAccount'] = $payerBankCorrAccount;

        return $this;
    }

    /**
     * Gets payerInn
     *
     * @return string
     */
    public function getPayerInn()
    {
        return $this->container['payerInn'];
    }

    /**
     * Sets payerInn
     *
     * @param string $payerInn ИНН плательщика
     *
     * @return $this
     */
    public function setPayerInn($payerInn)
    {
        $this->container['payerInn'] = $payerInn;

        return $this;
    }

    /**
     * Gets payerName
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payerName'];
    }

    /**
     * Sets payerName
     *
     * @param string $payerName Полное наименование плательщика
     *
     * @return $this
     */
    public function setPayerName($payerName)
    {
        $this->container['payerName'] = $payerName;

        return $this;
    }

    /**
     * Gets paymentCondition
     *
     * @return string
     */
    public function getPaymentCondition()
    {
        return $this->container['paymentCondition'];
    }

    /**
     * Sets paymentCondition
     *
     * @param string $paymentCondition Условие оплаты (поле 35). Указывается цифра \"1\" - заранее данный акцепт плательщика или цифра \"2\" - требуется получение акцепта плательщика.
     *
     * @return $this
     */
    public function setPaymentCondition($paymentCondition)
    {
        $this->container['paymentCondition'] = $paymentCondition;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority Очерёдность платежа
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose Назначение платежа
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return \common\models\sbbol2\Vat
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param \common\models\sbbol2\Vat $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets voCode
     *
     * @return string
     */
    public function getVoCode()
    {
        return $this->container['voCode'];
    }

    /**
     * Sets voCode
     *
     * @param string $voCode Код вида валютной операции
     *
     * @return $this
     */
    public function setVoCode($voCode)
    {
        $this->container['voCode'] = $voCode;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
