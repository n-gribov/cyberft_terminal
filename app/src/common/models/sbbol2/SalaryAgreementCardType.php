<?php
/**
 * SalaryAgreementCardType
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * SalaryAgreementCardType Class Doc Comment
 *
 * @category Class
 * @description Тип пластиковой карты
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SalaryAgreementCardType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'SalaryAgreementCardType';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'bonusProgramCode' => 'string',
        'depositSubtypeCode' => 'string',
        'depositTypeCode' => 'string',
        'endDate' => '\DateTime',
        'peopleGroupCode' => 'string',
        'peopleGroupName' => 'string',
        'typeCode' => 'string',
        'typeName' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'bonusProgramCode' => null,
        'depositSubtypeCode' => null,
        'depositTypeCode' => null,
        'endDate' => 'date-time',
        'peopleGroupCode' => null,
        'peopleGroupName' => null,
        'typeCode' => null,
        'typeName' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bonusProgramCode' => 'bonusProgramCode',
        'depositSubtypeCode' => 'depositSubtypeCode',
        'depositTypeCode' => 'depositTypeCode',
        'endDate' => 'endDate',
        'peopleGroupCode' => 'peopleGroupCode',
        'peopleGroupName' => 'peopleGroupName',
        'typeCode' => 'typeCode',
        'typeName' => 'typeName',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bonusProgramCode' => 'setBonusProgramCode',
        'depositSubtypeCode' => 'setDepositSubtypeCode',
        'depositTypeCode' => 'setDepositTypeCode',
        'endDate' => 'setEndDate',
        'peopleGroupCode' => 'setPeopleGroupCode',
        'peopleGroupName' => 'setPeopleGroupName',
        'typeCode' => 'setTypeCode',
        'typeName' => 'setTypeName',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bonusProgramCode' => 'getBonusProgramCode',
        'depositSubtypeCode' => 'getDepositSubtypeCode',
        'depositTypeCode' => 'getDepositTypeCode',
        'endDate' => 'getEndDate',
        'peopleGroupCode' => 'getPeopleGroupCode',
        'peopleGroupName' => 'getPeopleGroupName',
        'typeCode' => 'getTypeCode',
        'typeName' => 'getTypeName',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bonusProgramCode'] = isset($data['bonusProgramCode']) ? $data['bonusProgramCode'] : null;
        $this->container['depositSubtypeCode'] = isset($data['depositSubtypeCode']) ? $data['depositSubtypeCode'] : null;
        $this->container['depositTypeCode'] = isset($data['depositTypeCode']) ? $data['depositTypeCode'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['peopleGroupCode'] = isset($data['peopleGroupCode']) ? $data['peopleGroupCode'] : null;
        $this->container['peopleGroupName'] = isset($data['peopleGroupName']) ? $data['peopleGroupName'] : null;
        $this->container['typeCode'] = isset($data['typeCode']) ? $data['typeCode'] : null;
        $this->container['typeName'] = isset($data['typeName']) ? $data['typeName'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets bonusProgramCode
     *
     * @return string
     */
    public function getBonusProgramCode()
    {
        return $this->container['bonusProgramCode'];
    }

    /**
     * Sets bonusProgramCode
     *
     * @param string $bonusProgramCode Код бонусной программы
     *
     * @return $this
     */
    public function setBonusProgramCode($bonusProgramCode)
    {
        $this->container['bonusProgramCode'] = $bonusProgramCode;

        return $this;
    }

    /**
     * Gets depositSubtypeCode
     *
     * @return string
     */
    public function getDepositSubtypeCode()
    {
        return $this->container['depositSubtypeCode'];
    }

    /**
     * Sets depositSubtypeCode
     *
     * @param string $depositSubtypeCode Код подвида вклада
     *
     * @return $this
     */
    public function setDepositSubtypeCode($depositSubtypeCode)
    {
        $this->container['depositSubtypeCode'] = $depositSubtypeCode;

        return $this;
    }

    /**
     * Gets depositTypeCode
     *
     * @return string
     */
    public function getDepositTypeCode()
    {
        return $this->container['depositTypeCode'];
    }

    /**
     * Sets depositTypeCode
     *
     * @param string $depositTypeCode Код вида вклада
     *
     * @return $this
     */
    public function setDepositTypeCode($depositTypeCode)
    {
        $this->container['depositTypeCode'] = $depositTypeCode;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate Дата закрытия возможности выпуска карт
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets peopleGroupCode
     *
     * @return string
     */
    public function getPeopleGroupCode()
    {
        return $this->container['peopleGroupCode'];
    }

    /**
     * Sets peopleGroupCode
     *
     * @param string $peopleGroupCode Код категории населения
     *
     * @return $this
     */
    public function setPeopleGroupCode($peopleGroupCode)
    {
        $this->container['peopleGroupCode'] = $peopleGroupCode;

        return $this;
    }

    /**
     * Gets peopleGroupName
     *
     * @return string
     */
    public function getPeopleGroupName()
    {
        return $this->container['peopleGroupName'];
    }

    /**
     * Sets peopleGroupName
     *
     * @param string $peopleGroupName Название категории населения
     *
     * @return $this
     */
    public function setPeopleGroupName($peopleGroupName)
    {
        $this->container['peopleGroupName'] = $peopleGroupName;

        return $this;
    }

    /**
     * Gets typeCode
     *
     * @return string
     */
    public function getTypeCode()
    {
        return $this->container['typeCode'];
    }

    /**
     * Sets typeCode
     *
     * @param string $typeCode Код вида карты
     *
     * @return $this
     */
    public function setTypeCode($typeCode)
    {
        $this->container['typeCode'] = $typeCode;

        return $this;
    }

    /**
     * Gets typeName
     *
     * @return string
     */
    public function getTypeName()
    {
        return $this->container['typeName'];
    }

    /**
     * Sets typeName
     *
     * @param string $typeName Вид карты
     *
     * @return $this
     */
    public function setTypeName($typeName)
    {
        $this->container['typeName'] = $typeName;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
