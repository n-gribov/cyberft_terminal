<?php
/**
 * SalaryAgreementPlaceOfService
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * SalaryAgreementPlaceOfService Class Doc Comment
 *
 * @category Class
 * @description Место обслуживания
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SalaryAgreementPlaceOfService implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'SalaryAgreementPlaceOfService';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'osb' => 'string',
        'placeAddress' => 'string',
        'placeCode' => 'string',
        'placeName' => 'string',
        'tb' => 'string',
        'vsp' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'osb' => null,
        'placeAddress' => null,
        'placeCode' => null,
        'placeName' => null,
        'tb' => null,
        'vsp' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'osb' => 'osb',
        'placeAddress' => 'placeAddress',
        'placeCode' => 'placeCode',
        'placeName' => 'placeName',
        'tb' => 'tb',
        'vsp' => 'vsp',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'osb' => 'setOsb',
        'placeAddress' => 'setPlaceAddress',
        'placeCode' => 'setPlaceCode',
        'placeName' => 'setPlaceName',
        'tb' => 'setTb',
        'vsp' => 'setVsp',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'osb' => 'getOsb',
        'placeAddress' => 'getPlaceAddress',
        'placeCode' => 'getPlaceCode',
        'placeName' => 'getPlaceName',
        'tb' => 'getTb',
        'vsp' => 'getVsp',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['osb'] = isset($data['osb']) ? $data['osb'] : null;
        $this->container['placeAddress'] = isset($data['placeAddress']) ? $data['placeAddress'] : null;
        $this->container['placeCode'] = isset($data['placeCode']) ? $data['placeCode'] : null;
        $this->container['placeName'] = isset($data['placeName']) ? $data['placeName'] : null;
        $this->container['tb'] = isset($data['tb']) ? $data['tb'] : null;
        $this->container['vsp'] = isset($data['vsp']) ? $data['vsp'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets osb
     *
     * @return string
     */
    public function getOsb()
    {
        return $this->container['osb'];
    }

    /**
     * Sets osb
     *
     * @param string $osb Номер отделения сберегательного банка
     *
     * @return $this
     */
    public function setOsb($osb)
    {
        $this->container['osb'] = $osb;

        return $this;
    }

    /**
     * Gets placeAddress
     *
     * @return string
     */
    public function getPlaceAddress()
    {
        return $this->container['placeAddress'];
    }

    /**
     * Sets placeAddress
     *
     * @param string $placeAddress Адрес подразделения
     *
     * @return $this
     */
    public function setPlaceAddress($placeAddress)
    {
        $this->container['placeAddress'] = $placeAddress;

        return $this;
    }

    /**
     * Gets placeCode
     *
     * @return string
     */
    public function getPlaceCode()
    {
        return $this->container['placeCode'];
    }

    /**
     * Sets placeCode
     *
     * @param string $placeCode Код подразделения
     *
     * @return $this
     */
    public function setPlaceCode($placeCode)
    {
        $this->container['placeCode'] = $placeCode;

        return $this;
    }

    /**
     * Gets placeName
     *
     * @return string
     */
    public function getPlaceName()
    {
        return $this->container['placeName'];
    }

    /**
     * Sets placeName
     *
     * @param string $placeName Наименование подразделения
     *
     * @return $this
     */
    public function setPlaceName($placeName)
    {
        $this->container['placeName'] = $placeName;

        return $this;
    }

    /**
     * Gets tb
     *
     * @return string
     */
    public function getTb()
    {
        return $this->container['tb'];
    }

    /**
     * Sets tb
     *
     * @param string $tb Номер территориального банка
     *
     * @return $this
     */
    public function setTb($tb)
    {
        $this->container['tb'] = $tb;

        return $this;
    }

    /**
     * Gets vsp
     *
     * @return string
     */
    public function getVsp()
    {
        return $this->container['vsp'];
    }

    /**
     * Sets vsp
     *
     * @param string $vsp Номер внутреннего структурного подразделения
     *
     * @return $this
     */
    public function setVsp($vsp)
    {
        $this->container['vsp'] = $vsp;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
