<?php
/**
 * RURTransfer
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * RURTransfer Class Doc Comment
 *
 * @category Class
 * @description Данные рублевой операции
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class RURTransfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'RURTransfer';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'cartInfo' => '\common\models\sbbol2\CartInfo',
        'deliveryKind' => 'string',
        'departmentalInfo' => '\common\models\sbbol2\DepartmentalInfo',
        'payeeAccount' => 'string',
        'payeeBankBic' => 'string',
        'payeeBankCorrAccount' => 'string',
        'payeeBankName' => 'string',
        'payeeInn' => 'string',
        'payeeKpp' => 'string',
        'payeeName' => 'string',
        'payerAccount' => 'string',
        'payerBankBic' => 'string',
        'payerBankCorrAccount' => 'string',
        'payerBankName' => 'string',
        'payerInn' => 'string',
        'payerKpp' => 'string',
        'payerName' => 'string',
        'payingCondition' => 'string',
        'receiptDate' => '\DateTime',
        'valueDate' => '\DateTime',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'cartInfo' => null,
        'deliveryKind' => null,
        'departmentalInfo' => null,
        'payeeAccount' => null,
        'payeeBankBic' => null,
        'payeeBankCorrAccount' => null,
        'payeeBankName' => null,
        'payeeInn' => null,
        'payeeKpp' => null,
        'payeeName' => null,
        'payerAccount' => null,
        'payerBankBic' => null,
        'payerBankCorrAccount' => null,
        'payerBankName' => null,
        'payerInn' => null,
        'payerKpp' => null,
        'payerName' => null,
        'payingCondition' => null,
        'receiptDate' => 'date-time',
        'valueDate' => 'date-time',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cartInfo' => 'cartInfo',
        'deliveryKind' => 'deliveryKind',
        'departmentalInfo' => 'departmentalInfo',
        'payeeAccount' => 'payeeAccount',
        'payeeBankBic' => 'payeeBankBic',
        'payeeBankCorrAccount' => 'payeeBankCorrAccount',
        'payeeBankName' => 'payeeBankName',
        'payeeInn' => 'payeeInn',
        'payeeKpp' => 'payeeKpp',
        'payeeName' => 'payeeName',
        'payerAccount' => 'payerAccount',
        'payerBankBic' => 'payerBankBic',
        'payerBankCorrAccount' => 'payerBankCorrAccount',
        'payerBankName' => 'payerBankName',
        'payerInn' => 'payerInn',
        'payerKpp' => 'payerKpp',
        'payerName' => 'payerName',
        'payingCondition' => 'payingCondition',
        'receiptDate' => 'receiptDate',
        'valueDate' => 'valueDate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cartInfo' => 'setCartInfo',
        'deliveryKind' => 'setDeliveryKind',
        'departmentalInfo' => 'setDepartmentalInfo',
        'payeeAccount' => 'setPayeeAccount',
        'payeeBankBic' => 'setPayeeBankBic',
        'payeeBankCorrAccount' => 'setPayeeBankCorrAccount',
        'payeeBankName' => 'setPayeeBankName',
        'payeeInn' => 'setPayeeInn',
        'payeeKpp' => 'setPayeeKpp',
        'payeeName' => 'setPayeeName',
        'payerAccount' => 'setPayerAccount',
        'payerBankBic' => 'setPayerBankBic',
        'payerBankCorrAccount' => 'setPayerBankCorrAccount',
        'payerBankName' => 'setPayerBankName',
        'payerInn' => 'setPayerInn',
        'payerKpp' => 'setPayerKpp',
        'payerName' => 'setPayerName',
        'payingCondition' => 'setPayingCondition',
        'receiptDate' => 'setReceiptDate',
        'valueDate' => 'setValueDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cartInfo' => 'getCartInfo',
        'deliveryKind' => 'getDeliveryKind',
        'departmentalInfo' => 'getDepartmentalInfo',
        'payeeAccount' => 'getPayeeAccount',
        'payeeBankBic' => 'getPayeeBankBic',
        'payeeBankCorrAccount' => 'getPayeeBankCorrAccount',
        'payeeBankName' => 'getPayeeBankName',
        'payeeInn' => 'getPayeeInn',
        'payeeKpp' => 'getPayeeKpp',
        'payeeName' => 'getPayeeName',
        'payerAccount' => 'getPayerAccount',
        'payerBankBic' => 'getPayerBankBic',
        'payerBankCorrAccount' => 'getPayerBankCorrAccount',
        'payerBankName' => 'getPayerBankName',
        'payerInn' => 'getPayerInn',
        'payerKpp' => 'getPayerKpp',
        'payerName' => 'getPayerName',
        'payingCondition' => 'getPayingCondition',
        'receiptDate' => 'getReceiptDate',
        'valueDate' => 'getValueDate',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cartInfo'] = isset($data['cartInfo']) ? $data['cartInfo'] : null;
        $this->container['deliveryKind'] = isset($data['deliveryKind']) ? $data['deliveryKind'] : null;
        $this->container['departmentalInfo'] = isset($data['departmentalInfo']) ? $data['departmentalInfo'] : null;
        $this->container['payeeAccount'] = isset($data['payeeAccount']) ? $data['payeeAccount'] : null;
        $this->container['payeeBankBic'] = isset($data['payeeBankBic']) ? $data['payeeBankBic'] : null;
        $this->container['payeeBankCorrAccount'] = isset($data['payeeBankCorrAccount']) ? $data['payeeBankCorrAccount'] : null;
        $this->container['payeeBankName'] = isset($data['payeeBankName']) ? $data['payeeBankName'] : null;
        $this->container['payeeInn'] = isset($data['payeeInn']) ? $data['payeeInn'] : null;
        $this->container['payeeKpp'] = isset($data['payeeKpp']) ? $data['payeeKpp'] : null;
        $this->container['payeeName'] = isset($data['payeeName']) ? $data['payeeName'] : null;
        $this->container['payerAccount'] = isset($data['payerAccount']) ? $data['payerAccount'] : null;
        $this->container['payerBankBic'] = isset($data['payerBankBic']) ? $data['payerBankBic'] : null;
        $this->container['payerBankCorrAccount'] = isset($data['payerBankCorrAccount']) ? $data['payerBankCorrAccount'] : null;
        $this->container['payerBankName'] = isset($data['payerBankName']) ? $data['payerBankName'] : null;
        $this->container['payerInn'] = isset($data['payerInn']) ? $data['payerInn'] : null;
        $this->container['payerKpp'] = isset($data['payerKpp']) ? $data['payerKpp'] : null;
        $this->container['payerName'] = isset($data['payerName']) ? $data['payerName'] : null;
        $this->container['payingCondition'] = isset($data['payingCondition']) ? $data['payingCondition'] : null;
        $this->container['receiptDate'] = isset($data['receiptDate']) ? $data['receiptDate'] : null;
        $this->container['valueDate'] = isset($data['valueDate']) ? $data['valueDate'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets cartInfo
     *
     * @return \common\models\sbbol2\CartInfo
     */
    public function getCartInfo()
    {
        return $this->container['cartInfo'];
    }

    /**
     * Sets cartInfo
     *
     * @param \common\models\sbbol2\CartInfo $cartInfo cartInfo
     *
     * @return $this
     */
    public function setCartInfo($cartInfo)
    {
        $this->container['cartInfo'] = $cartInfo;

        return $this;
    }

    /**
     * Gets deliveryKind
     *
     * @return string
     */
    public function getDeliveryKind()
    {
        return $this->container['deliveryKind'];
    }

    /**
     * Sets deliveryKind
     *
     * @param string $deliveryKind Способ отправки документа
     *
     * @return $this
     */
    public function setDeliveryKind($deliveryKind)
    {
        $this->container['deliveryKind'] = $deliveryKind;

        return $this;
    }

    /**
     * Gets departmentalInfo
     *
     * @return \common\models\sbbol2\DepartmentalInfo
     */
    public function getDepartmentalInfo()
    {
        return $this->container['departmentalInfo'];
    }

    /**
     * Sets departmentalInfo
     *
     * @param \common\models\sbbol2\DepartmentalInfo $departmentalInfo departmentalInfo
     *
     * @return $this
     */
    public function setDepartmentalInfo($departmentalInfo)
    {
        $this->container['departmentalInfo'] = $departmentalInfo;

        return $this;
    }

    /**
     * Gets payeeAccount
     *
     * @return string
     */
    public function getPayeeAccount()
    {
        return $this->container['payeeAccount'];
    }

    /**
     * Sets payeeAccount
     *
     * @param string $payeeAccount Номер счёта получателя
     *
     * @return $this
     */
    public function setPayeeAccount($payeeAccount)
    {
        $this->container['payeeAccount'] = $payeeAccount;

        return $this;
    }

    /**
     * Gets payeeBankBic
     *
     * @return string
     */
    public function getPayeeBankBic()
    {
        return $this->container['payeeBankBic'];
    }

    /**
     * Sets payeeBankBic
     *
     * @param string $payeeBankBic БИК банка получателя
     *
     * @return $this
     */
    public function setPayeeBankBic($payeeBankBic)
    {
        $this->container['payeeBankBic'] = $payeeBankBic;

        return $this;
    }

    /**
     * Gets payeeBankCorrAccount
     *
     * @return string
     */
    public function getPayeeBankCorrAccount()
    {
        return $this->container['payeeBankCorrAccount'];
    }

    /**
     * Sets payeeBankCorrAccount
     *
     * @param string $payeeBankCorrAccount Корсчёт банка получателя
     *
     * @return $this
     */
    public function setPayeeBankCorrAccount($payeeBankCorrAccount)
    {
        $this->container['payeeBankCorrAccount'] = $payeeBankCorrAccount;

        return $this;
    }

    /**
     * Gets payeeBankName
     *
     * @return string
     */
    public function getPayeeBankName()
    {
        return $this->container['payeeBankName'];
    }

    /**
     * Sets payeeBankName
     *
     * @param string $payeeBankName Наименование банка получателя
     *
     * @return $this
     */
    public function setPayeeBankName($payeeBankName)
    {
        $this->container['payeeBankName'] = $payeeBankName;

        return $this;
    }

    /**
     * Gets payeeInn
     *
     * @return string
     */
    public function getPayeeInn()
    {
        return $this->container['payeeInn'];
    }

    /**
     * Sets payeeInn
     *
     * @param string $payeeInn ИНН получателя
     *
     * @return $this
     */
    public function setPayeeInn($payeeInn)
    {
        $this->container['payeeInn'] = $payeeInn;

        return $this;
    }

    /**
     * Gets payeeKpp
     *
     * @return string
     */
    public function getPayeeKpp()
    {
        return $this->container['payeeKpp'];
    }

    /**
     * Sets payeeKpp
     *
     * @param string $payeeKpp КПП получателя
     *
     * @return $this
     */
    public function setPayeeKpp($payeeKpp)
    {
        $this->container['payeeKpp'] = $payeeKpp;

        return $this;
    }

    /**
     * Gets payeeName
     *
     * @return string
     */
    public function getPayeeName()
    {
        return $this->container['payeeName'];
    }

    /**
     * Sets payeeName
     *
     * @param string $payeeName Наименование получателя
     *
     * @return $this
     */
    public function setPayeeName($payeeName)
    {
        $this->container['payeeName'] = $payeeName;

        return $this;
    }

    /**
     * Gets payerAccount
     *
     * @return string
     */
    public function getPayerAccount()
    {
        return $this->container['payerAccount'];
    }

    /**
     * Sets payerAccount
     *
     * @param string $payerAccount Номер счёта плательщика
     *
     * @return $this
     */
    public function setPayerAccount($payerAccount)
    {
        $this->container['payerAccount'] = $payerAccount;

        return $this;
    }

    /**
     * Gets payerBankBic
     *
     * @return string
     */
    public function getPayerBankBic()
    {
        return $this->container['payerBankBic'];
    }

    /**
     * Sets payerBankBic
     *
     * @param string $payerBankBic БИК банка плательщика
     *
     * @return $this
     */
    public function setPayerBankBic($payerBankBic)
    {
        $this->container['payerBankBic'] = $payerBankBic;

        return $this;
    }

    /**
     * Gets payerBankCorrAccount
     *
     * @return string
     */
    public function getPayerBankCorrAccount()
    {
        return $this->container['payerBankCorrAccount'];
    }

    /**
     * Sets payerBankCorrAccount
     *
     * @param string $payerBankCorrAccount Корсчёт банка плательщика
     *
     * @return $this
     */
    public function setPayerBankCorrAccount($payerBankCorrAccount)
    {
        $this->container['payerBankCorrAccount'] = $payerBankCorrAccount;

        return $this;
    }

    /**
     * Gets payerBankName
     *
     * @return string
     */
    public function getPayerBankName()
    {
        return $this->container['payerBankName'];
    }

    /**
     * Sets payerBankName
     *
     * @param string $payerBankName Наименование банка плательщика
     *
     * @return $this
     */
    public function setPayerBankName($payerBankName)
    {
        $this->container['payerBankName'] = $payerBankName;

        return $this;
    }

    /**
     * Gets payerInn
     *
     * @return string
     */
    public function getPayerInn()
    {
        return $this->container['payerInn'];
    }

    /**
     * Sets payerInn
     *
     * @param string $payerInn ИНН плательщика
     *
     * @return $this
     */
    public function setPayerInn($payerInn)
    {
        $this->container['payerInn'] = $payerInn;

        return $this;
    }

    /**
     * Gets payerKpp
     *
     * @return string
     */
    public function getPayerKpp()
    {
        return $this->container['payerKpp'];
    }

    /**
     * Sets payerKpp
     *
     * @param string $payerKpp КПП плательщика
     *
     * @return $this
     */
    public function setPayerKpp($payerKpp)
    {
        $this->container['payerKpp'] = $payerKpp;

        return $this;
    }

    /**
     * Gets payerName
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payerName'];
    }

    /**
     * Sets payerName
     *
     * @param string $payerName Наименование плательщика
     *
     * @return $this
     */
    public function setPayerName($payerName)
    {
        $this->container['payerName'] = $payerName;

        return $this;
    }

    /**
     * Gets payingCondition
     *
     * @return string
     */
    public function getPayingCondition()
    {
        return $this->container['payingCondition'];
    }

    /**
     * Sets payingCondition
     *
     * @param string $payingCondition Условие оплаты (для 02)
     *
     * @return $this
     */
    public function setPayingCondition($payingCondition)
    {
        $this->container['payingCondition'] = $payingCondition;

        return $this;
    }

    /**
     * Gets receiptDate
     *
     * @return \DateTime
     */
    public function getReceiptDate()
    {
        return $this->container['receiptDate'];
    }

    /**
     * Sets receiptDate
     *
     * @param \DateTime $receiptDate Дата поступления в банк плательщика
     *
     * @return $this
     */
    public function setReceiptDate($receiptDate)
    {
        $this->container['receiptDate'] = $receiptDate;

        return $this;
    }

    /**
     * Gets valueDate
     *
     * @return \DateTime
     */
    public function getValueDate()
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate
     *
     * @param \DateTime $valueDate Дата валютирования
     *
     * @return $this
     */
    public function setValueDate($valueDate)
    {
        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
