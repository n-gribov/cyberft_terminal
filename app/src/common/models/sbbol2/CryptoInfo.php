<?php
/**
 * CryptoInfo
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * CryptoInfo Class Doc Comment
 *
 * @category Class
 * @description Информация о КУЦ и криптопрофилях
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class CryptoInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CryptoInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'certBank' => 'string',
        'certBankUuid' => 'string',
        'certCenterCode' => 'string',
        'certsCA' => 'string[]',
        'cryptoProfileInfos' => '\common\models\sbbol2\CryptoProfileInfo[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'certBank' => null,
        'certBankUuid' => null,
        'certCenterCode' => null,
        'certsCA' => null,
        'cryptoProfileInfos' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certBank' => 'certBank',
        'certBankUuid' => 'certBankUuid',
        'certCenterCode' => 'certCenterCode',
        'certsCA' => 'certsCA',
        'cryptoProfileInfos' => 'cryptoProfileInfos',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certBank' => 'setCertBank',
        'certBankUuid' => 'setCertBankUuid',
        'certCenterCode' => 'setCertCenterCode',
        'certsCA' => 'setCertsCA',
        'cryptoProfileInfos' => 'setCryptoProfileInfos',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certBank' => 'getCertBank',
        'certBankUuid' => 'getCertBankUuid',
        'certCenterCode' => 'getCertCenterCode',
        'certsCA' => 'getCertsCA',
        'cryptoProfileInfos' => 'getCryptoProfileInfos',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certBank'] = isset($data['certBank']) ? $data['certBank'] : null;
        $this->container['certBankUuid'] = isset($data['certBankUuid']) ? $data['certBankUuid'] : null;
        $this->container['certCenterCode'] = isset($data['certCenterCode']) ? $data['certCenterCode'] : null;
        $this->container['certsCA'] = isset($data['certsCA']) ? $data['certsCA'] : null;
        $this->container['cryptoProfileInfos'] = isset($data['cryptoProfileInfos']) ? $data['cryptoProfileInfos'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets certBank
     *
     * @return string
     */
    public function getCertBank()
    {
        return $this->container['certBank'];
    }

    /**
     * Sets certBank
     *
     * @param string $certBank Сертификат технологического криптопрофиля банка
     *
     * @return $this
     */
    public function setCertBank($certBank)
    {
        $this->container['certBank'] = $certBank;

        return $this;
    }

    /**
     * Gets certBankUuid
     *
     * @return string
     */
    public function getCertBankUuid()
    {
        return $this->container['certBankUuid'];
    }

    /**
     * Sets certBankUuid
     *
     * @param string $certBankUuid Уникальный идентификатор сертификата технологического криптопрофиля Банка
     *
     * @return $this
     */
    public function setCertBankUuid($certBankUuid)
    {
        $this->container['certBankUuid'] = $certBankUuid;

        return $this;
    }

    /**
     * Gets certCenterCode
     *
     * @return string
     */
    public function getCertCenterCode()
    {
        return $this->container['certCenterCode'];
    }

    /**
     * Sets certCenterCode
     *
     * @param string $certCenterCode Код удостоверяющего центра
     *
     * @return $this
     */
    public function setCertCenterCode($certCenterCode)
    {
        $this->container['certCenterCode'] = $certCenterCode;

        return $this;
    }

    /**
     * Gets certsCA
     *
     * @return string[]
     */
    public function getCertsCA()
    {
        return $this->container['certsCA'];
    }

    /**
     * Sets certsCA
     *
     * @param string[] $certsCA Сертификаты удостоверяющих центров
     *
     * @return $this
     */
    public function setCertsCA($certsCA)
    {
        $this->container['certsCA'] = $certsCA;

        return $this;
    }

    /**
     * Gets cryptoProfileInfos
     *
     * @return \common\models\sbbol2\CryptoProfileInfo[]
     */
    public function getCryptoProfileInfos()
    {
        return $this->container['cryptoProfileInfos'];
    }

    /**
     * Sets cryptoProfileInfos
     *
     * @param \common\models\sbbol2\CryptoProfileInfo[] $cryptoProfileInfos Идентификаторы криптопрофилей
     *
     * @return $this
     */
    public function setCryptoProfileInfos($cryptoProfileInfos)
    {
        $this->container['cryptoProfileInfos'] = $cryptoProfileInfos;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
