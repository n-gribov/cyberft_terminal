<?php
/**
 * ClientInfo
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * ClientInfo Class Doc Comment
 *
 * @category Class
 * @description Информация о клиенте
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ClientInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ClientInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'accounts' => '\common\models\sbbol2\Account[]',
        'addresses' => '\common\models\sbbol2\Address[]',
        'dboContracts' => '\common\models\sbbol2\DboContract[]',
        'fullName' => 'string',
        'inn' => 'string',
        'kpps' => 'string[]',
        'ogrn' => 'string',
        'okato' => 'string',
        'okpo' => 'string',
        'orgForm' => 'string',
        'resident' => 'bool',
        'shortName' => 'string',
        'territorialBank' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'accounts' => null,
        'addresses' => null,
        'dboContracts' => null,
        'fullName' => null,
        'inn' => null,
        'kpps' => null,
        'ogrn' => null,
        'okato' => null,
        'okpo' => null,
        'orgForm' => null,
        'resident' => null,
        'shortName' => null,
        'territorialBank' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'addresses' => 'addresses',
        'dboContracts' => 'dboContracts',
        'fullName' => 'fullName',
        'inn' => 'inn',
        'kpps' => 'kpps',
        'ogrn' => 'ogrn',
        'okato' => 'okato',
        'okpo' => 'okpo',
        'orgForm' => 'orgForm',
        'resident' => 'resident',
        'shortName' => 'shortName',
        'territorialBank' => 'territorialBank',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'addresses' => 'setAddresses',
        'dboContracts' => 'setDboContracts',
        'fullName' => 'setFullName',
        'inn' => 'setInn',
        'kpps' => 'setKpps',
        'ogrn' => 'setOgrn',
        'okato' => 'setOkato',
        'okpo' => 'setOkpo',
        'orgForm' => 'setOrgForm',
        'resident' => 'setResident',
        'shortName' => 'setShortName',
        'territorialBank' => 'setTerritorialBank',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'addresses' => 'getAddresses',
        'dboContracts' => 'getDboContracts',
        'fullName' => 'getFullName',
        'inn' => 'getInn',
        'kpps' => 'getKpps',
        'ogrn' => 'getOgrn',
        'okato' => 'getOkato',
        'okpo' => 'getOkpo',
        'orgForm' => 'getOrgForm',
        'resident' => 'getResident',
        'shortName' => 'getShortName',
        'territorialBank' => 'getTerritorialBank',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['dboContracts'] = isset($data['dboContracts']) ? $data['dboContracts'] : null;
        $this->container['fullName'] = isset($data['fullName']) ? $data['fullName'] : null;
        $this->container['inn'] = isset($data['inn']) ? $data['inn'] : null;
        $this->container['kpps'] = isset($data['kpps']) ? $data['kpps'] : null;
        $this->container['ogrn'] = isset($data['ogrn']) ? $data['ogrn'] : null;
        $this->container['okato'] = isset($data['okato']) ? $data['okato'] : null;
        $this->container['okpo'] = isset($data['okpo']) ? $data['okpo'] : null;
        $this->container['orgForm'] = isset($data['orgForm']) ? $data['orgForm'] : null;
        $this->container['resident'] = isset($data['resident']) ? $data['resident'] : null;
        $this->container['shortName'] = isset($data['shortName']) ? $data['shortName'] : null;
        $this->container['territorialBank'] = isset($data['territorialBank']) ? $data['territorialBank'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets accounts
     *
     * @return \common\models\sbbol2\Account[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \common\models\sbbol2\Account[] $accounts Счета организации клиента, доступные партнёру
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \common\models\sbbol2\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \common\models\sbbol2\Address[] $addresses Адреса (все заведённые для клиента)
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets dboContracts
     *
     * @return \common\models\sbbol2\DboContract[]
     */
    public function getDboContracts()
    {
        return $this->container['dboContracts'];
    }

    /**
     * Sets dboContracts
     *
     * @param \common\models\sbbol2\DboContract[] $dboContracts Договоры обслуживания организации
     *
     * @return $this
     */
    public function setDboContracts($dboContracts)
    {
        $this->container['dboContracts'] = $dboContracts;

        return $this;
    }

    /**
     * Gets fullName
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['fullName'];
    }

    /**
     * Sets fullName
     *
     * @param string $fullName Полное наименование организации
     *
     * @return $this
     */
    public function setFullName($fullName)
    {
        $this->container['fullName'] = $fullName;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string $inn ИНН / КИО
     *
     * @return $this
     */
    public function setInn($inn)
    {
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets kpps
     *
     * @return string[]
     */
    public function getKpps()
    {
        return $this->container['kpps'];
    }

    /**
     * Sets kpps
     *
     * @param string[] $kpps КПП (все заведенные для организации клиента)
     *
     * @return $this
     */
    public function setKpps($kpps)
    {
        $this->container['kpps'] = $kpps;

        return $this;
    }

    /**
     * Gets ogrn
     *
     * @return string
     */
    public function getOgrn()
    {
        return $this->container['ogrn'];
    }

    /**
     * Sets ogrn
     *
     * @param string $ogrn ОГРН
     *
     * @return $this
     */
    public function setOgrn($ogrn)
    {
        $this->container['ogrn'] = $ogrn;

        return $this;
    }

    /**
     * Gets okato
     *
     * @return string
     */
    public function getOkato()
    {
        return $this->container['okato'];
    }

    /**
     * Sets okato
     *
     * @param string $okato ОКАТО
     *
     * @return $this
     */
    public function setOkato($okato)
    {
        $this->container['okato'] = $okato;

        return $this;
    }

    /**
     * Gets okpo
     *
     * @return string
     */
    public function getOkpo()
    {
        return $this->container['okpo'];
    }

    /**
     * Sets okpo
     *
     * @param string $okpo ОКПО
     *
     * @return $this
     */
    public function setOkpo($okpo)
    {
        $this->container['okpo'] = $okpo;

        return $this;
    }

    /**
     * Gets orgForm
     *
     * @return string
     */
    public function getOrgForm()
    {
        return $this->container['orgForm'];
    }

    /**
     * Sets orgForm
     *
     * @param string $orgForm Организационно-правовая форма организации клиента
     *
     * @return $this
     */
    public function setOrgForm($orgForm)
    {
        $this->container['orgForm'] = $orgForm;

        return $this;
    }

    /**
     * Gets resident
     *
     * @return bool
     */
    public function getResident()
    {
        return $this->container['resident'];
    }

    /**
     * Sets resident
     *
     * @param bool $resident Признак 'резидент / нерезидент'
     *
     * @return $this
     */
    public function setResident($resident)
    {
        $this->container['resident'] = $resident;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string $shortName Сокращённое наименование организации
     *
     * @return $this
     */
    public function setShortName($shortName)
    {
        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets territorialBank
     *
     * @return string
     */
    public function getTerritorialBank()
    {
        return $this->container['territorialBank'];
    }

    /**
     * Sets territorialBank
     *
     * @param string $territorialBank Территориальный банк клиента
     *
     * @return $this
     */
    public function setTerritorialBank($territorialBank)
    {
        $this->container['territorialBank'] = $territorialBank;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
