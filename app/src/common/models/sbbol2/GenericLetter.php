<?php
/**
 * GenericLetter
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * GenericLetter Class Doc Comment
 *
 * @category Class
 * @description Письма свободного формата
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class GenericLetter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'GenericLetter';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'bankComment' => 'string',
        'bankStatus' => 'string',
        'bfAttachments' => '\common\models\sbbol2\BfAttachment[]',
        'crmId' => 'string',
        'crmNumber' => 'string',
        'date' => '\DateTime',
        'digestSignatures' => '\common\models\sbbol2\Signature[]',
        'externalId' => 'string',
        'number' => 'string',
        'text' => 'string',
        'typeCode' => 'string',
        'typeName' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'bankComment' => null,
        'bankStatus' => null,
        'bfAttachments' => null,
        'crmId' => null,
        'crmNumber' => null,
        'date' => 'date-time',
        'digestSignatures' => null,
        'externalId' => null,
        'number' => null,
        'text' => null,
        'typeCode' => null,
        'typeName' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankComment' => 'bankComment',
        'bankStatus' => 'bankStatus',
        'bfAttachments' => 'bfAttachments',
        'crmId' => 'crmId',
        'crmNumber' => 'crmNumber',
        'date' => 'date',
        'digestSignatures' => 'digestSignatures',
        'externalId' => 'externalId',
        'number' => 'number',
        'text' => 'text',
        'typeCode' => 'typeCode',
        'typeName' => 'typeName',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankComment' => 'setBankComment',
        'bankStatus' => 'setBankStatus',
        'bfAttachments' => 'setBfAttachments',
        'crmId' => 'setCrmId',
        'crmNumber' => 'setCrmNumber',
        'date' => 'setDate',
        'digestSignatures' => 'setDigestSignatures',
        'externalId' => 'setExternalId',
        'number' => 'setNumber',
        'text' => 'setText',
        'typeCode' => 'setTypeCode',
        'typeName' => 'setTypeName',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankComment' => 'getBankComment',
        'bankStatus' => 'getBankStatus',
        'bfAttachments' => 'getBfAttachments',
        'crmId' => 'getCrmId',
        'crmNumber' => 'getCrmNumber',
        'date' => 'getDate',
        'digestSignatures' => 'getDigestSignatures',
        'externalId' => 'getExternalId',
        'number' => 'getNumber',
        'text' => 'getText',
        'typeCode' => 'getTypeCode',
        'typeName' => 'getTypeName',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bankComment'] = isset($data['bankComment']) ? $data['bankComment'] : null;
        $this->container['bankStatus'] = isset($data['bankStatus']) ? $data['bankStatus'] : null;
        $this->container['bfAttachments'] = isset($data['bfAttachments']) ? $data['bfAttachments'] : null;
        $this->container['crmId'] = isset($data['crmId']) ? $data['crmId'] : null;
        $this->container['crmNumber'] = isset($data['crmNumber']) ? $data['crmNumber'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['digestSignatures'] = isset($data['digestSignatures']) ? $data['digestSignatures'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['typeCode'] = isset($data['typeCode']) ? $data['typeCode'] : null;
        $this->container['typeName'] = isset($data['typeName']) ? $data['typeName'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bfAttachments'] === null) {
            $invalidProperties[] = "'bfAttachments' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['typeCode'] === null) {
            $invalidProperties[] = "'typeCode' can't be null";
        }
        if ($this->container['typeName'] === null) {
            $invalidProperties[] = "'typeName' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets bankComment
     *
     * @return string
     */
    public function getBankComment()
    {
        return $this->container['bankComment'];
    }

    /**
     * Sets bankComment
     *
     * @param string $bankComment Банковский комментарий к статусу документа
     *
     * @return $this
     */
    public function setBankComment($bankComment)
    {
        $this->container['bankComment'] = $bankComment;

        return $this;
    }

    /**
     * Gets bankStatus
     *
     * @return string
     */
    public function getBankStatus()
    {
        return $this->container['bankStatus'];
    }

    /**
     * Sets bankStatus
     *
     * @param string $bankStatus Статус документа
     *
     * @return $this
     */
    public function setBankStatus($bankStatus)
    {
        $this->container['bankStatus'] = $bankStatus;

        return $this;
    }

    /**
     * Gets bfAttachments
     *
     * @return \common\models\sbbol2\BfAttachment[]
     */
    public function getBfAttachments()
    {
        return $this->container['bfAttachments'];
    }

    /**
     * Sets bfAttachments
     *
     * @param \common\models\sbbol2\BfAttachment[] $bfAttachments Идентификатор (-ы) больших файлов
     *
     * @return $this
     */
    public function setBfAttachments($bfAttachments)
    {
        $this->container['bfAttachments'] = $bfAttachments;

        return $this;
    }

    /**
     * Gets crmId
     *
     * @return string
     */
    public function getCrmId()
    {
        return $this->container['crmId'];
    }

    /**
     * Sets crmId
     *
     * @param string $crmId Идентификатор ПСФ в CRM
     *
     * @return $this
     */
    public function setCrmId($crmId)
    {
        $this->container['crmId'] = $crmId;

        return $this;
    }

    /**
     * Gets crmNumber
     *
     * @return string
     */
    public function getCrmNumber()
    {
        return $this->container['crmNumber'];
    }

    /**
     * Sets crmNumber
     *
     * @param string $crmNumber Номер ПСФ в CRM
     *
     * @return $this
     */
    public function setCrmNumber($crmNumber)
    {
        $this->container['crmNumber'] = $crmNumber;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата составления документа
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets digestSignatures
     *
     * @return \common\models\sbbol2\Signature[]
     */
    public function getDigestSignatures()
    {
        return $this->container['digestSignatures'];
    }

    /**
     * Sets digestSignatures
     *
     * @param \common\models\sbbol2\Signature[] $digestSignatures Электронные подписи по дайджесту документа
     *
     * @return $this
     */
    public function setDigestSignatures($digestSignatures)
    {
        $this->container['digestSignatures'] = $digestSignatures;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Идентификатор документа, присвоенный партнёром (UUID)
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер документа
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Текст сообщения
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets typeCode
     *
     * @return string
     */
    public function getTypeCode()
    {
        return $this->container['typeCode'];
    }

    /**
     * Sets typeCode
     *
     * @param string $typeCode Тип
     *
     * @return $this
     */
    public function setTypeCode($typeCode)
    {
        $this->container['typeCode'] = $typeCode;

        return $this;
    }

    /**
     * Gets typeName
     *
     * @return string
     */
    public function getTypeName()
    {
        return $this->container['typeName'];
    }

    /**
     * Sets typeName
     *
     * @param string $typeName Системное имя типа ПСФ
     *
     * @return $this
     */
    public function setTypeName($typeName)
    {
        $this->container['typeName'] = $typeName;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
