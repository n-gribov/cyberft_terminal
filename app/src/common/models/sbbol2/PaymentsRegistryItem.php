<?php
/**
 * PaymentsRegistryItem
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * PaymentsRegistryItem Class Doc Comment
 *
 * @category Class
 * @description Реестр платежей
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsRegistryItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PaymentsRegistryItem';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'amount' => 'float',
        'amountBring' => 'float',
        'dateBegin' => '\DateTime',
        'dateEnd' => '\DateTime',
        'dateLoad' => '\DateTime',
        'registryName' => 'string',
        'uploadedRecords' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'amount' => null,
        'amountBring' => null,
        'dateBegin' => 'date-time',
        'dateEnd' => 'date-time',
        'dateLoad' => 'date-time',
        'registryName' => null,
        'uploadedRecords' => 'int32',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'amountBring' => 'amountBring',
        'dateBegin' => 'dateBegin',
        'dateEnd' => 'dateEnd',
        'dateLoad' => 'dateLoad',
        'registryName' => 'registryName',
        'uploadedRecords' => 'uploadedRecords',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'amountBring' => 'setAmountBring',
        'dateBegin' => 'setDateBegin',
        'dateEnd' => 'setDateEnd',
        'dateLoad' => 'setDateLoad',
        'registryName' => 'setRegistryName',
        'uploadedRecords' => 'setUploadedRecords',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'amountBring' => 'getAmountBring',
        'dateBegin' => 'getDateBegin',
        'dateEnd' => 'getDateEnd',
        'dateLoad' => 'getDateLoad',
        'registryName' => 'getRegistryName',
        'uploadedRecords' => 'getUploadedRecords',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amountBring'] = isset($data['amountBring']) ? $data['amountBring'] : null;
        $this->container['dateBegin'] = isset($data['dateBegin']) ? $data['dateBegin'] : null;
        $this->container['dateEnd'] = isset($data['dateEnd']) ? $data['dateEnd'] : null;
        $this->container['dateLoad'] = isset($data['dateLoad']) ? $data['dateLoad'] : null;
        $this->container['registryName'] = isset($data['registryName']) ? $data['registryName'] : null;
        $this->container['uploadedRecords'] = isset($data['uploadedRecords']) ? $data['uploadedRecords'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Сумма
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amountBring
     *
     * @return float
     */
    public function getAmountBring()
    {
        return $this->container['amountBring'];
    }

    /**
     * Sets amountBring
     *
     * @param float $amountBring Сумма с комиссией
     *
     * @return $this
     */
    public function setAmountBring($amountBring)
    {
        $this->container['amountBring'] = $amountBring;

        return $this;
    }

    /**
     * Gets dateBegin
     *
     * @return \DateTime
     */
    public function getDateBegin()
    {
        return $this->container['dateBegin'];
    }

    /**
     * Sets dateBegin
     *
     * @param \DateTime $dateBegin Дата начала периода
     *
     * @return $this
     */
    public function setDateBegin($dateBegin)
    {
        $this->container['dateBegin'] = $dateBegin;

        return $this;
    }

    /**
     * Gets dateEnd
     *
     * @return \DateTime
     */
    public function getDateEnd()
    {
        return $this->container['dateEnd'];
    }

    /**
     * Sets dateEnd
     *
     * @param \DateTime $dateEnd Дата окончания периода
     *
     * @return $this
     */
    public function setDateEnd($dateEnd)
    {
        $this->container['dateEnd'] = $dateEnd;

        return $this;
    }

    /**
     * Gets dateLoad
     *
     * @return \DateTime
     */
    public function getDateLoad()
    {
        return $this->container['dateLoad'];
    }

    /**
     * Sets dateLoad
     *
     * @param \DateTime $dateLoad Дата выгрузки реестра
     *
     * @return $this
     */
    public function setDateLoad($dateLoad)
    {
        $this->container['dateLoad'] = $dateLoad;

        return $this;
    }

    /**
     * Gets registryName
     *
     * @return string
     */
    public function getRegistryName()
    {
        return $this->container['registryName'];
    }

    /**
     * Sets registryName
     *
     * @param string $registryName Наименование реестра
     *
     * @return $this
     */
    public function setRegistryName($registryName)
    {
        $this->container['registryName'] = $registryName;

        return $this;
    }

    /**
     * Gets uploadedRecords
     *
     * @return int
     */
    public function getUploadedRecords()
    {
        return $this->container['uploadedRecords'];
    }

    /**
     * Sets uploadedRecords
     *
     * @param int $uploadedRecords Количество платежей
     *
     * @return $this
     */
    public function setUploadedRecords($uploadedRecords)
    {
        $this->container['uploadedRecords'] = $uploadedRecords;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
