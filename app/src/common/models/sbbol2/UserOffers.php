<?php
/**
 * UserOffers
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * UserOffers Class Doc Comment
 *
 * @category Class
 * @description Информация по офертам клиентов организации
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class UserOffers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'UserOffers';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'accountList' => 'string[]',
        'sinceDate' => '\DateTime',
        'status' => 'string',
        'sub' => 'string',
        'untilDate' => '\DateTime',
        'userName' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'accountList' => null,
        'sinceDate' => 'date-time',
        'status' => null,
        'sub' => null,
        'untilDate' => 'date-time',
        'userName' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountList' => 'accountList',
        'sinceDate' => 'sinceDate',
        'status' => 'status',
        'sub' => 'sub',
        'untilDate' => 'untilDate',
        'userName' => 'userName',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountList' => 'setAccountList',
        'sinceDate' => 'setSinceDate',
        'status' => 'setStatus',
        'sub' => 'setSub',
        'untilDate' => 'setUntilDate',
        'userName' => 'setUserName',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountList' => 'getAccountList',
        'sinceDate' => 'getSinceDate',
        'status' => 'getStatus',
        'sub' => 'getSub',
        'untilDate' => 'getUntilDate',
        'userName' => 'getUserName',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountList'] = isset($data['accountList']) ? $data['accountList'] : null;
        $this->container['sinceDate'] = isset($data['sinceDate']) ? $data['sinceDate'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub'] = isset($data['sub']) ? $data['sub'] : null;
        $this->container['untilDate'] = isset($data['untilDate']) ? $data['untilDate'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets accountList
     *
     * @return string[]
     */
    public function getAccountList()
    {
        return $this->container['accountList'];
    }

    /**
     * Sets accountList
     *
     * @param string[] $accountList Список счетов
     *
     * @return $this
     */
    public function setAccountList($accountList)
    {
        $this->container['accountList'] = $accountList;

        return $this;
    }

    /**
     * Gets sinceDate
     *
     * @return \DateTime
     */
    public function getSinceDate()
    {
        return $this->container['sinceDate'];
    }

    /**
     * Sets sinceDate
     *
     * @param \DateTime $sinceDate Дата начала действия оферты
     *
     * @return $this
     */
    public function setSinceDate($sinceDate)
    {
        $this->container['sinceDate'] = $sinceDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Статус оферты
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub
     *
     * @return string
     */
    public function getSub()
    {
        return $this->container['sub'];
    }

    /**
     * Sets sub
     *
     * @param string $sub Хэш идентификатора пользователя
     *
     * @return $this
     */
    public function setSub($sub)
    {
        $this->container['sub'] = $sub;

        return $this;
    }

    /**
     * Gets untilDate
     *
     * @return \DateTime
     */
    public function getUntilDate()
    {
        return $this->container['untilDate'];
    }

    /**
     * Sets untilDate
     *
     * @param \DateTime $untilDate Дата завершения действия оферты
     *
     * @return $this
     */
    public function setUntilDate($untilDate)
    {
        $this->container['untilDate'] = $untilDate;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string $userName Наименование пользователя
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
