<?php
/**
 * SWIFTTransfer
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * SWIFTTransfer Class Doc Comment
 *
 * @category Class
 * @description Данные перевода SWIFT MT103
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SWIFTTransfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'SWIFTTransfer';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'bankOperationCode' => 'string',
        'beneficiaryBankAccount' => 'string',
        'beneficiaryBankName' => 'string',
        'beneficiaryBankOption' => 'string',
        'beneficiaryCustomerAccount' => 'string',
        'beneficiaryCustomerName' => 'string',
        'detailsOfCharges' => 'string',
        'exchangeRate' => 'string',
        'instructedAmount' => 'string',
        'instructionCode' => 'string',
        'intermediaryBankAccount' => 'string',
        'intermediaryBankName' => 'string',
        'intermediaryBankOption' => 'string',
        'messageDestinator' => 'string',
        'messageIdentifier' => 'string',
        'messageOriginator' => 'string',
        'messageReceiveTime' => 'string',
        'messageSendTime' => 'string',
        'messageType' => 'string',
        'orderingCustomerAccount' => 'string',
        'orderingCustomerName' => 'string',
        'orderingCustomerOption' => 'string',
        'orderingInstitutionAccount' => 'string',
        'orderingInstitutionName' => 'string',
        'orderingInstitutionOption' => 'string',
        'receiverCharges' => 'string',
        'receiverCorrespondentAccount' => 'string',
        'receiverCorrespondentName' => 'string',
        'receiverCorrespondentOption' => 'string',
        'regulatoryReporting' => 'string',
        'remittanceInformation' => 'string',
        'senderCharges' => 'string',
        'senderCorrespondentAccount' => 'string',
        'senderCorrespondentName' => 'string',
        'senderCorrespondentOption' => 'string',
        'senderToReceiverInformation' => 'string',
        'transactionReferenceNumber' => 'string',
        'transactionRelatedReference' => 'string',
        'transactionTypeCode' => 'string',
        'urgent' => 'string',
        'valueDateCurrencyInterbankSettledAmount' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'bankOperationCode' => null,
        'beneficiaryBankAccount' => null,
        'beneficiaryBankName' => null,
        'beneficiaryBankOption' => null,
        'beneficiaryCustomerAccount' => null,
        'beneficiaryCustomerName' => null,
        'detailsOfCharges' => null,
        'exchangeRate' => null,
        'instructedAmount' => null,
        'instructionCode' => null,
        'intermediaryBankAccount' => null,
        'intermediaryBankName' => null,
        'intermediaryBankOption' => null,
        'messageDestinator' => null,
        'messageIdentifier' => null,
        'messageOriginator' => null,
        'messageReceiveTime' => null,
        'messageSendTime' => null,
        'messageType' => null,
        'orderingCustomerAccount' => null,
        'orderingCustomerName' => null,
        'orderingCustomerOption' => null,
        'orderingInstitutionAccount' => null,
        'orderingInstitutionName' => null,
        'orderingInstitutionOption' => null,
        'receiverCharges' => null,
        'receiverCorrespondentAccount' => null,
        'receiverCorrespondentName' => null,
        'receiverCorrespondentOption' => null,
        'regulatoryReporting' => null,
        'remittanceInformation' => null,
        'senderCharges' => null,
        'senderCorrespondentAccount' => null,
        'senderCorrespondentName' => null,
        'senderCorrespondentOption' => null,
        'senderToReceiverInformation' => null,
        'transactionReferenceNumber' => null,
        'transactionRelatedReference' => null,
        'transactionTypeCode' => null,
        'urgent' => null,
        'valueDateCurrencyInterbankSettledAmount' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankOperationCode' => 'bankOperationCode',
        'beneficiaryBankAccount' => 'beneficiaryBankAccount',
        'beneficiaryBankName' => 'beneficiaryBankName',
        'beneficiaryBankOption' => 'beneficiaryBankOption',
        'beneficiaryCustomerAccount' => 'beneficiaryCustomerAccount',
        'beneficiaryCustomerName' => 'beneficiaryCustomerName',
        'detailsOfCharges' => 'detailsOfCharges',
        'exchangeRate' => 'exchangeRate',
        'instructedAmount' => 'instructedAmount',
        'instructionCode' => 'instructionCode',
        'intermediaryBankAccount' => 'intermediaryBankAccount',
        'intermediaryBankName' => 'intermediaryBankName',
        'intermediaryBankOption' => 'intermediaryBankOption',
        'messageDestinator' => 'messageDestinator',
        'messageIdentifier' => 'messageIdentifier',
        'messageOriginator' => 'messageOriginator',
        'messageReceiveTime' => 'messageReceiveTime',
        'messageSendTime' => 'messageSendTime',
        'messageType' => 'messageType',
        'orderingCustomerAccount' => 'orderingCustomerAccount',
        'orderingCustomerName' => 'orderingCustomerName',
        'orderingCustomerOption' => 'orderingCustomerOption',
        'orderingInstitutionAccount' => 'orderingInstitutionAccount',
        'orderingInstitutionName' => 'orderingInstitutionName',
        'orderingInstitutionOption' => 'orderingInstitutionOption',
        'receiverCharges' => 'receiverCharges',
        'receiverCorrespondentAccount' => 'receiverCorrespondentAccount',
        'receiverCorrespondentName' => 'receiverCorrespondentName',
        'receiverCorrespondentOption' => 'receiverCorrespondentOption',
        'regulatoryReporting' => 'regulatoryReporting',
        'remittanceInformation' => 'remittanceInformation',
        'senderCharges' => 'senderCharges',
        'senderCorrespondentAccount' => 'senderCorrespondentAccount',
        'senderCorrespondentName' => 'senderCorrespondentName',
        'senderCorrespondentOption' => 'senderCorrespondentOption',
        'senderToReceiverInformation' => 'senderToReceiverInformation',
        'transactionReferenceNumber' => 'transactionReferenceNumber',
        'transactionRelatedReference' => 'transactionRelatedReference',
        'transactionTypeCode' => 'transactionTypeCode',
        'urgent' => 'urgent',
        'valueDateCurrencyInterbankSettledAmount' => 'valueDateCurrencyInterbankSettledAmount',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankOperationCode' => 'setBankOperationCode',
        'beneficiaryBankAccount' => 'setBeneficiaryBankAccount',
        'beneficiaryBankName' => 'setBeneficiaryBankName',
        'beneficiaryBankOption' => 'setBeneficiaryBankOption',
        'beneficiaryCustomerAccount' => 'setBeneficiaryCustomerAccount',
        'beneficiaryCustomerName' => 'setBeneficiaryCustomerName',
        'detailsOfCharges' => 'setDetailsOfCharges',
        'exchangeRate' => 'setExchangeRate',
        'instructedAmount' => 'setInstructedAmount',
        'instructionCode' => 'setInstructionCode',
        'intermediaryBankAccount' => 'setIntermediaryBankAccount',
        'intermediaryBankName' => 'setIntermediaryBankName',
        'intermediaryBankOption' => 'setIntermediaryBankOption',
        'messageDestinator' => 'setMessageDestinator',
        'messageIdentifier' => 'setMessageIdentifier',
        'messageOriginator' => 'setMessageOriginator',
        'messageReceiveTime' => 'setMessageReceiveTime',
        'messageSendTime' => 'setMessageSendTime',
        'messageType' => 'setMessageType',
        'orderingCustomerAccount' => 'setOrderingCustomerAccount',
        'orderingCustomerName' => 'setOrderingCustomerName',
        'orderingCustomerOption' => 'setOrderingCustomerOption',
        'orderingInstitutionAccount' => 'setOrderingInstitutionAccount',
        'orderingInstitutionName' => 'setOrderingInstitutionName',
        'orderingInstitutionOption' => 'setOrderingInstitutionOption',
        'receiverCharges' => 'setReceiverCharges',
        'receiverCorrespondentAccount' => 'setReceiverCorrespondentAccount',
        'receiverCorrespondentName' => 'setReceiverCorrespondentName',
        'receiverCorrespondentOption' => 'setReceiverCorrespondentOption',
        'regulatoryReporting' => 'setRegulatoryReporting',
        'remittanceInformation' => 'setRemittanceInformation',
        'senderCharges' => 'setSenderCharges',
        'senderCorrespondentAccount' => 'setSenderCorrespondentAccount',
        'senderCorrespondentName' => 'setSenderCorrespondentName',
        'senderCorrespondentOption' => 'setSenderCorrespondentOption',
        'senderToReceiverInformation' => 'setSenderToReceiverInformation',
        'transactionReferenceNumber' => 'setTransactionReferenceNumber',
        'transactionRelatedReference' => 'setTransactionRelatedReference',
        'transactionTypeCode' => 'setTransactionTypeCode',
        'urgent' => 'setUrgent',
        'valueDateCurrencyInterbankSettledAmount' => 'setValueDateCurrencyInterbankSettledAmount',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankOperationCode' => 'getBankOperationCode',
        'beneficiaryBankAccount' => 'getBeneficiaryBankAccount',
        'beneficiaryBankName' => 'getBeneficiaryBankName',
        'beneficiaryBankOption' => 'getBeneficiaryBankOption',
        'beneficiaryCustomerAccount' => 'getBeneficiaryCustomerAccount',
        'beneficiaryCustomerName' => 'getBeneficiaryCustomerName',
        'detailsOfCharges' => 'getDetailsOfCharges',
        'exchangeRate' => 'getExchangeRate',
        'instructedAmount' => 'getInstructedAmount',
        'instructionCode' => 'getInstructionCode',
        'intermediaryBankAccount' => 'getIntermediaryBankAccount',
        'intermediaryBankName' => 'getIntermediaryBankName',
        'intermediaryBankOption' => 'getIntermediaryBankOption',
        'messageDestinator' => 'getMessageDestinator',
        'messageIdentifier' => 'getMessageIdentifier',
        'messageOriginator' => 'getMessageOriginator',
        'messageReceiveTime' => 'getMessageReceiveTime',
        'messageSendTime' => 'getMessageSendTime',
        'messageType' => 'getMessageType',
        'orderingCustomerAccount' => 'getOrderingCustomerAccount',
        'orderingCustomerName' => 'getOrderingCustomerName',
        'orderingCustomerOption' => 'getOrderingCustomerOption',
        'orderingInstitutionAccount' => 'getOrderingInstitutionAccount',
        'orderingInstitutionName' => 'getOrderingInstitutionName',
        'orderingInstitutionOption' => 'getOrderingInstitutionOption',
        'receiverCharges' => 'getReceiverCharges',
        'receiverCorrespondentAccount' => 'getReceiverCorrespondentAccount',
        'receiverCorrespondentName' => 'getReceiverCorrespondentName',
        'receiverCorrespondentOption' => 'getReceiverCorrespondentOption',
        'regulatoryReporting' => 'getRegulatoryReporting',
        'remittanceInformation' => 'getRemittanceInformation',
        'senderCharges' => 'getSenderCharges',
        'senderCorrespondentAccount' => 'getSenderCorrespondentAccount',
        'senderCorrespondentName' => 'getSenderCorrespondentName',
        'senderCorrespondentOption' => 'getSenderCorrespondentOption',
        'senderToReceiverInformation' => 'getSenderToReceiverInformation',
        'transactionReferenceNumber' => 'getTransactionReferenceNumber',
        'transactionRelatedReference' => 'getTransactionRelatedReference',
        'transactionTypeCode' => 'getTransactionTypeCode',
        'urgent' => 'getUrgent',
        'valueDateCurrencyInterbankSettledAmount' => 'getValueDateCurrencyInterbankSettledAmount',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bankOperationCode'] = isset($data['bankOperationCode']) ? $data['bankOperationCode'] : null;
        $this->container['beneficiaryBankAccount'] = isset($data['beneficiaryBankAccount']) ? $data['beneficiaryBankAccount'] : null;
        $this->container['beneficiaryBankName'] = isset($data['beneficiaryBankName']) ? $data['beneficiaryBankName'] : null;
        $this->container['beneficiaryBankOption'] = isset($data['beneficiaryBankOption']) ? $data['beneficiaryBankOption'] : null;
        $this->container['beneficiaryCustomerAccount'] = isset($data['beneficiaryCustomerAccount']) ? $data['beneficiaryCustomerAccount'] : null;
        $this->container['beneficiaryCustomerName'] = isset($data['beneficiaryCustomerName']) ? $data['beneficiaryCustomerName'] : null;
        $this->container['detailsOfCharges'] = isset($data['detailsOfCharges']) ? $data['detailsOfCharges'] : null;
        $this->container['exchangeRate'] = isset($data['exchangeRate']) ? $data['exchangeRate'] : null;
        $this->container['instructedAmount'] = isset($data['instructedAmount']) ? $data['instructedAmount'] : null;
        $this->container['instructionCode'] = isset($data['instructionCode']) ? $data['instructionCode'] : null;
        $this->container['intermediaryBankAccount'] = isset($data['intermediaryBankAccount']) ? $data['intermediaryBankAccount'] : null;
        $this->container['intermediaryBankName'] = isset($data['intermediaryBankName']) ? $data['intermediaryBankName'] : null;
        $this->container['intermediaryBankOption'] = isset($data['intermediaryBankOption']) ? $data['intermediaryBankOption'] : null;
        $this->container['messageDestinator'] = isset($data['messageDestinator']) ? $data['messageDestinator'] : null;
        $this->container['messageIdentifier'] = isset($data['messageIdentifier']) ? $data['messageIdentifier'] : null;
        $this->container['messageOriginator'] = isset($data['messageOriginator']) ? $data['messageOriginator'] : null;
        $this->container['messageReceiveTime'] = isset($data['messageReceiveTime']) ? $data['messageReceiveTime'] : null;
        $this->container['messageSendTime'] = isset($data['messageSendTime']) ? $data['messageSendTime'] : null;
        $this->container['messageType'] = isset($data['messageType']) ? $data['messageType'] : null;
        $this->container['orderingCustomerAccount'] = isset($data['orderingCustomerAccount']) ? $data['orderingCustomerAccount'] : null;
        $this->container['orderingCustomerName'] = isset($data['orderingCustomerName']) ? $data['orderingCustomerName'] : null;
        $this->container['orderingCustomerOption'] = isset($data['orderingCustomerOption']) ? $data['orderingCustomerOption'] : null;
        $this->container['orderingInstitutionAccount'] = isset($data['orderingInstitutionAccount']) ? $data['orderingInstitutionAccount'] : null;
        $this->container['orderingInstitutionName'] = isset($data['orderingInstitutionName']) ? $data['orderingInstitutionName'] : null;
        $this->container['orderingInstitutionOption'] = isset($data['orderingInstitutionOption']) ? $data['orderingInstitutionOption'] : null;
        $this->container['receiverCharges'] = isset($data['receiverCharges']) ? $data['receiverCharges'] : null;
        $this->container['receiverCorrespondentAccount'] = isset($data['receiverCorrespondentAccount']) ? $data['receiverCorrespondentAccount'] : null;
        $this->container['receiverCorrespondentName'] = isset($data['receiverCorrespondentName']) ? $data['receiverCorrespondentName'] : null;
        $this->container['receiverCorrespondentOption'] = isset($data['receiverCorrespondentOption']) ? $data['receiverCorrespondentOption'] : null;
        $this->container['regulatoryReporting'] = isset($data['regulatoryReporting']) ? $data['regulatoryReporting'] : null;
        $this->container['remittanceInformation'] = isset($data['remittanceInformation']) ? $data['remittanceInformation'] : null;
        $this->container['senderCharges'] = isset($data['senderCharges']) ? $data['senderCharges'] : null;
        $this->container['senderCorrespondentAccount'] = isset($data['senderCorrespondentAccount']) ? $data['senderCorrespondentAccount'] : null;
        $this->container['senderCorrespondentName'] = isset($data['senderCorrespondentName']) ? $data['senderCorrespondentName'] : null;
        $this->container['senderCorrespondentOption'] = isset($data['senderCorrespondentOption']) ? $data['senderCorrespondentOption'] : null;
        $this->container['senderToReceiverInformation'] = isset($data['senderToReceiverInformation']) ? $data['senderToReceiverInformation'] : null;
        $this->container['transactionReferenceNumber'] = isset($data['transactionReferenceNumber']) ? $data['transactionReferenceNumber'] : null;
        $this->container['transactionRelatedReference'] = isset($data['transactionRelatedReference']) ? $data['transactionRelatedReference'] : null;
        $this->container['transactionTypeCode'] = isset($data['transactionTypeCode']) ? $data['transactionTypeCode'] : null;
        $this->container['urgent'] = isset($data['urgent']) ? $data['urgent'] : null;
        $this->container['valueDateCurrencyInterbankSettledAmount'] = isset($data['valueDateCurrencyInterbankSettledAmount']) ? $data['valueDateCurrencyInterbankSettledAmount'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets bankOperationCode
     *
     * @return string
     */
    public function getBankOperationCode()
    {
        return $this->container['bankOperationCode'];
    }

    /**
     * Sets bankOperationCode
     *
     * @param string $bankOperationCode Код банковской операции (формат MT103)
     *
     * @return $this
     */
    public function setBankOperationCode($bankOperationCode)
    {
        $this->container['bankOperationCode'] = $bankOperationCode;

        return $this;
    }

    /**
     * Gets beneficiaryBankAccount
     *
     * @return string
     */
    public function getBeneficiaryBankAccount()
    {
        return $this->container['beneficiaryBankAccount'];
    }

    /**
     * Sets beneficiaryBankAccount
     *
     * @param string $beneficiaryBankAccount Номер счета банка бенефициара. 1-я часть значения поля 57 в формате MT103
     *
     * @return $this
     */
    public function setBeneficiaryBankAccount($beneficiaryBankAccount)
    {
        $this->container['beneficiaryBankAccount'] = $beneficiaryBankAccount;

        return $this;
    }

    /**
     * Gets beneficiaryBankName
     *
     * @return string
     */
    public function getBeneficiaryBankName()
    {
        return $this->container['beneficiaryBankName'];
    }

    /**
     * Sets beneficiaryBankName
     *
     * @param string $beneficiaryBankName Код BIC, расположение или название и адрес банка бенефициара. Содержимое поля 57 (за исключением номера счета, с разделителями) в формате MT103
     *
     * @return $this
     */
    public function setBeneficiaryBankName($beneficiaryBankName)
    {
        $this->container['beneficiaryBankName'] = $beneficiaryBankName;

        return $this;
    }

    /**
     * Gets beneficiaryBankOption
     *
     * @return string
     */
    public function getBeneficiaryBankOption()
    {
        return $this->container['beneficiaryBankOption'];
    }

    /**
     * Sets beneficiaryBankOption
     *
     * @param string $beneficiaryBankOption Признак вида поля банка бенефициара (поле 57 в формате MT103). Возможные значения: A, B, С, D
     *
     * @return $this
     */
    public function setBeneficiaryBankOption($beneficiaryBankOption)
    {
        $this->container['beneficiaryBankOption'] = $beneficiaryBankOption;

        return $this;
    }

    /**
     * Gets beneficiaryCustomerAccount
     *
     * @return string
     */
    public function getBeneficiaryCustomerAccount()
    {
        return $this->container['beneficiaryCustomerAccount'];
    }

    /**
     * Sets beneficiaryCustomerAccount
     *
     * @param string $beneficiaryCustomerAccount Номер счета бенефициара. 1-я часть значения поля 59 в формате MT103
     *
     * @return $this
     */
    public function setBeneficiaryCustomerAccount($beneficiaryCustomerAccount)
    {
        $this->container['beneficiaryCustomerAccount'] = $beneficiaryCustomerAccount;

        return $this;
    }

    /**
     * Gets beneficiaryCustomerName
     *
     * @return string
     */
    public function getBeneficiaryCustomerName()
    {
        return $this->container['beneficiaryCustomerName'];
    }

    /**
     * Sets beneficiaryCustomerName
     *
     * @param string $beneficiaryCustomerName Код BIC/BEI или название и адрес бенефициара. Содержимое поля 59 (за исключением номера счета, с разделителями) в формате MT103
     *
     * @return $this
     */
    public function setBeneficiaryCustomerName($beneficiaryCustomerName)
    {
        $this->container['beneficiaryCustomerName'] = $beneficiaryCustomerName;

        return $this;
    }

    /**
     * Gets detailsOfCharges
     *
     * @return string
     */
    public function getDetailsOfCharges()
    {
        return $this->container['detailsOfCharges'];
    }

    /**
     * Sets detailsOfCharges
     *
     * @param string $detailsOfCharges Сведения о расходах (формат MT103)
     *
     * @return $this
     */
    public function setDetailsOfCharges($detailsOfCharges)
    {
        $this->container['detailsOfCharges'] = $detailsOfCharges;

        return $this;
    }

    /**
     * Gets exchangeRate
     *
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchangeRate'];
    }

    /**
     * Sets exchangeRate
     *
     * @param string $exchangeRate Курс конвертации (формат MT103)
     *
     * @return $this
     */
    public function setExchangeRate($exchangeRate)
    {
        $this->container['exchangeRate'] = $exchangeRate;

        return $this;
    }

    /**
     * Gets instructedAmount
     *
     * @return string
     */
    public function getInstructedAmount()
    {
        return $this->container['instructedAmount'];
    }

    /**
     * Sets instructedAmount
     *
     * @param string $instructedAmount Валюта/сумма по инструкции (формат MT103)
     *
     * @return $this
     */
    public function setInstructedAmount($instructedAmount)
    {
        $this->container['instructedAmount'] = $instructedAmount;

        return $this;
    }

    /**
     * Gets instructionCode
     *
     * @return string
     */
    public function getInstructionCode()
    {
        return $this->container['instructionCode'];
    }

    /**
     * Sets instructionCode
     *
     * @param string $instructionCode Код инструкции (формат MT103)
     *
     * @return $this
     */
    public function setInstructionCode($instructionCode)
    {
        $this->container['instructionCode'] = $instructionCode;

        return $this;
    }

    /**
     * Gets intermediaryBankAccount
     *
     * @return string
     */
    public function getIntermediaryBankAccount()
    {
        return $this->container['intermediaryBankAccount'];
    }

    /**
     * Sets intermediaryBankAccount
     *
     * @param string $intermediaryBankAccount Номер счета банка-посредника. 1-я часть значения поля 56 в формате MT103
     *
     * @return $this
     */
    public function setIntermediaryBankAccount($intermediaryBankAccount)
    {
        $this->container['intermediaryBankAccount'] = $intermediaryBankAccount;

        return $this;
    }

    /**
     * Gets intermediaryBankName
     *
     * @return string
     */
    public function getIntermediaryBankName()
    {
        return $this->container['intermediaryBankName'];
    }

    /**
     * Sets intermediaryBankName
     *
     * @param string $intermediaryBankName Код BIC или название банка-посредника. Содержимое поля 56 (за исключением номера счета, с разделителями) в формате MT103
     *
     * @return $this
     */
    public function setIntermediaryBankName($intermediaryBankName)
    {
        $this->container['intermediaryBankName'] = $intermediaryBankName;

        return $this;
    }

    /**
     * Gets intermediaryBankOption
     *
     * @return string
     */
    public function getIntermediaryBankOption()
    {
        return $this->container['intermediaryBankOption'];
    }

    /**
     * Sets intermediaryBankOption
     *
     * @param string $intermediaryBankOption Признак вида поля банка-посредника (поле 56 в формате MT103). Возможные значения: A, С, D
     *
     * @return $this
     */
    public function setIntermediaryBankOption($intermediaryBankOption)
    {
        $this->container['intermediaryBankOption'] = $intermediaryBankOption;

        return $this;
    }

    /**
     * Gets messageDestinator
     *
     * @return string
     */
    public function getMessageDestinator()
    {
        return $this->container['messageDestinator'];
    }

    /**
     * Sets messageDestinator
     *
     * @param string $messageDestinator Получатель сообщения SWIFT (формат MT103)
     *
     * @return $this
     */
    public function setMessageDestinator($messageDestinator)
    {
        $this->container['messageDestinator'] = $messageDestinator;

        return $this;
    }

    /**
     * Gets messageIdentifier
     *
     * @return string
     */
    public function getMessageIdentifier()
    {
        return $this->container['messageIdentifier'];
    }

    /**
     * Sets messageIdentifier
     *
     * @param string $messageIdentifier Уникальный системный номер сообщения SWIFT (формат MT103)
     *
     * @return $this
     */
    public function setMessageIdentifier($messageIdentifier)
    {
        $this->container['messageIdentifier'] = $messageIdentifier;

        return $this;
    }

    /**
     * Gets messageOriginator
     *
     * @return string
     */
    public function getMessageOriginator()
    {
        return $this->container['messageOriginator'];
    }

    /**
     * Sets messageOriginator
     *
     * @param string $messageOriginator Отправитель сообщения SWIFT (формат MT103)
     *
     * @return $this
     */
    public function setMessageOriginator($messageOriginator)
    {
        $this->container['messageOriginator'] = $messageOriginator;

        return $this;
    }

    /**
     * Gets messageReceiveTime
     *
     * @return string
     */
    public function getMessageReceiveTime()
    {
        return $this->container['messageReceiveTime'];
    }

    /**
     * Sets messageReceiveTime
     *
     * @param string $messageReceiveTime Дата и время получения сообщения SWIFT (формат MT103)
     *
     * @return $this
     */
    public function setMessageReceiveTime($messageReceiveTime)
    {
        $this->container['messageReceiveTime'] = $messageReceiveTime;

        return $this;
    }

    /**
     * Gets messageSendTime
     *
     * @return string
     */
    public function getMessageSendTime()
    {
        return $this->container['messageSendTime'];
    }

    /**
     * Sets messageSendTime
     *
     * @param string $messageSendTime Дата и время отправки сообщения SWIFT (формат MT103)
     *
     * @return $this
     */
    public function setMessageSendTime($messageSendTime)
    {
        $this->container['messageSendTime'] = $messageSendTime;

        return $this;
    }

    /**
     * Gets messageType
     *
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['messageType'];
    }

    /**
     * Sets messageType
     *
     * @param string $messageType Тип сообщения SWIFT
     *
     * @return $this
     */
    public function setMessageType($messageType)
    {
        $this->container['messageType'] = $messageType;

        return $this;
    }

    /**
     * Gets orderingCustomerAccount
     *
     * @return string
     */
    public function getOrderingCustomerAccount()
    {
        return $this->container['orderingCustomerAccount'];
    }

    /**
     * Sets orderingCustomerAccount
     *
     * @param string $orderingCustomerAccount Номер счета плательщика в формате IBAN или BBAN (для внутренних платежей). 1-я часть значения поля 50 в формате MT103
     *
     * @return $this
     */
    public function setOrderingCustomerAccount($orderingCustomerAccount)
    {
        $this->container['orderingCustomerAccount'] = $orderingCustomerAccount;

        return $this;
    }

    /**
     * Gets orderingCustomerName
     *
     * @return string
     */
    public function getOrderingCustomerName()
    {
        return $this->container['orderingCustomerName'];
    }

    /**
     * Sets orderingCustomerName
     *
     * @param string $orderingCustomerName Код BIC/BEI или название и адрес плательщика. Содержимое поля 50 (за исключением номера счета, с разделителями) в формате MT103
     *
     * @return $this
     */
    public function setOrderingCustomerName($orderingCustomerName)
    {
        $this->container['orderingCustomerName'] = $orderingCustomerName;

        return $this;
    }

    /**
     * Gets orderingCustomerOption
     *
     * @return string
     */
    public function getOrderingCustomerOption()
    {
        return $this->container['orderingCustomerOption'];
    }

    /**
     * Sets orderingCustomerOption
     *
     * @param string $orderingCustomerOption Признак вида поля плательщика (поле 50 в формате MT103). Возможные значения: A, F, K
     *
     * @return $this
     */
    public function setOrderingCustomerOption($orderingCustomerOption)
    {
        $this->container['orderingCustomerOption'] = $orderingCustomerOption;

        return $this;
    }

    /**
     * Gets orderingInstitutionAccount
     *
     * @return string
     */
    public function getOrderingInstitutionAccount()
    {
        return $this->container['orderingInstitutionAccount'];
    }

    /**
     * Sets orderingInstitutionAccount
     *
     * @param string $orderingInstitutionAccount Номер счета банка плательщика. 1-я часть значения поля 52 в формате MT103
     *
     * @return $this
     */
    public function setOrderingInstitutionAccount($orderingInstitutionAccount)
    {
        $this->container['orderingInstitutionAccount'] = $orderingInstitutionAccount;

        return $this;
    }

    /**
     * Gets orderingInstitutionName
     *
     * @return string
     */
    public function getOrderingInstitutionName()
    {
        return $this->container['orderingInstitutionName'];
    }

    /**
     * Sets orderingInstitutionName
     *
     * @param string $orderingInstitutionName Код BIC или название и адрес банка плательщика. Содержимое поля 52 (за исключением номера счета, с разделителями) в формате MT103
     *
     * @return $this
     */
    public function setOrderingInstitutionName($orderingInstitutionName)
    {
        $this->container['orderingInstitutionName'] = $orderingInstitutionName;

        return $this;
    }

    /**
     * Gets orderingInstitutionOption
     *
     * @return string
     */
    public function getOrderingInstitutionOption()
    {
        return $this->container['orderingInstitutionOption'];
    }

    /**
     * Sets orderingInstitutionOption
     *
     * @param string $orderingInstitutionOption Признак вида поля банка плательщика (поле 52 в формате MT-103). Возможные значения: A, D
     *
     * @return $this
     */
    public function setOrderingInstitutionOption($orderingInstitutionOption)
    {
        $this->container['orderingInstitutionOption'] = $orderingInstitutionOption;

        return $this;
    }

    /**
     * Gets receiverCharges
     *
     * @return string
     */
    public function getReceiverCharges()
    {
        return $this->container['receiverCharges'];
    }

    /**
     * Sets receiverCharges
     *
     * @param string $receiverCharges Расходы получателя (формат MT103)
     *
     * @return $this
     */
    public function setReceiverCharges($receiverCharges)
    {
        $this->container['receiverCharges'] = $receiverCharges;

        return $this;
    }

    /**
     * Gets receiverCorrespondentAccount
     *
     * @return string
     */
    public function getReceiverCorrespondentAccount()
    {
        return $this->container['receiverCorrespondentAccount'];
    }

    /**
     * Sets receiverCorrespondentAccount
     *
     * @param string $receiverCorrespondentAccount Номер счета корреспондента получателя. 1-я часть значения поля 54 в формате MT103
     *
     * @return $this
     */
    public function setReceiverCorrespondentAccount($receiverCorrespondentAccount)
    {
        $this->container['receiverCorrespondentAccount'] = $receiverCorrespondentAccount;

        return $this;
    }

    /**
     * Gets receiverCorrespondentName
     *
     * @return string
     */
    public function getReceiverCorrespondentName()
    {
        return $this->container['receiverCorrespondentName'];
    }

    /**
     * Sets receiverCorrespondentName
     *
     * @param string $receiverCorrespondentName Код BIC, расположение или название и адрес корреспондента получателя. Содержимое поля 54 (за исключением номера счета, с разделителями) в формате MT103
     *
     * @return $this
     */
    public function setReceiverCorrespondentName($receiverCorrespondentName)
    {
        $this->container['receiverCorrespondentName'] = $receiverCorrespondentName;

        return $this;
    }

    /**
     * Gets receiverCorrespondentOption
     *
     * @return string
     */
    public function getReceiverCorrespondentOption()
    {
        return $this->container['receiverCorrespondentOption'];
    }

    /**
     * Sets receiverCorrespondentOption
     *
     * @param string $receiverCorrespondentOption Признак вида поля корреспондента получателя (поле 54 в формате MT103). Возможные значения: A, B, D
     *
     * @return $this
     */
    public function setReceiverCorrespondentOption($receiverCorrespondentOption)
    {
        $this->container['receiverCorrespondentOption'] = $receiverCorrespondentOption;

        return $this;
    }

    /**
     * Gets regulatoryReporting
     *
     * @return string
     */
    public function getRegulatoryReporting()
    {
        return $this->container['regulatoryReporting'];
    }

    /**
     * Sets regulatoryReporting
     *
     * @param string $regulatoryReporting Контрольная отчетность (формат MT103)
     *
     * @return $this
     */
    public function setRegulatoryReporting($regulatoryReporting)
    {
        $this->container['regulatoryReporting'] = $regulatoryReporting;

        return $this;
    }

    /**
     * Gets remittanceInformation
     *
     * @return string
     */
    public function getRemittanceInformation()
    {
        return $this->container['remittanceInformation'];
    }

    /**
     * Sets remittanceInformation
     *
     * @param string $remittanceInformation Сведения о переводе (формат MT103)
     *
     * @return $this
     */
    public function setRemittanceInformation($remittanceInformation)
    {
        $this->container['remittanceInformation'] = $remittanceInformation;

        return $this;
    }

    /**
     * Gets senderCharges
     *
     * @return string
     */
    public function getSenderCharges()
    {
        return $this->container['senderCharges'];
    }

    /**
     * Sets senderCharges
     *
     * @param string $senderCharges Расходы отправителя (формат MT103)
     *
     * @return $this
     */
    public function setSenderCharges($senderCharges)
    {
        $this->container['senderCharges'] = $senderCharges;

        return $this;
    }

    /**
     * Gets senderCorrespondentAccount
     *
     * @return string
     */
    public function getSenderCorrespondentAccount()
    {
        return $this->container['senderCorrespondentAccount'];
    }

    /**
     * Sets senderCorrespondentAccount
     *
     * @param string $senderCorrespondentAccount Номер счета корреспондента отправителя. 1-я часть значения поля 53 в формате MT103
     *
     * @return $this
     */
    public function setSenderCorrespondentAccount($senderCorrespondentAccount)
    {
        $this->container['senderCorrespondentAccount'] = $senderCorrespondentAccount;

        return $this;
    }

    /**
     * Gets senderCorrespondentName
     *
     * @return string
     */
    public function getSenderCorrespondentName()
    {
        return $this->container['senderCorrespondentName'];
    }

    /**
     * Sets senderCorrespondentName
     *
     * @param string $senderCorrespondentName Код BIC, расположение или название и адрес корреспондента отправителя. Содержимое поля 53 (за исключением номера счета, с разделителями) в формате MT103
     *
     * @return $this
     */
    public function setSenderCorrespondentName($senderCorrespondentName)
    {
        $this->container['senderCorrespondentName'] = $senderCorrespondentName;

        return $this;
    }

    /**
     * Gets senderCorrespondentOption
     *
     * @return string
     */
    public function getSenderCorrespondentOption()
    {
        return $this->container['senderCorrespondentOption'];
    }

    /**
     * Sets senderCorrespondentOption
     *
     * @param string $senderCorrespondentOption Признак вида поля корреспондента отправителя (поле 53 в формате MT103). Возможные значения: A, B, D
     *
     * @return $this
     */
    public function setSenderCorrespondentOption($senderCorrespondentOption)
    {
        $this->container['senderCorrespondentOption'] = $senderCorrespondentOption;

        return $this;
    }

    /**
     * Gets senderToReceiverInformation
     *
     * @return string
     */
    public function getSenderToReceiverInformation()
    {
        return $this->container['senderToReceiverInformation'];
    }

    /**
     * Sets senderToReceiverInformation
     *
     * @param string $senderToReceiverInformation Информация отправителя получателю (формат MT103)
     *
     * @return $this
     */
    public function setSenderToReceiverInformation($senderToReceiverInformation)
    {
        $this->container['senderToReceiverInformation'] = $senderToReceiverInformation;

        return $this;
    }

    /**
     * Gets transactionReferenceNumber
     *
     * @return string
     */
    public function getTransactionReferenceNumber()
    {
        return $this->container['transactionReferenceNumber'];
    }

    /**
     * Sets transactionReferenceNumber
     *
     * @param string $transactionReferenceNumber Референс операции (формат MT103)
     *
     * @return $this
     */
    public function setTransactionReferenceNumber($transactionReferenceNumber)
    {
        $this->container['transactionReferenceNumber'] = $transactionReferenceNumber;

        return $this;
    }

    /**
     * Gets transactionRelatedReference
     *
     * @return string
     */
    public function getTransactionRelatedReference()
    {
        return $this->container['transactionRelatedReference'];
    }

    /**
     * Sets transactionRelatedReference
     *
     * @param string $transactionRelatedReference Связанный референс (формат MT103)
     *
     * @return $this
     */
    public function setTransactionRelatedReference($transactionRelatedReference)
    {
        $this->container['transactionRelatedReference'] = $transactionRelatedReference;

        return $this;
    }

    /**
     * Gets transactionTypeCode
     *
     * @return string
     */
    public function getTransactionTypeCode()
    {
        return $this->container['transactionTypeCode'];
    }

    /**
     * Sets transactionTypeCode
     *
     * @param string $transactionTypeCode Код типа операции (формат MT103)
     *
     * @return $this
     */
    public function setTransactionTypeCode($transactionTypeCode)
    {
        $this->container['transactionTypeCode'] = $transactionTypeCode;

        return $this;
    }

    /**
     * Gets urgent
     *
     * @return string
     */
    public function getUrgent()
    {
        return $this->container['urgent'];
    }

    /**
     * Sets urgent
     *
     * @param string $urgent Признак срочности операции (формат MT103). Возможные значения: URGENT, NORMAL
     *
     * @return $this
     */
    public function setUrgent($urgent)
    {
        $this->container['urgent'] = $urgent;

        return $this;
    }

    /**
     * Gets valueDateCurrencyInterbankSettledAmount
     *
     * @return string
     */
    public function getValueDateCurrencyInterbankSettledAmount()
    {
        return $this->container['valueDateCurrencyInterbankSettledAmount'];
    }

    /**
     * Sets valueDateCurrencyInterbankSettledAmount
     *
     * @param string $valueDateCurrencyInterbankSettledAmount Дата валютирования, код валюты, сумма межбанковского расчета (формат MT103)
     *
     * @return $this
     */
    public function setValueDateCurrencyInterbankSettledAmount($valueDateCurrencyInterbankSettledAmount)
    {
        $this->container['valueDateCurrencyInterbankSettledAmount'] = $valueDateCurrencyInterbankSettledAmount;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
