<?php
/**
 * PayDocCur
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * PayDocCur Class Doc Comment
 *
 * @category Class
 * @description Валютное платёжное поручение
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class PayDocCur implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PayDocCur';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'acceptDate' => '\DateTime',
        'addInfo' => 'string',
        'additionalInfo' => 'string',
        'amountDebitTotal' => 'float',
        'amountTransfer' => 'float',
        'amountTransferTotal' => 'float',
        'authPersonName' => 'string',
        'authPersonTelfax' => 'string',
        'b77info' => 'string',
        'bankComment' => 'string',
        'bankStatus' => 'string',
        'beneficiaryAccount' => 'string',
        'beneficiaryAddress' => 'string',
        'beneficiaryBankAccount' => 'string',
        'beneficiaryBankAddress' => 'string',
        'beneficiaryBankBranchName' => 'string',
        'beneficiaryBankClearingCode' => '\common\models\sbbol2\ClearingCode',
        'beneficiaryBankCountryDigital' => 'string',
        'beneficiaryBankCountryIso2' => 'string',
        'beneficiaryBankName' => 'string',
        'beneficiaryBankPlace' => 'string',
        'beneficiaryBankSwift' => 'string',
        'beneficiaryBeiCode' => 'string',
        'beneficiaryCountryDigital' => 'string',
        'beneficiaryCountryIso2' => 'string',
        'beneficiaryCountryName' => 'string',
        'beneficiaryInn' => 'string',
        'beneficiaryName' => 'string',
        'beneficiaryPlace' => 'string',
        'chargesType' => 'string',
        'codes23e' => '\common\models\sbbol2\Code23e[]',
        'currencyCodeTransfer' => 'string',
        'currencyNameTransfer' => 'string',
        'date' => '\DateTime',
        'digestSignatures' => '\common\models\sbbol2\Signature[]',
        'externalId' => 'string',
        'factRate' => 'float',
        'iMediaBankAddress' => 'string',
        'iMediaBankCountryDigital' => 'string',
        'iMediaBankCountryIso2' => 'string',
        'iMediaBankName' => 'string',
        'iMediaBankPlace' => 'string',
        'iMediaBankSwift' => 'string',
        'iMediaClearingCode' => '\common\models\sbbol2\ClearingCode',
        'iMediaFilialBankName' => 'string',
        'inn' => 'string',
        'linkedDocs' => '\common\models\sbbol2\LinkedDoc[]',
        'number' => 'string',
        'option50a' => 'string',
        'option56a' => 'string',
        'option57a' => 'string',
        'option59a' => 'string',
        'orgName' => 'string',
        'payerAccount' => 'string',
        'payerAddress' => 'string',
        'payerBankBic' => 'string',
        'payerBankPlace' => 'string',
        'payerCountryDigital' => 'string',
        'payerCountryIso2' => 'string',
        'payerCountryName' => 'string',
        'payerName' => 'string',
        'payerPlace' => 'string',
        'paymentDetails' => 'string',
        'paymentDirection' => 'string',
        'rateAgree' => 'bool',
        'urgent' => 'bool',
        'valueDate' => '\DateTime',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'acceptDate' => 'date-time',
        'addInfo' => null,
        'additionalInfo' => null,
        'amountDebitTotal' => null,
        'amountTransfer' => null,
        'amountTransferTotal' => null,
        'authPersonName' => null,
        'authPersonTelfax' => null,
        'b77info' => null,
        'bankComment' => null,
        'bankStatus' => null,
        'beneficiaryAccount' => null,
        'beneficiaryAddress' => null,
        'beneficiaryBankAccount' => null,
        'beneficiaryBankAddress' => null,
        'beneficiaryBankBranchName' => null,
        'beneficiaryBankClearingCode' => null,
        'beneficiaryBankCountryDigital' => null,
        'beneficiaryBankCountryIso2' => null,
        'beneficiaryBankName' => null,
        'beneficiaryBankPlace' => null,
        'beneficiaryBankSwift' => null,
        'beneficiaryBeiCode' => null,
        'beneficiaryCountryDigital' => null,
        'beneficiaryCountryIso2' => null,
        'beneficiaryCountryName' => null,
        'beneficiaryInn' => null,
        'beneficiaryName' => null,
        'beneficiaryPlace' => null,
        'chargesType' => null,
        'codes23e' => null,
        'currencyCodeTransfer' => null,
        'currencyNameTransfer' => null,
        'date' => 'date-time',
        'digestSignatures' => null,
        'externalId' => null,
        'factRate' => null,
        'iMediaBankAddress' => null,
        'iMediaBankCountryDigital' => null,
        'iMediaBankCountryIso2' => null,
        'iMediaBankName' => null,
        'iMediaBankPlace' => null,
        'iMediaBankSwift' => null,
        'iMediaClearingCode' => null,
        'iMediaFilialBankName' => null,
        'inn' => null,
        'linkedDocs' => null,
        'number' => null,
        'option50a' => null,
        'option56a' => null,
        'option57a' => null,
        'option59a' => null,
        'orgName' => null,
        'payerAccount' => null,
        'payerAddress' => null,
        'payerBankBic' => null,
        'payerBankPlace' => null,
        'payerCountryDigital' => null,
        'payerCountryIso2' => null,
        'payerCountryName' => null,
        'payerName' => null,
        'payerPlace' => null,
        'paymentDetails' => null,
        'paymentDirection' => null,
        'rateAgree' => null,
        'urgent' => null,
        'valueDate' => 'date-time',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptDate' => 'acceptDate',
        'addInfo' => 'addInfo',
        'additionalInfo' => 'additionalInfo',
        'amountDebitTotal' => 'amountDebitTotal',
        'amountTransfer' => 'amountTransfer',
        'amountTransferTotal' => 'amountTransferTotal',
        'authPersonName' => 'authPersonName',
        'authPersonTelfax' => 'authPersonTelfax',
        'b77info' => 'b77info',
        'bankComment' => 'bankComment',
        'bankStatus' => 'bankStatus',
        'beneficiaryAccount' => 'beneficiaryAccount',
        'beneficiaryAddress' => 'beneficiaryAddress',
        'beneficiaryBankAccount' => 'beneficiaryBankAccount',
        'beneficiaryBankAddress' => 'beneficiaryBankAddress',
        'beneficiaryBankBranchName' => 'beneficiaryBankBranchName',
        'beneficiaryBankClearingCode' => 'beneficiaryBankClearingCode',
        'beneficiaryBankCountryDigital' => 'beneficiaryBankCountryDigital',
        'beneficiaryBankCountryIso2' => 'beneficiaryBankCountryIso2',
        'beneficiaryBankName' => 'beneficiaryBankName',
        'beneficiaryBankPlace' => 'beneficiaryBankPlace',
        'beneficiaryBankSwift' => 'beneficiaryBankSwift',
        'beneficiaryBeiCode' => 'beneficiaryBeiCode',
        'beneficiaryCountryDigital' => 'beneficiaryCountryDigital',
        'beneficiaryCountryIso2' => 'beneficiaryCountryIso2',
        'beneficiaryCountryName' => 'beneficiaryCountryName',
        'beneficiaryInn' => 'beneficiaryInn',
        'beneficiaryName' => 'beneficiaryName',
        'beneficiaryPlace' => 'beneficiaryPlace',
        'chargesType' => 'chargesType',
        'codes23e' => 'codes23e',
        'currencyCodeTransfer' => 'currencyCodeTransfer',
        'currencyNameTransfer' => 'currencyNameTransfer',
        'date' => 'date',
        'digestSignatures' => 'digestSignatures',
        'externalId' => 'externalId',
        'factRate' => 'factRate',
        'iMediaBankAddress' => 'iMediaBankAddress',
        'iMediaBankCountryDigital' => 'iMediaBankCountryDigital',
        'iMediaBankCountryIso2' => 'iMediaBankCountryIso2',
        'iMediaBankName' => 'iMediaBankName',
        'iMediaBankPlace' => 'iMediaBankPlace',
        'iMediaBankSwift' => 'iMediaBankSwift',
        'iMediaClearingCode' => 'iMediaClearingCode',
        'iMediaFilialBankName' => 'iMediaFilialBankName',
        'inn' => 'inn',
        'linkedDocs' => 'linkedDocs',
        'number' => 'number',
        'option50a' => 'option50a',
        'option56a' => 'option56a',
        'option57a' => 'option57a',
        'option59a' => 'option59a',
        'orgName' => 'orgName',
        'payerAccount' => 'payerAccount',
        'payerAddress' => 'payerAddress',
        'payerBankBic' => 'payerBankBic',
        'payerBankPlace' => 'payerBankPlace',
        'payerCountryDigital' => 'payerCountryDigital',
        'payerCountryIso2' => 'payerCountryIso2',
        'payerCountryName' => 'payerCountryName',
        'payerName' => 'payerName',
        'payerPlace' => 'payerPlace',
        'paymentDetails' => 'paymentDetails',
        'paymentDirection' => 'paymentDirection',
        'rateAgree' => 'rateAgree',
        'urgent' => 'urgent',
        'valueDate' => 'valueDate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptDate' => 'setAcceptDate',
        'addInfo' => 'setAddInfo',
        'additionalInfo' => 'setAdditionalInfo',
        'amountDebitTotal' => 'setAmountDebitTotal',
        'amountTransfer' => 'setAmountTransfer',
        'amountTransferTotal' => 'setAmountTransferTotal',
        'authPersonName' => 'setAuthPersonName',
        'authPersonTelfax' => 'setAuthPersonTelfax',
        'b77info' => 'setB77info',
        'bankComment' => 'setBankComment',
        'bankStatus' => 'setBankStatus',
        'beneficiaryAccount' => 'setBeneficiaryAccount',
        'beneficiaryAddress' => 'setBeneficiaryAddress',
        'beneficiaryBankAccount' => 'setBeneficiaryBankAccount',
        'beneficiaryBankAddress' => 'setBeneficiaryBankAddress',
        'beneficiaryBankBranchName' => 'setBeneficiaryBankBranchName',
        'beneficiaryBankClearingCode' => 'setBeneficiaryBankClearingCode',
        'beneficiaryBankCountryDigital' => 'setBeneficiaryBankCountryDigital',
        'beneficiaryBankCountryIso2' => 'setBeneficiaryBankCountryIso2',
        'beneficiaryBankName' => 'setBeneficiaryBankName',
        'beneficiaryBankPlace' => 'setBeneficiaryBankPlace',
        'beneficiaryBankSwift' => 'setBeneficiaryBankSwift',
        'beneficiaryBeiCode' => 'setBeneficiaryBeiCode',
        'beneficiaryCountryDigital' => 'setBeneficiaryCountryDigital',
        'beneficiaryCountryIso2' => 'setBeneficiaryCountryIso2',
        'beneficiaryCountryName' => 'setBeneficiaryCountryName',
        'beneficiaryInn' => 'setBeneficiaryInn',
        'beneficiaryName' => 'setBeneficiaryName',
        'beneficiaryPlace' => 'setBeneficiaryPlace',
        'chargesType' => 'setChargesType',
        'codes23e' => 'setCodes23e',
        'currencyCodeTransfer' => 'setCurrencyCodeTransfer',
        'currencyNameTransfer' => 'setCurrencyNameTransfer',
        'date' => 'setDate',
        'digestSignatures' => 'setDigestSignatures',
        'externalId' => 'setExternalId',
        'factRate' => 'setFactRate',
        'iMediaBankAddress' => 'setIMediaBankAddress',
        'iMediaBankCountryDigital' => 'setIMediaBankCountryDigital',
        'iMediaBankCountryIso2' => 'setIMediaBankCountryIso2',
        'iMediaBankName' => 'setIMediaBankName',
        'iMediaBankPlace' => 'setIMediaBankPlace',
        'iMediaBankSwift' => 'setIMediaBankSwift',
        'iMediaClearingCode' => 'setIMediaClearingCode',
        'iMediaFilialBankName' => 'setIMediaFilialBankName',
        'inn' => 'setInn',
        'linkedDocs' => 'setLinkedDocs',
        'number' => 'setNumber',
        'option50a' => 'setOption50a',
        'option56a' => 'setOption56a',
        'option57a' => 'setOption57a',
        'option59a' => 'setOption59a',
        'orgName' => 'setOrgName',
        'payerAccount' => 'setPayerAccount',
        'payerAddress' => 'setPayerAddress',
        'payerBankBic' => 'setPayerBankBic',
        'payerBankPlace' => 'setPayerBankPlace',
        'payerCountryDigital' => 'setPayerCountryDigital',
        'payerCountryIso2' => 'setPayerCountryIso2',
        'payerCountryName' => 'setPayerCountryName',
        'payerName' => 'setPayerName',
        'payerPlace' => 'setPayerPlace',
        'paymentDetails' => 'setPaymentDetails',
        'paymentDirection' => 'setPaymentDirection',
        'rateAgree' => 'setRateAgree',
        'urgent' => 'setUrgent',
        'valueDate' => 'setValueDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptDate' => 'getAcceptDate',
        'addInfo' => 'getAddInfo',
        'additionalInfo' => 'getAdditionalInfo',
        'amountDebitTotal' => 'getAmountDebitTotal',
        'amountTransfer' => 'getAmountTransfer',
        'amountTransferTotal' => 'getAmountTransferTotal',
        'authPersonName' => 'getAuthPersonName',
        'authPersonTelfax' => 'getAuthPersonTelfax',
        'b77info' => 'getB77info',
        'bankComment' => 'getBankComment',
        'bankStatus' => 'getBankStatus',
        'beneficiaryAccount' => 'getBeneficiaryAccount',
        'beneficiaryAddress' => 'getBeneficiaryAddress',
        'beneficiaryBankAccount' => 'getBeneficiaryBankAccount',
        'beneficiaryBankAddress' => 'getBeneficiaryBankAddress',
        'beneficiaryBankBranchName' => 'getBeneficiaryBankBranchName',
        'beneficiaryBankClearingCode' => 'getBeneficiaryBankClearingCode',
        'beneficiaryBankCountryDigital' => 'getBeneficiaryBankCountryDigital',
        'beneficiaryBankCountryIso2' => 'getBeneficiaryBankCountryIso2',
        'beneficiaryBankName' => 'getBeneficiaryBankName',
        'beneficiaryBankPlace' => 'getBeneficiaryBankPlace',
        'beneficiaryBankSwift' => 'getBeneficiaryBankSwift',
        'beneficiaryBeiCode' => 'getBeneficiaryBeiCode',
        'beneficiaryCountryDigital' => 'getBeneficiaryCountryDigital',
        'beneficiaryCountryIso2' => 'getBeneficiaryCountryIso2',
        'beneficiaryCountryName' => 'getBeneficiaryCountryName',
        'beneficiaryInn' => 'getBeneficiaryInn',
        'beneficiaryName' => 'getBeneficiaryName',
        'beneficiaryPlace' => 'getBeneficiaryPlace',
        'chargesType' => 'getChargesType',
        'codes23e' => 'getCodes23e',
        'currencyCodeTransfer' => 'getCurrencyCodeTransfer',
        'currencyNameTransfer' => 'getCurrencyNameTransfer',
        'date' => 'getDate',
        'digestSignatures' => 'getDigestSignatures',
        'externalId' => 'getExternalId',
        'factRate' => 'getFactRate',
        'iMediaBankAddress' => 'getIMediaBankAddress',
        'iMediaBankCountryDigital' => 'getIMediaBankCountryDigital',
        'iMediaBankCountryIso2' => 'getIMediaBankCountryIso2',
        'iMediaBankName' => 'getIMediaBankName',
        'iMediaBankPlace' => 'getIMediaBankPlace',
        'iMediaBankSwift' => 'getIMediaBankSwift',
        'iMediaClearingCode' => 'getIMediaClearingCode',
        'iMediaFilialBankName' => 'getIMediaFilialBankName',
        'inn' => 'getInn',
        'linkedDocs' => 'getLinkedDocs',
        'number' => 'getNumber',
        'option50a' => 'getOption50a',
        'option56a' => 'getOption56a',
        'option57a' => 'getOption57a',
        'option59a' => 'getOption59a',
        'orgName' => 'getOrgName',
        'payerAccount' => 'getPayerAccount',
        'payerAddress' => 'getPayerAddress',
        'payerBankBic' => 'getPayerBankBic',
        'payerBankPlace' => 'getPayerBankPlace',
        'payerCountryDigital' => 'getPayerCountryDigital',
        'payerCountryIso2' => 'getPayerCountryIso2',
        'payerCountryName' => 'getPayerCountryName',
        'payerName' => 'getPayerName',
        'payerPlace' => 'getPayerPlace',
        'paymentDetails' => 'getPaymentDetails',
        'paymentDirection' => 'getPaymentDirection',
        'rateAgree' => 'getRateAgree',
        'urgent' => 'getUrgent',
        'valueDate' => 'getValueDate',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acceptDate'] = isset($data['acceptDate']) ? $data['acceptDate'] : null;
        $this->container['addInfo'] = isset($data['addInfo']) ? $data['addInfo'] : null;
        $this->container['additionalInfo'] = isset($data['additionalInfo']) ? $data['additionalInfo'] : null;
        $this->container['amountDebitTotal'] = isset($data['amountDebitTotal']) ? $data['amountDebitTotal'] : null;
        $this->container['amountTransfer'] = isset($data['amountTransfer']) ? $data['amountTransfer'] : null;
        $this->container['amountTransferTotal'] = isset($data['amountTransferTotal']) ? $data['amountTransferTotal'] : null;
        $this->container['authPersonName'] = isset($data['authPersonName']) ? $data['authPersonName'] : null;
        $this->container['authPersonTelfax'] = isset($data['authPersonTelfax']) ? $data['authPersonTelfax'] : null;
        $this->container['b77info'] = isset($data['b77info']) ? $data['b77info'] : null;
        $this->container['bankComment'] = isset($data['bankComment']) ? $data['bankComment'] : null;
        $this->container['bankStatus'] = isset($data['bankStatus']) ? $data['bankStatus'] : null;
        $this->container['beneficiaryAccount'] = isset($data['beneficiaryAccount']) ? $data['beneficiaryAccount'] : null;
        $this->container['beneficiaryAddress'] = isset($data['beneficiaryAddress']) ? $data['beneficiaryAddress'] : null;
        $this->container['beneficiaryBankAccount'] = isset($data['beneficiaryBankAccount']) ? $data['beneficiaryBankAccount'] : null;
        $this->container['beneficiaryBankAddress'] = isset($data['beneficiaryBankAddress']) ? $data['beneficiaryBankAddress'] : null;
        $this->container['beneficiaryBankBranchName'] = isset($data['beneficiaryBankBranchName']) ? $data['beneficiaryBankBranchName'] : null;
        $this->container['beneficiaryBankClearingCode'] = isset($data['beneficiaryBankClearingCode']) ? $data['beneficiaryBankClearingCode'] : null;
        $this->container['beneficiaryBankCountryDigital'] = isset($data['beneficiaryBankCountryDigital']) ? $data['beneficiaryBankCountryDigital'] : null;
        $this->container['beneficiaryBankCountryIso2'] = isset($data['beneficiaryBankCountryIso2']) ? $data['beneficiaryBankCountryIso2'] : null;
        $this->container['beneficiaryBankName'] = isset($data['beneficiaryBankName']) ? $data['beneficiaryBankName'] : null;
        $this->container['beneficiaryBankPlace'] = isset($data['beneficiaryBankPlace']) ? $data['beneficiaryBankPlace'] : null;
        $this->container['beneficiaryBankSwift'] = isset($data['beneficiaryBankSwift']) ? $data['beneficiaryBankSwift'] : null;
        $this->container['beneficiaryBeiCode'] = isset($data['beneficiaryBeiCode']) ? $data['beneficiaryBeiCode'] : null;
        $this->container['beneficiaryCountryDigital'] = isset($data['beneficiaryCountryDigital']) ? $data['beneficiaryCountryDigital'] : null;
        $this->container['beneficiaryCountryIso2'] = isset($data['beneficiaryCountryIso2']) ? $data['beneficiaryCountryIso2'] : null;
        $this->container['beneficiaryCountryName'] = isset($data['beneficiaryCountryName']) ? $data['beneficiaryCountryName'] : null;
        $this->container['beneficiaryInn'] = isset($data['beneficiaryInn']) ? $data['beneficiaryInn'] : null;
        $this->container['beneficiaryName'] = isset($data['beneficiaryName']) ? $data['beneficiaryName'] : null;
        $this->container['beneficiaryPlace'] = isset($data['beneficiaryPlace']) ? $data['beneficiaryPlace'] : null;
        $this->container['chargesType'] = isset($data['chargesType']) ? $data['chargesType'] : null;
        $this->container['codes23e'] = isset($data['codes23e']) ? $data['codes23e'] : null;
        $this->container['currencyCodeTransfer'] = isset($data['currencyCodeTransfer']) ? $data['currencyCodeTransfer'] : null;
        $this->container['currencyNameTransfer'] = isset($data['currencyNameTransfer']) ? $data['currencyNameTransfer'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['digestSignatures'] = isset($data['digestSignatures']) ? $data['digestSignatures'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['factRate'] = isset($data['factRate']) ? $data['factRate'] : null;
        $this->container['iMediaBankAddress'] = isset($data['iMediaBankAddress']) ? $data['iMediaBankAddress'] : null;
        $this->container['iMediaBankCountryDigital'] = isset($data['iMediaBankCountryDigital']) ? $data['iMediaBankCountryDigital'] : null;
        $this->container['iMediaBankCountryIso2'] = isset($data['iMediaBankCountryIso2']) ? $data['iMediaBankCountryIso2'] : null;
        $this->container['iMediaBankName'] = isset($data['iMediaBankName']) ? $data['iMediaBankName'] : null;
        $this->container['iMediaBankPlace'] = isset($data['iMediaBankPlace']) ? $data['iMediaBankPlace'] : null;
        $this->container['iMediaBankSwift'] = isset($data['iMediaBankSwift']) ? $data['iMediaBankSwift'] : null;
        $this->container['iMediaClearingCode'] = isset($data['iMediaClearingCode']) ? $data['iMediaClearingCode'] : null;
        $this->container['iMediaFilialBankName'] = isset($data['iMediaFilialBankName']) ? $data['iMediaFilialBankName'] : null;
        $this->container['inn'] = isset($data['inn']) ? $data['inn'] : null;
        $this->container['linkedDocs'] = isset($data['linkedDocs']) ? $data['linkedDocs'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['option50a'] = isset($data['option50a']) ? $data['option50a'] : null;
        $this->container['option56a'] = isset($data['option56a']) ? $data['option56a'] : null;
        $this->container['option57a'] = isset($data['option57a']) ? $data['option57a'] : null;
        $this->container['option59a'] = isset($data['option59a']) ? $data['option59a'] : null;
        $this->container['orgName'] = isset($data['orgName']) ? $data['orgName'] : null;
        $this->container['payerAccount'] = isset($data['payerAccount']) ? $data['payerAccount'] : null;
        $this->container['payerAddress'] = isset($data['payerAddress']) ? $data['payerAddress'] : null;
        $this->container['payerBankBic'] = isset($data['payerBankBic']) ? $data['payerBankBic'] : null;
        $this->container['payerBankPlace'] = isset($data['payerBankPlace']) ? $data['payerBankPlace'] : null;
        $this->container['payerCountryDigital'] = isset($data['payerCountryDigital']) ? $data['payerCountryDigital'] : null;
        $this->container['payerCountryIso2'] = isset($data['payerCountryIso2']) ? $data['payerCountryIso2'] : null;
        $this->container['payerCountryName'] = isset($data['payerCountryName']) ? $data['payerCountryName'] : null;
        $this->container['payerName'] = isset($data['payerName']) ? $data['payerName'] : null;
        $this->container['payerPlace'] = isset($data['payerPlace']) ? $data['payerPlace'] : null;
        $this->container['paymentDetails'] = isset($data['paymentDetails']) ? $data['paymentDetails'] : null;
        $this->container['paymentDirection'] = isset($data['paymentDirection']) ? $data['paymentDirection'] : null;
        $this->container['rateAgree'] = isset($data['rateAgree']) ? $data['rateAgree'] : null;
        $this->container['urgent'] = isset($data['urgent']) ? $data['urgent'] : null;
        $this->container['valueDate'] = isset($data['valueDate']) ? $data['valueDate'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amountTransfer'] === null) {
            $invalidProperties[] = "'amountTransfer' can't be null";
        }
        if ($this->container['authPersonName'] === null) {
            $invalidProperties[] = "'authPersonName' can't be null";
        }
        if ($this->container['authPersonTelfax'] === null) {
            $invalidProperties[] = "'authPersonTelfax' can't be null";
        }
        if ($this->container['beneficiaryAddress'] === null) {
            $invalidProperties[] = "'beneficiaryAddress' can't be null";
        }
        if ($this->container['beneficiaryBankCountryDigital'] === null) {
            $invalidProperties[] = "'beneficiaryBankCountryDigital' can't be null";
        }
        if ($this->container['beneficiaryBankCountryIso2'] === null) {
            $invalidProperties[] = "'beneficiaryBankCountryIso2' can't be null";
        }
        if ($this->container['beneficiaryBankName'] === null) {
            $invalidProperties[] = "'beneficiaryBankName' can't be null";
        }
        if ($this->container['beneficiaryBankPlace'] === null) {
            $invalidProperties[] = "'beneficiaryBankPlace' can't be null";
        }
        if ($this->container['beneficiaryBankSwift'] === null) {
            $invalidProperties[] = "'beneficiaryBankSwift' can't be null";
        }
        if ($this->container['beneficiaryCountryDigital'] === null) {
            $invalidProperties[] = "'beneficiaryCountryDigital' can't be null";
        }
        if ($this->container['beneficiaryCountryIso2'] === null) {
            $invalidProperties[] = "'beneficiaryCountryIso2' can't be null";
        }
        if ($this->container['beneficiaryName'] === null) {
            $invalidProperties[] = "'beneficiaryName' can't be null";
        }
        if ($this->container['beneficiaryPlace'] === null) {
            $invalidProperties[] = "'beneficiaryPlace' can't be null";
        }
        if ($this->container['chargesType'] === null) {
            $invalidProperties[] = "'chargesType' can't be null";
        }
        if ($this->container['currencyCodeTransfer'] === null) {
            $invalidProperties[] = "'currencyCodeTransfer' can't be null";
        }
        if ($this->container['currencyNameTransfer'] === null) {
            $invalidProperties[] = "'currencyNameTransfer' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['iMediaBankCountryDigital'] === null) {
            $invalidProperties[] = "'iMediaBankCountryDigital' can't be null";
        }
        if ($this->container['iMediaBankCountryIso2'] === null) {
            $invalidProperties[] = "'iMediaBankCountryIso2' can't be null";
        }
        if ($this->container['inn'] === null) {
            $invalidProperties[] = "'inn' can't be null";
        }
        if ($this->container['option50a'] === null) {
            $invalidProperties[] = "'option50a' can't be null";
        }
        if ($this->container['option57a'] === null) {
            $invalidProperties[] = "'option57a' can't be null";
        }
        if ($this->container['orgName'] === null) {
            $invalidProperties[] = "'orgName' can't be null";
        }
        if ($this->container['payerAccount'] === null) {
            $invalidProperties[] = "'payerAccount' can't be null";
        }
        if ($this->container['payerAddress'] === null) {
            $invalidProperties[] = "'payerAddress' can't be null";
        }
        if ($this->container['payerBankBic'] === null) {
            $invalidProperties[] = "'payerBankBic' can't be null";
        }
        if ($this->container['payerCountryDigital'] === null) {
            $invalidProperties[] = "'payerCountryDigital' can't be null";
        }
        if ($this->container['payerCountryIso2'] === null) {
            $invalidProperties[] = "'payerCountryIso2' can't be null";
        }
        if ($this->container['payerName'] === null) {
            $invalidProperties[] = "'payerName' can't be null";
        }
        if ($this->container['payerPlace'] === null) {
            $invalidProperties[] = "'payerPlace' can't be null";
        }
        if ($this->container['paymentDetails'] === null) {
            $invalidProperties[] = "'paymentDetails' can't be null";
        }
        if ($this->container['paymentDirection'] === null) {
            $invalidProperties[] = "'paymentDirection' can't be null";
        }
        if ($this->container['rateAgree'] === null) {
            $invalidProperties[] = "'rateAgree' can't be null";
        }
        if ($this->container['urgent'] === null) {
            $invalidProperties[] = "'urgent' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets acceptDate
     *
     * @return \DateTime
     */
    public function getAcceptDate()
    {
        return $this->container['acceptDate'];
    }

    /**
     * Sets acceptDate
     *
     * @param \DateTime $acceptDate Дата представления в банк
     *
     * @return $this
     */
    public function setAcceptDate($acceptDate)
    {
        $this->container['acceptDate'] = $acceptDate;

        return $this;
    }

    /**
     * Gets addInfo
     *
     * @return string
     */
    public function getAddInfo()
    {
        return $this->container['addInfo'];
    }

    /**
     * Sets addInfo
     *
     * @param string $addInfo Примечание
     *
     * @return $this
     */
    public function setAddInfo($addInfo)
    {
        $this->container['addInfo'] = $addInfo;

        return $this;
    }

    /**
     * Gets additionalInfo
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->container['additionalInfo'];
    }

    /**
     * Sets additionalInfo
     *
     * @param string $additionalInfo Информация получателю платежа (дополнительная информация), поле 72
     *
     * @return $this
     */
    public function setAdditionalInfo($additionalInfo)
    {
        $this->container['additionalInfo'] = $additionalInfo;

        return $this;
    }

    /**
     * Gets amountDebitTotal
     *
     * @return float
     */
    public function getAmountDebitTotal()
    {
        return $this->container['amountDebitTotal'];
    }

    /**
     * Sets amountDebitTotal
     *
     * @param float $amountDebitTotal Фактическая сумма списанной валюты
     *
     * @return $this
     */
    public function setAmountDebitTotal($amountDebitTotal)
    {
        $this->container['amountDebitTotal'] = $amountDebitTotal;

        return $this;
    }

    /**
     * Gets amountTransfer
     *
     * @return float
     */
    public function getAmountTransfer()
    {
        return $this->container['amountTransfer'];
    }

    /**
     * Sets amountTransfer
     *
     * @param float $amountTransfer Сумма перевода
     *
     * @return $this
     */
    public function setAmountTransfer($amountTransfer)
    {
        $this->container['amountTransfer'] = $amountTransfer;

        return $this;
    }

    /**
     * Gets amountTransferTotal
     *
     * @return float
     */
    public function getAmountTransferTotal()
    {
        return $this->container['amountTransferTotal'];
    }

    /**
     * Sets amountTransferTotal
     *
     * @param float $amountTransferTotal Фактическая сумма переведенной валюты
     *
     * @return $this
     */
    public function setAmountTransferTotal($amountTransferTotal)
    {
        $this->container['amountTransferTotal'] = $amountTransferTotal;

        return $this;
    }

    /**
     * Gets authPersonName
     *
     * @return string
     */
    public function getAuthPersonName()
    {
        return $this->container['authPersonName'];
    }

    /**
     * Sets authPersonName
     *
     * @param string $authPersonName ФИО уполномоченного сотрудника организации клиента
     *
     * @return $this
     */
    public function setAuthPersonName($authPersonName)
    {
        $this->container['authPersonName'] = $authPersonName;

        return $this;
    }

    /**
     * Gets authPersonTelfax
     *
     * @return string
     */
    public function getAuthPersonTelfax()
    {
        return $this->container['authPersonTelfax'];
    }

    /**
     * Sets authPersonTelfax
     *
     * @param string $authPersonTelfax Номер телефона, факса уполномоченного сотрудника организации клиента
     *
     * @return $this
     */
    public function setAuthPersonTelfax($authPersonTelfax)
    {
        $this->container['authPersonTelfax'] = $authPersonTelfax;

        return $this;
    }

    /**
     * Gets b77info
     *
     * @return string
     */
    public function getB77info()
    {
        return $this->container['b77info'];
    }

    /**
     * Sets b77info
     *
     * @param string $b77info Информация для регулирующих органов
     *
     * @return $this
     */
    public function setB77info($b77info)
    {
        $this->container['b77info'] = $b77info;

        return $this;
    }

    /**
     * Gets bankComment
     *
     * @return string
     */
    public function getBankComment()
    {
        return $this->container['bankComment'];
    }

    /**
     * Sets bankComment
     *
     * @param string $bankComment Банковский комментарий к статусу документа
     *
     * @return $this
     */
    public function setBankComment($bankComment)
    {
        $this->container['bankComment'] = $bankComment;

        return $this;
    }

    /**
     * Gets bankStatus
     *
     * @return string
     */
    public function getBankStatus()
    {
        return $this->container['bankStatus'];
    }

    /**
     * Sets bankStatus
     *
     * @param string $bankStatus Статус документа
     *
     * @return $this
     */
    public function setBankStatus($bankStatus)
    {
        $this->container['bankStatus'] = $bankStatus;

        return $this;
    }

    /**
     * Gets beneficiaryAccount
     *
     * @return string
     */
    public function getBeneficiaryAccount()
    {
        return $this->container['beneficiaryAccount'];
    }

    /**
     * Sets beneficiaryAccount
     *
     * @param string $beneficiaryAccount Счет бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryAccount($beneficiaryAccount)
    {
        $this->container['beneficiaryAccount'] = $beneficiaryAccount;

        return $this;
    }

    /**
     * Gets beneficiaryAddress
     *
     * @return string
     */
    public function getBeneficiaryAddress()
    {
        return $this->container['beneficiaryAddress'];
    }

    /**
     * Sets beneficiaryAddress
     *
     * @param string $beneficiaryAddress Адрес бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryAddress($beneficiaryAddress)
    {
        $this->container['beneficiaryAddress'] = $beneficiaryAddress;

        return $this;
    }

    /**
     * Gets beneficiaryBankAccount
     *
     * @return string
     */
    public function getBeneficiaryBankAccount()
    {
        return $this->container['beneficiaryBankAccount'];
    }

    /**
     * Sets beneficiaryBankAccount
     *
     * @param string $beneficiaryBankAccount Корреспондентский счёт банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBankAccount($beneficiaryBankAccount)
    {
        $this->container['beneficiaryBankAccount'] = $beneficiaryBankAccount;

        return $this;
    }

    /**
     * Gets beneficiaryBankAddress
     *
     * @return string
     */
    public function getBeneficiaryBankAddress()
    {
        return $this->container['beneficiaryBankAddress'];
    }

    /**
     * Sets beneficiaryBankAddress
     *
     * @param string $beneficiaryBankAddress Адрес банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBankAddress($beneficiaryBankAddress)
    {
        $this->container['beneficiaryBankAddress'] = $beneficiaryBankAddress;

        return $this;
    }

    /**
     * Gets beneficiaryBankBranchName
     *
     * @return string
     */
    public function getBeneficiaryBankBranchName()
    {
        return $this->container['beneficiaryBankBranchName'];
    }

    /**
     * Sets beneficiaryBankBranchName
     *
     * @param string $beneficiaryBankBranchName Наименование филиала банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBankBranchName($beneficiaryBankBranchName)
    {
        $this->container['beneficiaryBankBranchName'] = $beneficiaryBankBranchName;

        return $this;
    }

    /**
     * Gets beneficiaryBankClearingCode
     *
     * @return \common\models\sbbol2\ClearingCode
     */
    public function getBeneficiaryBankClearingCode()
    {
        return $this->container['beneficiaryBankClearingCode'];
    }

    /**
     * Sets beneficiaryBankClearingCode
     *
     * @param \common\models\sbbol2\ClearingCode $beneficiaryBankClearingCode beneficiaryBankClearingCode
     *
     * @return $this
     */
    public function setBeneficiaryBankClearingCode($beneficiaryBankClearingCode)
    {
        $this->container['beneficiaryBankClearingCode'] = $beneficiaryBankClearingCode;

        return $this;
    }

    /**
     * Gets beneficiaryBankCountryDigital
     *
     * @return string
     */
    public function getBeneficiaryBankCountryDigital()
    {
        return $this->container['beneficiaryBankCountryDigital'];
    }

    /**
     * Sets beneficiaryBankCountryDigital
     *
     * @param string $beneficiaryBankCountryDigital Цифровой код страны банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBankCountryDigital($beneficiaryBankCountryDigital)
    {
        $this->container['beneficiaryBankCountryDigital'] = $beneficiaryBankCountryDigital;

        return $this;
    }

    /**
     * Gets beneficiaryBankCountryIso2
     *
     * @return string
     */
    public function getBeneficiaryBankCountryIso2()
    {
        return $this->container['beneficiaryBankCountryIso2'];
    }

    /**
     * Sets beneficiaryBankCountryIso2
     *
     * @param string $beneficiaryBankCountryIso2 2х буквенный ISO-код страны банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBankCountryIso2($beneficiaryBankCountryIso2)
    {
        $this->container['beneficiaryBankCountryIso2'] = $beneficiaryBankCountryIso2;

        return $this;
    }

    /**
     * Gets beneficiaryBankName
     *
     * @return string
     */
    public function getBeneficiaryBankName()
    {
        return $this->container['beneficiaryBankName'];
    }

    /**
     * Sets beneficiaryBankName
     *
     * @param string $beneficiaryBankName Наименование банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBankName($beneficiaryBankName)
    {
        $this->container['beneficiaryBankName'] = $beneficiaryBankName;

        return $this;
    }

    /**
     * Gets beneficiaryBankPlace
     *
     * @return string
     */
    public function getBeneficiaryBankPlace()
    {
        return $this->container['beneficiaryBankPlace'];
    }

    /**
     * Sets beneficiaryBankPlace
     *
     * @param string $beneficiaryBankPlace Местонахождение банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBankPlace($beneficiaryBankPlace)
    {
        $this->container['beneficiaryBankPlace'] = $beneficiaryBankPlace;

        return $this;
    }

    /**
     * Gets beneficiaryBankSwift
     *
     * @return string
     */
    public function getBeneficiaryBankSwift()
    {
        return $this->container['beneficiaryBankSwift'];
    }

    /**
     * Sets beneficiaryBankSwift
     *
     * @param string $beneficiaryBankSwift SWIFT-код банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBankSwift($beneficiaryBankSwift)
    {
        $this->container['beneficiaryBankSwift'] = $beneficiaryBankSwift;

        return $this;
    }

    /**
     * Gets beneficiaryBeiCode
     *
     * @return string
     */
    public function getBeneficiaryBeiCode()
    {
        return $this->container['beneficiaryBeiCode'];
    }

    /**
     * Sets beneficiaryBeiCode
     *
     * @param string $beneficiaryBeiCode BEI-код (SWIFT-код) банка бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryBeiCode($beneficiaryBeiCode)
    {
        $this->container['beneficiaryBeiCode'] = $beneficiaryBeiCode;

        return $this;
    }

    /**
     * Gets beneficiaryCountryDigital
     *
     * @return string
     */
    public function getBeneficiaryCountryDigital()
    {
        return $this->container['beneficiaryCountryDigital'];
    }

    /**
     * Sets beneficiaryCountryDigital
     *
     * @param string $beneficiaryCountryDigital Цифровой код страны бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryCountryDigital($beneficiaryCountryDigital)
    {
        $this->container['beneficiaryCountryDigital'] = $beneficiaryCountryDigital;

        return $this;
    }

    /**
     * Gets beneficiaryCountryIso2
     *
     * @return string
     */
    public function getBeneficiaryCountryIso2()
    {
        return $this->container['beneficiaryCountryIso2'];
    }

    /**
     * Sets beneficiaryCountryIso2
     *
     * @param string $beneficiaryCountryIso2 2х буквенный ISO-код страны бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryCountryIso2($beneficiaryCountryIso2)
    {
        $this->container['beneficiaryCountryIso2'] = $beneficiaryCountryIso2;

        return $this;
    }

    /**
     * Gets beneficiaryCountryName
     *
     * @return string
     */
    public function getBeneficiaryCountryName()
    {
        return $this->container['beneficiaryCountryName'];
    }

    /**
     * Sets beneficiaryCountryName
     *
     * @param string $beneficiaryCountryName Наименование страны бенефициара на русском языке (краткое наименование)
     *
     * @return $this
     */
    public function setBeneficiaryCountryName($beneficiaryCountryName)
    {
        $this->container['beneficiaryCountryName'] = $beneficiaryCountryName;

        return $this;
    }

    /**
     * Gets beneficiaryInn
     *
     * @return string
     */
    public function getBeneficiaryInn()
    {
        return $this->container['beneficiaryInn'];
    }

    /**
     * Sets beneficiaryInn
     *
     * @param string $beneficiaryInn ИНН бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryInn($beneficiaryInn)
    {
        $this->container['beneficiaryInn'] = $beneficiaryInn;

        return $this;
    }

    /**
     * Gets beneficiaryName
     *
     * @return string
     */
    public function getBeneficiaryName()
    {
        return $this->container['beneficiaryName'];
    }

    /**
     * Sets beneficiaryName
     *
     * @param string $beneficiaryName Наименование бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryName($beneficiaryName)
    {
        $this->container['beneficiaryName'] = $beneficiaryName;

        return $this;
    }

    /**
     * Gets beneficiaryPlace
     *
     * @return string
     */
    public function getBeneficiaryPlace()
    {
        return $this->container['beneficiaryPlace'];
    }

    /**
     * Sets beneficiaryPlace
     *
     * @param string $beneficiaryPlace Город (месторасположение) бенефициара
     *
     * @return $this
     */
    public function setBeneficiaryPlace($beneficiaryPlace)
    {
        $this->container['beneficiaryPlace'] = $beneficiaryPlace;

        return $this;
    }

    /**
     * Gets chargesType
     *
     * @return string
     */
    public function getChargesType()
    {
        return $this->container['chargesType'];
    }

    /**
     * Sets chargesType
     *
     * @param string $chargesType Тип комиссии за перевод: BEN, SHA или OUR
     *
     * @return $this
     */
    public function setChargesType($chargesType)
    {
        $this->container['chargesType'] = $chargesType;

        return $this;
    }

    /**
     * Gets codes23e
     *
     * @return \common\models\sbbol2\Code23e[]
     */
    public function getCodes23e()
    {
        return $this->container['codes23e'];
    }

    /**
     * Sets codes23e
     *
     * @param \common\models\sbbol2\Code23e[] $codes23e 23E: Код инструкции
     *
     * @return $this
     */
    public function setCodes23e($codes23e)
    {
        $this->container['codes23e'] = $codes23e;

        return $this;
    }

    /**
     * Gets currencyCodeTransfer
     *
     * @return string
     */
    public function getCurrencyCodeTransfer()
    {
        return $this->container['currencyCodeTransfer'];
    }

    /**
     * Sets currencyCodeTransfer
     *
     * @param string $currencyCodeTransfer Цифровой код валюты перевода
     *
     * @return $this
     */
    public function setCurrencyCodeTransfer($currencyCodeTransfer)
    {
        $this->container['currencyCodeTransfer'] = $currencyCodeTransfer;

        return $this;
    }

    /**
     * Gets currencyNameTransfer
     *
     * @return string
     */
    public function getCurrencyNameTransfer()
    {
        return $this->container['currencyNameTransfer'];
    }

    /**
     * Sets currencyNameTransfer
     *
     * @param string $currencyNameTransfer ISO-код валюты перевода
     *
     * @return $this
     */
    public function setCurrencyNameTransfer($currencyNameTransfer)
    {
        $this->container['currencyNameTransfer'] = $currencyNameTransfer;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата составления документа
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets digestSignatures
     *
     * @return \common\models\sbbol2\Signature[]
     */
    public function getDigestSignatures()
    {
        return $this->container['digestSignatures'];
    }

    /**
     * Sets digestSignatures
     *
     * @param \common\models\sbbol2\Signature[] $digestSignatures Электронные подписи по дайджесту документа
     *
     * @return $this
     */
    public function setDigestSignatures($digestSignatures)
    {
        $this->container['digestSignatures'] = $digestSignatures;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Идентификатор документа в организации-партнёре (UUID)
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets factRate
     *
     * @return float
     */
    public function getFactRate()
    {
        return $this->container['factRate'];
    }

    /**
     * Sets factRate
     *
     * @param float $factRate Фактический курс конверсии
     *
     * @return $this
     */
    public function setFactRate($factRate)
    {
        $this->container['factRate'] = $factRate;

        return $this;
    }

    /**
     * Gets iMediaBankAddress
     *
     * @return string
     */
    public function getIMediaBankAddress()
    {
        return $this->container['iMediaBankAddress'];
    }

    /**
     * Sets iMediaBankAddress
     *
     * @param string $iMediaBankAddress Адрес банка-посредника
     *
     * @return $this
     */
    public function setIMediaBankAddress($iMediaBankAddress)
    {
        $this->container['iMediaBankAddress'] = $iMediaBankAddress;

        return $this;
    }

    /**
     * Gets iMediaBankCountryDigital
     *
     * @return string
     */
    public function getIMediaBankCountryDigital()
    {
        return $this->container['iMediaBankCountryDigital'];
    }

    /**
     * Sets iMediaBankCountryDigital
     *
     * @param string $iMediaBankCountryDigital Цифровой код страны банка-посредника
     *
     * @return $this
     */
    public function setIMediaBankCountryDigital($iMediaBankCountryDigital)
    {
        $this->container['iMediaBankCountryDigital'] = $iMediaBankCountryDigital;

        return $this;
    }

    /**
     * Gets iMediaBankCountryIso2
     *
     * @return string
     */
    public function getIMediaBankCountryIso2()
    {
        return $this->container['iMediaBankCountryIso2'];
    }

    /**
     * Sets iMediaBankCountryIso2
     *
     * @param string $iMediaBankCountryIso2 2х буквенный ISO-код страны банка-посредника
     *
     * @return $this
     */
    public function setIMediaBankCountryIso2($iMediaBankCountryIso2)
    {
        $this->container['iMediaBankCountryIso2'] = $iMediaBankCountryIso2;

        return $this;
    }

    /**
     * Gets iMediaBankName
     *
     * @return string
     */
    public function getIMediaBankName()
    {
        return $this->container['iMediaBankName'];
    }

    /**
     * Sets iMediaBankName
     *
     * @param string $iMediaBankName Наименование банка-посредника
     *
     * @return $this
     */
    public function setIMediaBankName($iMediaBankName)
    {
        $this->container['iMediaBankName'] = $iMediaBankName;

        return $this;
    }

    /**
     * Gets iMediaBankPlace
     *
     * @return string
     */
    public function getIMediaBankPlace()
    {
        return $this->container['iMediaBankPlace'];
    }

    /**
     * Sets iMediaBankPlace
     *
     * @param string $iMediaBankPlace Город банка-посредника
     *
     * @return $this
     */
    public function setIMediaBankPlace($iMediaBankPlace)
    {
        $this->container['iMediaBankPlace'] = $iMediaBankPlace;

        return $this;
    }

    /**
     * Gets iMediaBankSwift
     *
     * @return string
     */
    public function getIMediaBankSwift()
    {
        return $this->container['iMediaBankSwift'];
    }

    /**
     * Sets iMediaBankSwift
     *
     * @param string $iMediaBankSwift SWIFT-код банка-посредника
     *
     * @return $this
     */
    public function setIMediaBankSwift($iMediaBankSwift)
    {
        $this->container['iMediaBankSwift'] = $iMediaBankSwift;

        return $this;
    }

    /**
     * Gets iMediaClearingCode
     *
     * @return \common\models\sbbol2\ClearingCode
     */
    public function getIMediaClearingCode()
    {
        return $this->container['iMediaClearingCode'];
    }

    /**
     * Sets iMediaClearingCode
     *
     * @param \common\models\sbbol2\ClearingCode $iMediaClearingCode iMediaClearingCode
     *
     * @return $this
     */
    public function setIMediaClearingCode($iMediaClearingCode)
    {
        $this->container['iMediaClearingCode'] = $iMediaClearingCode;

        return $this;
    }

    /**
     * Gets iMediaFilialBankName
     *
     * @return string
     */
    public function getIMediaFilialBankName()
    {
        return $this->container['iMediaFilialBankName'];
    }

    /**
     * Sets iMediaFilialBankName
     *
     * @param string $iMediaFilialBankName Наименование филиала банка-посредника
     *
     * @return $this
     */
    public function setIMediaFilialBankName($iMediaFilialBankName)
    {
        $this->container['iMediaFilialBankName'] = $iMediaFilialBankName;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string $inn ИНН клиента
     *
     * @return $this
     */
    public function setInn($inn)
    {
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets linkedDocs
     *
     * @return \common\models\sbbol2\LinkedDoc[]
     */
    public function getLinkedDocs()
    {
        return $this->container['linkedDocs'];
    }

    /**
     * Sets linkedDocs
     *
     * @param \common\models\sbbol2\LinkedDoc[] $linkedDocs Связанные документы
     *
     * @return $this
     */
    public function setLinkedDocs($linkedDocs)
    {
        $this->container['linkedDocs'] = $linkedDocs;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер документа
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets option50a
     *
     * @return string
     */
    public function getOption50a()
    {
        return $this->container['option50a'];
    }

    /**
     * Sets option50a
     *
     * @param string $option50a Опция \"K\" для поля 50а
     *
     * @return $this
     */
    public function setOption50a($option50a)
    {
        $this->container['option50a'] = $option50a;

        return $this;
    }

    /**
     * Gets option56a
     *
     * @return string
     */
    public function getOption56a()
    {
        return $this->container['option56a'];
    }

    /**
     * Sets option56a
     *
     * @param string $option56a Опция \"A\", \"D\" для поля 56а
     *
     * @return $this
     */
    public function setOption56a($option56a)
    {
        $this->container['option56a'] = $option56a;

        return $this;
    }

    /**
     * Gets option57a
     *
     * @return string
     */
    public function getOption57a()
    {
        return $this->container['option57a'];
    }

    /**
     * Sets option57a
     *
     * @param string $option57a Опция \"A\", \"D\" для поля 57а
     *
     * @return $this
     */
    public function setOption57a($option57a)
    {
        $this->container['option57a'] = $option57a;

        return $this;
    }

    /**
     * Gets option59a
     *
     * @return string
     */
    public function getOption59a()
    {
        return $this->container['option59a'];
    }

    /**
     * Sets option59a
     *
     * @param string $option59a Опция \"А\" для поля 59а или «без опции»
     *
     * @return $this
     */
    public function setOption59a($option59a)
    {
        $this->container['option59a'] = $option59a;

        return $this;
    }

    /**
     * Gets orgName
     *
     * @return string
     */
    public function getOrgName()
    {
        return $this->container['orgName'];
    }

    /**
     * Sets orgName
     *
     * @param string $orgName Сокращенное наименование организации клиента
     *
     * @return $this
     */
    public function setOrgName($orgName)
    {
        $this->container['orgName'] = $orgName;

        return $this;
    }

    /**
     * Gets payerAccount
     *
     * @return string
     */
    public function getPayerAccount()
    {
        return $this->container['payerAccount'];
    }

    /**
     * Sets payerAccount
     *
     * @param string $payerAccount Счёт плательщика
     *
     * @return $this
     */
    public function setPayerAccount($payerAccount)
    {
        $this->container['payerAccount'] = $payerAccount;

        return $this;
    }

    /**
     * Gets payerAddress
     *
     * @return string
     */
    public function getPayerAddress()
    {
        return $this->container['payerAddress'];
    }

    /**
     * Sets payerAddress
     *
     * @param string $payerAddress Адрес плательщика
     *
     * @return $this
     */
    public function setPayerAddress($payerAddress)
    {
        $this->container['payerAddress'] = $payerAddress;

        return $this;
    }

    /**
     * Gets payerBankBic
     *
     * @return string
     */
    public function getPayerBankBic()
    {
        return $this->container['payerBankBic'];
    }

    /**
     * Sets payerBankBic
     *
     * @param string $payerBankBic БИК банка плательщика
     *
     * @return $this
     */
    public function setPayerBankBic($payerBankBic)
    {
        $this->container['payerBankBic'] = $payerBankBic;

        return $this;
    }

    /**
     * Gets payerBankPlace
     *
     * @return string
     */
    public function getPayerBankPlace()
    {
        return $this->container['payerBankPlace'];
    }

    /**
     * Sets payerBankPlace
     *
     * @param string $payerBankPlace Местонахождение банка плательщика
     *
     * @return $this
     */
    public function setPayerBankPlace($payerBankPlace)
    {
        $this->container['payerBankPlace'] = $payerBankPlace;

        return $this;
    }

    /**
     * Gets payerCountryDigital
     *
     * @return string
     */
    public function getPayerCountryDigital()
    {
        return $this->container['payerCountryDigital'];
    }

    /**
     * Sets payerCountryDigital
     *
     * @param string $payerCountryDigital Цифровой код страны перевододателя
     *
     * @return $this
     */
    public function setPayerCountryDigital($payerCountryDigital)
    {
        $this->container['payerCountryDigital'] = $payerCountryDigital;

        return $this;
    }

    /**
     * Gets payerCountryIso2
     *
     * @return string
     */
    public function getPayerCountryIso2()
    {
        return $this->container['payerCountryIso2'];
    }

    /**
     * Sets payerCountryIso2
     *
     * @param string $payerCountryIso2 2х буквенный ISO-код страны перевододателя
     *
     * @return $this
     */
    public function setPayerCountryIso2($payerCountryIso2)
    {
        $this->container['payerCountryIso2'] = $payerCountryIso2;

        return $this;
    }

    /**
     * Gets payerCountryName
     *
     * @return string
     */
    public function getPayerCountryName()
    {
        return $this->container['payerCountryName'];
    }

    /**
     * Sets payerCountryName
     *
     * @param string $payerCountryName Наименование страны перевододателя на русском языке (краткое наименование)
     *
     * @return $this
     */
    public function setPayerCountryName($payerCountryName)
    {
        $this->container['payerCountryName'] = $payerCountryName;

        return $this;
    }

    /**
     * Gets payerName
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payerName'];
    }

    /**
     * Sets payerName
     *
     * @param string $payerName Международное наименование плательщика
     *
     * @return $this
     */
    public function setPayerName($payerName)
    {
        $this->container['payerName'] = $payerName;

        return $this;
    }

    /**
     * Gets payerPlace
     *
     * @return string
     */
    public function getPayerPlace()
    {
        return $this->container['payerPlace'];
    }

    /**
     * Sets payerPlace
     *
     * @param string $payerPlace Город (местонахождение) плательщика
     *
     * @return $this
     */
    public function setPayerPlace($payerPlace)
    {
        $this->container['payerPlace'] = $payerPlace;

        return $this;
    }

    /**
     * Gets paymentDetails
     *
     * @return string
     */
    public function getPaymentDetails()
    {
        return $this->container['paymentDetails'];
    }

    /**
     * Sets paymentDetails
     *
     * @param string $paymentDetails Назначение платежа
     *
     * @return $this
     */
    public function setPaymentDetails($paymentDetails)
    {
        $this->container['paymentDetails'] = $paymentDetails;

        return $this;
    }

    /**
     * Gets paymentDirection
     *
     * @return string
     */
    public function getPaymentDirection()
    {
        return $this->container['paymentDirection'];
    }

    /**
     * Sets paymentDirection
     *
     * @param string $paymentDirection Направление платежа (Платёж внутри или вне СБРФ): 1-внутри, 0-вне
     *
     * @return $this
     */
    public function setPaymentDirection($paymentDirection)
    {
        $this->container['paymentDirection'] = $paymentDirection;

        return $this;
    }

    /**
     * Gets rateAgree
     *
     * @return bool
     */
    public function getRateAgree()
    {
        return $this->container['rateAgree'];
    }

    /**
     * Sets rateAgree
     *
     * @param bool $rateAgree С курсом проведения конверсионной операции согласны
     *
     * @return $this
     */
    public function setRateAgree($rateAgree)
    {
        $this->container['rateAgree'] = $rateAgree;

        return $this;
    }

    /**
     * Gets urgent
     *
     * @return bool
     */
    public function getUrgent()
    {
        return $this->container['urgent'];
    }

    /**
     * Sets urgent
     *
     * @param bool $urgent Срочность
     *
     * @return $this
     */
    public function setUrgent($urgent)
    {
        $this->container['urgent'] = $urgent;

        return $this;
    }

    /**
     * Gets valueDate
     *
     * @return \DateTime
     */
    public function getValueDate()
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate
     *
     * @param \DateTime $valueDate Дата валютирования/возврата
     *
     * @return $this
     */
    public function setValueDate($valueDate)
    {
        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
