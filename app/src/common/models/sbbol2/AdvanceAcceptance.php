<?php
/**
 * AdvanceAcceptance
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * AdvanceAcceptance Class Doc Comment
 *
 * @category Class
 * @description Информация о заранее данном акцепте
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class AdvanceAcceptance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'AdvanceAcceptance';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'bundles' => '\common\models\sbbol2\AdvanceAcceptanceBundle[]',
        'payerAccount' => 'string',
        'payerBankBic' => 'string',
        'payerBankCorrAccount' => 'string',
        'payerInn' => 'string',
        'payerName' => 'string',
        'payerOrgIdHash' => 'string',
        'purpose' => 'string',
        'sinceDate' => '\DateTime',
        'untilDate' => '\DateTime',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'active' => null,
        'bundles' => null,
        'payerAccount' => null,
        'payerBankBic' => null,
        'payerBankCorrAccount' => null,
        'payerInn' => null,
        'payerName' => null,
        'payerOrgIdHash' => null,
        'purpose' => null,
        'sinceDate' => 'date-time',
        'untilDate' => 'date-time',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'bundles' => 'bundles',
        'payerAccount' => 'payerAccount',
        'payerBankBic' => 'payerBankBic',
        'payerBankCorrAccount' => 'payerBankCorrAccount',
        'payerInn' => 'payerInn',
        'payerName' => 'payerName',
        'payerOrgIdHash' => 'payerOrgIdHash',
        'purpose' => 'purpose',
        'sinceDate' => 'sinceDate',
        'untilDate' => 'untilDate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'bundles' => 'setBundles',
        'payerAccount' => 'setPayerAccount',
        'payerBankBic' => 'setPayerBankBic',
        'payerBankCorrAccount' => 'setPayerBankCorrAccount',
        'payerInn' => 'setPayerInn',
        'payerName' => 'setPayerName',
        'payerOrgIdHash' => 'setPayerOrgIdHash',
        'purpose' => 'setPurpose',
        'sinceDate' => 'setSinceDate',
        'untilDate' => 'setUntilDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'bundles' => 'getBundles',
        'payerAccount' => 'getPayerAccount',
        'payerBankBic' => 'getPayerBankBic',
        'payerBankCorrAccount' => 'getPayerBankCorrAccount',
        'payerInn' => 'getPayerInn',
        'payerName' => 'getPayerName',
        'payerOrgIdHash' => 'getPayerOrgIdHash',
        'purpose' => 'getPurpose',
        'sinceDate' => 'getSinceDate',
        'untilDate' => 'getUntilDate',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['bundles'] = isset($data['bundles']) ? $data['bundles'] : null;
        $this->container['payerAccount'] = isset($data['payerAccount']) ? $data['payerAccount'] : null;
        $this->container['payerBankBic'] = isset($data['payerBankBic']) ? $data['payerBankBic'] : null;
        $this->container['payerBankCorrAccount'] = isset($data['payerBankCorrAccount']) ? $data['payerBankCorrAccount'] : null;
        $this->container['payerInn'] = isset($data['payerInn']) ? $data['payerInn'] : null;
        $this->container['payerName'] = isset($data['payerName']) ? $data['payerName'] : null;
        $this->container['payerOrgIdHash'] = isset($data['payerOrgIdHash']) ? $data['payerOrgIdHash'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['sinceDate'] = isset($data['sinceDate']) ? $data['sinceDate'] : null;
        $this->container['untilDate'] = isset($data['untilDate']) ? $data['untilDate'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Признак активности ЗДА
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets bundles
     *
     * @return \common\models\sbbol2\AdvanceAcceptanceBundle[]
     */
    public function getBundles()
    {
        return $this->container['bundles'];
    }

    /**
     * Sets bundles
     *
     * @param \common\models\sbbol2\AdvanceAcceptanceBundle[] $bundles Пакеты услуг
     *
     * @return $this
     */
    public function setBundles($bundles)
    {
        $this->container['bundles'] = $bundles;

        return $this;
    }

    /**
     * Gets payerAccount
     *
     * @return string
     */
    public function getPayerAccount()
    {
        return $this->container['payerAccount'];
    }

    /**
     * Sets payerAccount
     *
     * @param string $payerAccount Счёт плательщика
     *
     * @return $this
     */
    public function setPayerAccount($payerAccount)
    {
        $this->container['payerAccount'] = $payerAccount;

        return $this;
    }

    /**
     * Gets payerBankBic
     *
     * @return string
     */
    public function getPayerBankBic()
    {
        return $this->container['payerBankBic'];
    }

    /**
     * Sets payerBankBic
     *
     * @param string $payerBankBic БИК банка плательщика
     *
     * @return $this
     */
    public function setPayerBankBic($payerBankBic)
    {
        $this->container['payerBankBic'] = $payerBankBic;

        return $this;
    }

    /**
     * Gets payerBankCorrAccount
     *
     * @return string
     */
    public function getPayerBankCorrAccount()
    {
        return $this->container['payerBankCorrAccount'];
    }

    /**
     * Sets payerBankCorrAccount
     *
     * @param string $payerBankCorrAccount Корсчёт банка плательщика
     *
     * @return $this
     */
    public function setPayerBankCorrAccount($payerBankCorrAccount)
    {
        $this->container['payerBankCorrAccount'] = $payerBankCorrAccount;

        return $this;
    }

    /**
     * Gets payerInn
     *
     * @return string
     */
    public function getPayerInn()
    {
        return $this->container['payerInn'];
    }

    /**
     * Sets payerInn
     *
     * @param string $payerInn ИНН плательщика
     *
     * @return $this
     */
    public function setPayerInn($payerInn)
    {
        $this->container['payerInn'] = $payerInn;

        return $this;
    }

    /**
     * Gets payerName
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payerName'];
    }

    /**
     * Sets payerName
     *
     * @param string $payerName Наименование плательщика
     *
     * @return $this
     */
    public function setPayerName($payerName)
    {
        $this->container['payerName'] = $payerName;

        return $this;
    }

    /**
     * Gets payerOrgIdHash
     *
     * @return string
     */
    public function getPayerOrgIdHash()
    {
        return $this->container['payerOrgIdHash'];
    }

    /**
     * Sets payerOrgIdHash
     *
     * @param string $payerOrgIdHash Идентификатор организации плательщика
     *
     * @return $this
     */
    public function setPayerOrgIdHash($payerOrgIdHash)
    {
        $this->container['payerOrgIdHash'] = $payerOrgIdHash;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose Назначение платежа
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets sinceDate
     *
     * @return \DateTime
     */
    public function getSinceDate()
    {
        return $this->container['sinceDate'];
    }

    /**
     * Sets sinceDate
     *
     * @param \DateTime $sinceDate Дата начала действия заранее данного акцепта
     *
     * @return $this
     */
    public function setSinceDate($sinceDate)
    {
        $this->container['sinceDate'] = $sinceDate;

        return $this;
    }

    /**
     * Gets untilDate
     *
     * @return \DateTime
     */
    public function getUntilDate()
    {
        return $this->container['untilDate'];
    }

    /**
     * Sets untilDate
     *
     * @param \DateTime $untilDate Дата окончания действия заранее данного акцепта
     *
     * @return $this
     */
    public function setUntilDate($untilDate)
    {
        $this->container['untilDate'] = $untilDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
