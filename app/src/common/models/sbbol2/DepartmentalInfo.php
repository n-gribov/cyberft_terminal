<?php
/**
 * DepartmentalInfo
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * DepartmentalInfo Class Doc Comment
 *
 * @category Class
 * @description Реквизиты налогового, таможенного или иного бюджетного платежа
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class DepartmentalInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DepartmentalInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'uip' => 'string',
        'drawerStatus101' => 'string',
        'kbk' => 'string',
        'oktmo' => 'string',
        'reasonCode106' => 'string',
        'taxPeriod107' => 'string',
        'docNumber108' => 'string',
        'docDate109' => 'string',
        'paymentKind110' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'uip' => null,
        'drawerStatus101' => null,
        'kbk' => null,
        'oktmo' => null,
        'reasonCode106' => null,
        'taxPeriod107' => null,
        'docNumber108' => null,
        'docDate109' => null,
        'paymentKind110' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uip' => 'uip',
        'drawerStatus101' => 'drawerStatus101',
        'kbk' => 'kbk',
        'oktmo' => 'oktmo',
        'reasonCode106' => 'reasonCode106',
        'taxPeriod107' => 'taxPeriod107',
        'docNumber108' => 'docNumber108',
        'docDate109' => 'docDate109',
        'paymentKind110' => 'paymentKind110',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uip' => 'setUip',
        'drawerStatus101' => 'setDrawerStatus101',
        'kbk' => 'setKbk',
        'oktmo' => 'setOktmo',
        'reasonCode106' => 'setReasonCode106',
        'taxPeriod107' => 'setTaxPeriod107',
        'docNumber108' => 'setDocNumber108',
        'docDate109' => 'setDocDate109',
        'paymentKind110' => 'setPaymentKind110',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uip' => 'getUip',
        'drawerStatus101' => 'getDrawerStatus101',
        'kbk' => 'getKbk',
        'oktmo' => 'getOktmo',
        'reasonCode106' => 'getReasonCode106',
        'taxPeriod107' => 'getTaxPeriod107',
        'docNumber108' => 'getDocNumber108',
        'docDate109' => 'getDocDate109',
        'paymentKind110' => 'getPaymentKind110',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uip'] = isset($data['uip']) ? $data['uip'] : null;
        $this->container['drawerStatus101'] = isset($data['drawerStatus101']) ? $data['drawerStatus101'] : null;
        $this->container['kbk'] = isset($data['kbk']) ? $data['kbk'] : null;
        $this->container['oktmo'] = isset($data['oktmo']) ? $data['oktmo'] : null;
        $this->container['reasonCode106'] = isset($data['reasonCode106']) ? $data['reasonCode106'] : null;
        $this->container['taxPeriod107'] = isset($data['taxPeriod107']) ? $data['taxPeriod107'] : null;
        $this->container['docNumber108'] = isset($data['docNumber108']) ? $data['docNumber108'] : null;
        $this->container['docDate109'] = isset($data['docDate109']) ? $data['docDate109'] : null;
        $this->container['paymentKind110'] = isset($data['paymentKind110']) ? $data['paymentKind110'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uip'] === null) {
            $invalidProperties[] = "'uip' can't be null";
        }
        if ($this->container['drawerStatus101'] === null) {
            $invalidProperties[] = "'drawerStatus101' can't be null";
        }
        if ($this->container['kbk'] === null) {
            $invalidProperties[] = "'kbk' can't be null";
        }
        if ($this->container['oktmo'] === null) {
            $invalidProperties[] = "'oktmo' can't be null";
        }
        if ($this->container['reasonCode106'] === null) {
            $invalidProperties[] = "'reasonCode106' can't be null";
        }
        if ($this->container['taxPeriod107'] === null) {
            $invalidProperties[] = "'taxPeriod107' can't be null";
        }
        if ($this->container['docNumber108'] === null) {
            $invalidProperties[] = "'docNumber108' can't be null";
        }
        if ($this->container['docDate109'] === null) {
            $invalidProperties[] = "'docDate109' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets uip
     *
     * @return string
     */
    public function getUip()
    {
        return $this->container['uip'];
    }

    /**
     * Sets uip
     *
     * @param string $uip Уникальный идентификатор платежа
     *
     * @return $this
     */
    public function setUip($uip)
    {
        $this->container['uip'] = $uip;

        return $this;
    }

    /**
     * Gets drawerStatus101
     *
     * @return string
     */
    public function getDrawerStatus101()
    {
        return $this->container['drawerStatus101'];
    }

    /**
     * Sets drawerStatus101
     *
     * @param string $drawerStatus101 Показатель статуса налогоплательщика (реквизит - 101)
     *
     * @return $this
     */
    public function setDrawerStatus101($drawerStatus101)
    {
        $this->container['drawerStatus101'] = $drawerStatus101;

        return $this;
    }

    /**
     * Gets kbk
     *
     * @return string
     */
    public function getKbk()
    {
        return $this->container['kbk'];
    }

    /**
     * Sets kbk
     *
     * @param string $kbk Код бюджетной классификации (реквизит - 104)
     *
     * @return $this
     */
    public function setKbk($kbk)
    {
        $this->container['kbk'] = $kbk;

        return $this;
    }

    /**
     * Gets oktmo
     *
     * @return string
     */
    public function getOktmo()
    {
        return $this->container['oktmo'];
    }

    /**
     * Sets oktmo
     *
     * @param string $oktmo Код OKTMO (реквизит - 105)
     *
     * @return $this
     */
    public function setOktmo($oktmo)
    {
        $this->container['oktmo'] = $oktmo;

        return $this;
    }

    /**
     * Gets reasonCode106
     *
     * @return string
     */
    public function getReasonCode106()
    {
        return $this->container['reasonCode106'];
    }

    /**
     * Sets reasonCode106
     *
     * @param string $reasonCode106 Показатель основания платежа (реквизит - 106)
     *
     * @return $this
     */
    public function setReasonCode106($reasonCode106)
    {
        $this->container['reasonCode106'] = $reasonCode106;

        return $this;
    }

    /**
     * Gets taxPeriod107
     *
     * @return string
     */
    public function getTaxPeriod107()
    {
        return $this->container['taxPeriod107'];
    }

    /**
     * Sets taxPeriod107
     *
     * @param string $taxPeriod107 Налоговый период / код таможенного органа (реквизит - 107)
     *
     * @return $this
     */
    public function setTaxPeriod107($taxPeriod107)
    {
        $this->container['taxPeriod107'] = $taxPeriod107;

        return $this;
    }

    /**
     * Gets docNumber108
     *
     * @return string
     */
    public function getDocNumber108()
    {
        return $this->container['docNumber108'];
    }

    /**
     * Sets docNumber108
     *
     * @param string $docNumber108 Номер налогового документа (реквизит - 108)
     *
     * @return $this
     */
    public function setDocNumber108($docNumber108)
    {
        $this->container['docNumber108'] = $docNumber108;

        return $this;
    }

    /**
     * Gets docDate109
     *
     * @return string
     */
    public function getDocDate109()
    {
        return $this->container['docDate109'];
    }

    /**
     * Sets docDate109
     *
     * @param string $docDate109 Дата налогового документа (реквизит - 109)
     *
     * @return $this
     */
    public function setDocDate109($docDate109)
    {
        $this->container['docDate109'] = $docDate109;

        return $this;
    }

    /**
     * Gets paymentKind110
     *
     * @return string
     */
    public function getPaymentKind110()
    {
        return $this->container['paymentKind110'];
    }

    /**
     * Sets paymentKind110
     *
     * @param string $paymentKind110 Тип налогового платежа (реквизит - 110)
     *
     * @return $this
     */
    public function setPaymentKind110($paymentKind110)
    {
        $this->container['paymentKind110'] = $paymentKind110;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
