<?php
/**
 * CartInfo
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * CartInfo Class Doc Comment
 *
 * @category Class
 * @description Дополнительная информация о документе (картотека)
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class CartInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CartInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'documentCode' => 'string',
        'documentContent' => 'string',
        'documentDate' => '\DateTime',
        'documentNumber' => 'string',
        'paymentNumber' => 'string',
        'restAmount' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'documentCode' => null,
        'documentContent' => null,
        'documentDate' => 'date-time',
        'documentNumber' => null,
        'paymentNumber' => null,
        'restAmount' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'documentCode' => 'documentCode',
        'documentContent' => 'documentContent',
        'documentDate' => 'documentDate',
        'documentNumber' => 'documentNumber',
        'paymentNumber' => 'paymentNumber',
        'restAmount' => 'restAmount',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'documentCode' => 'setDocumentCode',
        'documentContent' => 'setDocumentContent',
        'documentDate' => 'setDocumentDate',
        'documentNumber' => 'setDocumentNumber',
        'paymentNumber' => 'setPaymentNumber',
        'restAmount' => 'setRestAmount',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'documentCode' => 'getDocumentCode',
        'documentContent' => 'getDocumentContent',
        'documentDate' => 'getDocumentDate',
        'documentNumber' => 'getDocumentNumber',
        'paymentNumber' => 'getPaymentNumber',
        'restAmount' => 'getRestAmount',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['documentCode'] = isset($data['documentCode']) ? $data['documentCode'] : null;
        $this->container['documentContent'] = isset($data['documentContent']) ? $data['documentContent'] : null;
        $this->container['documentDate'] = isset($data['documentDate']) ? $data['documentDate'] : null;
        $this->container['documentNumber'] = isset($data['documentNumber']) ? $data['documentNumber'] : null;
        $this->container['paymentNumber'] = isset($data['paymentNumber']) ? $data['paymentNumber'] : null;
        $this->container['restAmount'] = isset($data['restAmount']) ? $data['restAmount'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets documentCode
     *
     * @return string
     */
    public function getDocumentCode()
    {
        return $this->container['documentCode'];
    }

    /**
     * Sets documentCode
     *
     * @param string $documentCode Шифр документа (картотека) (для 16)
     *
     * @return $this
     */
    public function setDocumentCode($documentCode)
    {
        $this->container['documentCode'] = $documentCode;

        return $this;
    }

    /**
     * Gets documentContent
     *
     * @return string
     */
    public function getDocumentContent()
    {
        return $this->container['documentContent'];
    }

    /**
     * Sets documentContent
     *
     * @param string $documentContent Содержание операции (для 16)
     *
     * @return $this
     */
    public function setDocumentContent($documentContent)
    {
        $this->container['documentContent'] = $documentContent;

        return $this;
    }

    /**
     * Gets documentDate
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['documentDate'];
    }

    /**
     * Sets documentDate
     *
     * @param \DateTime $documentDate Дата документа (картотека) (для 16)
     *
     * @return $this
     */
    public function setDocumentDate($documentDate)
    {
        $this->container['documentDate'] = $documentDate;

        return $this;
    }

    /**
     * Gets documentNumber
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['documentNumber'];
    }

    /**
     * Sets documentNumber
     *
     * @param string $documentNumber Номер документа (картотека) (для 16)
     *
     * @return $this
     */
    public function setDocumentNumber($documentNumber)
    {
        $this->container['documentNumber'] = $documentNumber;

        return $this;
    }

    /**
     * Gets paymentNumber
     *
     * @return string
     */
    public function getPaymentNumber()
    {
        return $this->container['paymentNumber'];
    }

    /**
     * Sets paymentNumber
     *
     * @param string $paymentNumber Номер платежа (картотека) (для 16)
     *
     * @return $this
     */
    public function setPaymentNumber($paymentNumber)
    {
        $this->container['paymentNumber'] = $paymentNumber;

        return $this;
    }

    /**
     * Gets restAmount
     *
     * @return float
     */
    public function getRestAmount()
    {
        return $this->container['restAmount'];
    }

    /**
     * Sets restAmount
     *
     * @param float $restAmount Сумма остатка платежа (картотека) (для 16)
     *
     * @return $this
     */
    public function setRestAmount($restAmount)
    {
        $this->container['restAmount'] = $restAmount;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
