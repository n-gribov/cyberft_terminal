<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @description Адрес клиента
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Address';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'area' => 'string',
        'building' => 'string',
        'city' => 'string',
        'comment' => 'string',
        'country' => 'string',
        'flat' => 'string',
        'fullAddress' => 'string',
        'house' => 'string',
        'region' => 'string',
        'settlement' => 'string',
        'settlementType' => 'string',
        'street' => 'string',
        'type' => 'string',
        'zip' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'area' => null,
        'building' => null,
        'city' => null,
        'comment' => null,
        'country' => null,
        'flat' => null,
        'fullAddress' => null,
        'house' => null,
        'region' => null,
        'settlement' => null,
        'settlementType' => null,
        'street' => null,
        'type' => null,
        'zip' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'area' => 'area',
        'building' => 'building',
        'city' => 'city',
        'comment' => 'comment',
        'country' => 'country',
        'flat' => 'flat',
        'fullAddress' => 'fullAddress',
        'house' => 'house',
        'region' => 'region',
        'settlement' => 'settlement',
        'settlementType' => 'settlementType',
        'street' => 'street',
        'type' => 'type',
        'zip' => 'zip',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'area' => 'setArea',
        'building' => 'setBuilding',
        'city' => 'setCity',
        'comment' => 'setComment',
        'country' => 'setCountry',
        'flat' => 'setFlat',
        'fullAddress' => 'setFullAddress',
        'house' => 'setHouse',
        'region' => 'setRegion',
        'settlement' => 'setSettlement',
        'settlementType' => 'setSettlementType',
        'street' => 'setStreet',
        'type' => 'setType',
        'zip' => 'setZip',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'area' => 'getArea',
        'building' => 'getBuilding',
        'city' => 'getCity',
        'comment' => 'getComment',
        'country' => 'getCountry',
        'flat' => 'getFlat',
        'fullAddress' => 'getFullAddress',
        'house' => 'getHouse',
        'region' => 'getRegion',
        'settlement' => 'getSettlement',
        'settlementType' => 'getSettlementType',
        'street' => 'getStreet',
        'type' => 'getType',
        'zip' => 'getZip',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['building'] = isset($data['building']) ? $data['building'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['flat'] = isset($data['flat']) ? $data['flat'] : null;
        $this->container['fullAddress'] = isset($data['fullAddress']) ? $data['fullAddress'] : null;
        $this->container['house'] = isset($data['house']) ? $data['house'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['settlement'] = isset($data['settlement']) ? $data['settlement'] : null;
        $this->container['settlementType'] = isset($data['settlementType']) ? $data['settlementType'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets area
     *
     * @return string
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string $area Район
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets building
     *
     * @return string
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     *
     * @param string $building Строение, корпус
     *
     * @return $this
     */
    public function setBuilding($building)
    {
        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Город
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Примечание
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Цифровой код страны
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets flat
     *
     * @return string
     */
    public function getFlat()
    {
        return $this->container['flat'];
    }

    /**
     * Sets flat
     *
     * @param string $flat Квартира
     *
     * @return $this
     */
    public function setFlat($flat)
    {
        $this->container['flat'] = $flat;

        return $this;
    }

    /**
     * Gets fullAddress
     *
     * @return string
     */
    public function getFullAddress()
    {
        return $this->container['fullAddress'];
    }

    /**
     * Sets fullAddress
     *
     * @param string $fullAddress Адрес
     *
     * @return $this
     */
    public function setFullAddress($fullAddress)
    {
        $this->container['fullAddress'] = $fullAddress;

        return $this;
    }

    /**
     * Gets house
     *
     * @return string
     */
    public function getHouse()
    {
        return $this->container['house'];
    }

    /**
     * Sets house
     *
     * @param string $house Дом
     *
     * @return $this
     */
    public function setHouse($house)
    {
        $this->container['house'] = $house;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Субъект или регион
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets settlement
     *
     * @return string
     */
    public function getSettlement()
    {
        return $this->container['settlement'];
    }

    /**
     * Sets settlement
     *
     * @param string $settlement Населенный пункт
     *
     * @return $this
     */
    public function setSettlement($settlement)
    {
        $this->container['settlement'] = $settlement;

        return $this;
    }

    /**
     * Gets settlementType
     *
     * @return string
     */
    public function getSettlementType()
    {
        return $this->container['settlementType'];
    }

    /**
     * Sets settlementType
     *
     * @param string $settlementType Тип населенного пункта
     *
     * @return $this
     */
    public function setSettlementType($settlementType)
    {
        $this->container['settlementType'] = $settlementType;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Улица
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Наименование типа адреса
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip Индекс
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
