<?php
/**
 * SalaryAgreement
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * SalaryAgreement Class Doc Comment
 *
 * @category Class
 * @description Зарплатный договор
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SalaryAgreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'SalaryAgreement';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'admissionValueTypes' => '\common\models\sbbol2\SalaryAgreementAdmissionValueType[]',
        'branchBic' => 'string',
        'branchName' => 'string',
        'cardTypes' => '\common\models\sbbol2\SalaryAgreementCardType[]',
        'contractEndDate' => '\DateTime',
        'contractNumber' => 'string',
        'contractStartDate' => '\DateTime',
        'isReserve' => 'bool',
        'orgTaxNumber' => 'string',
        'osb' => 'string',
        'placesOfService' => '\common\models\sbbol2\SalaryAgreementPlaceOfService[]',
        'tb' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'admissionValueTypes' => null,
        'branchBic' => null,
        'branchName' => null,
        'cardTypes' => null,
        'contractEndDate' => 'date-time',
        'contractNumber' => null,
        'contractStartDate' => 'date-time',
        'isReserve' => null,
        'orgTaxNumber' => null,
        'osb' => null,
        'placesOfService' => null,
        'tb' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admissionValueTypes' => 'admissionValueTypes',
        'branchBic' => 'branchBic',
        'branchName' => 'branchName',
        'cardTypes' => 'cardTypes',
        'contractEndDate' => 'contractEndDate',
        'contractNumber' => 'contractNumber',
        'contractStartDate' => 'contractStartDate',
        'isReserve' => 'isReserve',
        'orgTaxNumber' => 'orgTaxNumber',
        'osb' => 'osb',
        'placesOfService' => 'placesOfService',
        'tb' => 'tb',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admissionValueTypes' => 'setAdmissionValueTypes',
        'branchBic' => 'setBranchBic',
        'branchName' => 'setBranchName',
        'cardTypes' => 'setCardTypes',
        'contractEndDate' => 'setContractEndDate',
        'contractNumber' => 'setContractNumber',
        'contractStartDate' => 'setContractStartDate',
        'isReserve' => 'setIsReserve',
        'orgTaxNumber' => 'setOrgTaxNumber',
        'osb' => 'setOsb',
        'placesOfService' => 'setPlacesOfService',
        'tb' => 'setTb',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admissionValueTypes' => 'getAdmissionValueTypes',
        'branchBic' => 'getBranchBic',
        'branchName' => 'getBranchName',
        'cardTypes' => 'getCardTypes',
        'contractEndDate' => 'getContractEndDate',
        'contractNumber' => 'getContractNumber',
        'contractStartDate' => 'getContractStartDate',
        'isReserve' => 'getIsReserve',
        'orgTaxNumber' => 'getOrgTaxNumber',
        'osb' => 'getOsb',
        'placesOfService' => 'getPlacesOfService',
        'tb' => 'getTb',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['admissionValueTypes'] = isset($data['admissionValueTypes']) ? $data['admissionValueTypes'] : null;
        $this->container['branchBic'] = isset($data['branchBic']) ? $data['branchBic'] : null;
        $this->container['branchName'] = isset($data['branchName']) ? $data['branchName'] : null;
        $this->container['cardTypes'] = isset($data['cardTypes']) ? $data['cardTypes'] : null;
        $this->container['contractEndDate'] = isset($data['contractEndDate']) ? $data['contractEndDate'] : null;
        $this->container['contractNumber'] = isset($data['contractNumber']) ? $data['contractNumber'] : null;
        $this->container['contractStartDate'] = isset($data['contractStartDate']) ? $data['contractStartDate'] : null;
        $this->container['isReserve'] = isset($data['isReserve']) ? $data['isReserve'] : null;
        $this->container['orgTaxNumber'] = isset($data['orgTaxNumber']) ? $data['orgTaxNumber'] : null;
        $this->container['osb'] = isset($data['osb']) ? $data['osb'] : null;
        $this->container['placesOfService'] = isset($data['placesOfService']) ? $data['placesOfService'] : null;
        $this->container['tb'] = isset($data['tb']) ? $data['tb'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets admissionValueTypes
     *
     * @return \common\models\sbbol2\SalaryAgreementAdmissionValueType[]
     */
    public function getAdmissionValueTypes()
    {
        return $this->container['admissionValueTypes'];
    }

    /**
     * Sets admissionValueTypes
     *
     * @param \common\models\sbbol2\SalaryAgreementAdmissionValueType[] $admissionValueTypes Виды зачислений
     *
     * @return $this
     */
    public function setAdmissionValueTypes($admissionValueTypes)
    {
        $this->container['admissionValueTypes'] = $admissionValueTypes;

        return $this;
    }

    /**
     * Gets branchBic
     *
     * @return string
     */
    public function getBranchBic()
    {
        return $this->container['branchBic'];
    }

    /**
     * Sets branchBic
     *
     * @param string $branchBic БИК подразделения
     *
     * @return $this
     */
    public function setBranchBic($branchBic)
    {
        $this->container['branchBic'] = $branchBic;

        return $this;
    }

    /**
     * Gets branchName
     *
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName
     *
     * @param string $branchName Наименование подразделения
     *
     * @return $this
     */
    public function setBranchName($branchName)
    {
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets cardTypes
     *
     * @return \common\models\sbbol2\SalaryAgreementCardType[]
     */
    public function getCardTypes()
    {
        return $this->container['cardTypes'];
    }

    /**
     * Sets cardTypes
     *
     * @param \common\models\sbbol2\SalaryAgreementCardType[] $cardTypes Типы пластиковых карт
     *
     * @return $this
     */
    public function setCardTypes($cardTypes)
    {
        $this->container['cardTypes'] = $cardTypes;

        return $this;
    }

    /**
     * Gets contractEndDate
     *
     * @return \DateTime
     */
    public function getContractEndDate()
    {
        return $this->container['contractEndDate'];
    }

    /**
     * Sets contractEndDate
     *
     * @param \DateTime $contractEndDate Дата окончания действия договора
     *
     * @return $this
     */
    public function setContractEndDate($contractEndDate)
    {
        $this->container['contractEndDate'] = $contractEndDate;

        return $this;
    }

    /**
     * Gets contractNumber
     *
     * @return string
     */
    public function getContractNumber()
    {
        return $this->container['contractNumber'];
    }

    /**
     * Sets contractNumber
     *
     * @param string $contractNumber Номер договора
     *
     * @return $this
     */
    public function setContractNumber($contractNumber)
    {
        $this->container['contractNumber'] = $contractNumber;

        return $this;
    }

    /**
     * Gets contractStartDate
     *
     * @return \DateTime
     */
    public function getContractStartDate()
    {
        return $this->container['contractStartDate'];
    }

    /**
     * Sets contractStartDate
     *
     * @param \DateTime $contractStartDate Дата начала действия договора
     *
     * @return $this
     */
    public function setContractStartDate($contractStartDate)
    {
        $this->container['contractStartDate'] = $contractStartDate;

        return $this;
    }

    /**
     * Gets isReserve
     *
     * @return bool
     */
    public function getIsReserve()
    {
        return $this->container['isReserve'];
    }

    /**
     * Sets isReserve
     *
     * @param bool $isReserve Признак резервирования
     *
     * @return $this
     */
    public function setIsReserve($isReserve)
    {
        $this->container['isReserve'] = $isReserve;

        return $this;
    }

    /**
     * Gets orgTaxNumber
     *
     * @return string
     */
    public function getOrgTaxNumber()
    {
        return $this->container['orgTaxNumber'];
    }

    /**
     * Sets orgTaxNumber
     *
     * @param string $orgTaxNumber ИНН организации клиента
     *
     * @return $this
     */
    public function setOrgTaxNumber($orgTaxNumber)
    {
        $this->container['orgTaxNumber'] = $orgTaxNumber;

        return $this;
    }

    /**
     * Gets osb
     *
     * @return string
     */
    public function getOsb()
    {
        return $this->container['osb'];
    }

    /**
     * Sets osb
     *
     * @param string $osb Номер отделения сберегательного банка
     *
     * @return $this
     */
    public function setOsb($osb)
    {
        $this->container['osb'] = $osb;

        return $this;
    }

    /**
     * Gets placesOfService
     *
     * @return \common\models\sbbol2\SalaryAgreementPlaceOfService[]
     */
    public function getPlacesOfService()
    {
        return $this->container['placesOfService'];
    }

    /**
     * Sets placesOfService
     *
     * @param \common\models\sbbol2\SalaryAgreementPlaceOfService[] $placesOfService Места обслуживания
     *
     * @return $this
     */
    public function setPlacesOfService($placesOfService)
    {
        $this->container['placesOfService'] = $placesOfService;

        return $this;
    }

    /**
     * Gets tb
     *
     * @return string
     */
    public function getTb()
    {
        return $this->container['tb'];
    }

    /**
     * Sets tb
     *
     * @param string $tb Номер территориального банка
     *
     * @return $this
     */
    public function setTb($tb)
    {
        $this->container['tb'] = $tb;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
