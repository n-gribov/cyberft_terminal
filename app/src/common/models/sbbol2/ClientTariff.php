<?php
/**
 * ClientTariff
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * ClientTariff Class Doc Comment
 *
 * @category Class
 * @description Тариф пользователя по подключённому сервису
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ClientTariff implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ClientTariff';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'activationDate' => '\DateTime',
        'code' => 'string',
        'description' => 'string',
        'expireDate' => '\DateTime',
        'expireTrialModeDate' => '\DateTime',
        'name' => 'string',
        'plannedPaymentDate' => '\DateTime',
        'rateAmount' => 'float',
        'ratePeriodMonths' => 'int',
        'tokenUrl' => 'string',
        'trialMode' => 'bool',
        'url' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'activationDate' => 'date-time',
        'code' => null,
        'description' => null,
        'expireDate' => 'date-time',
        'expireTrialModeDate' => 'date-time',
        'name' => null,
        'plannedPaymentDate' => 'date-time',
        'rateAmount' => null,
        'ratePeriodMonths' => 'int32',
        'tokenUrl' => null,
        'trialMode' => null,
        'url' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activationDate' => 'activationDate',
        'code' => 'code',
        'description' => 'description',
        'expireDate' => 'expireDate',
        'expireTrialModeDate' => 'expireTrialModeDate',
        'name' => 'name',
        'plannedPaymentDate' => 'plannedPaymentDate',
        'rateAmount' => 'rateAmount',
        'ratePeriodMonths' => 'ratePeriodMonths',
        'tokenUrl' => 'tokenUrl',
        'trialMode' => 'trialMode',
        'url' => 'url',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activationDate' => 'setActivationDate',
        'code' => 'setCode',
        'description' => 'setDescription',
        'expireDate' => 'setExpireDate',
        'expireTrialModeDate' => 'setExpireTrialModeDate',
        'name' => 'setName',
        'plannedPaymentDate' => 'setPlannedPaymentDate',
        'rateAmount' => 'setRateAmount',
        'ratePeriodMonths' => 'setRatePeriodMonths',
        'tokenUrl' => 'setTokenUrl',
        'trialMode' => 'setTrialMode',
        'url' => 'setUrl',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activationDate' => 'getActivationDate',
        'code' => 'getCode',
        'description' => 'getDescription',
        'expireDate' => 'getExpireDate',
        'expireTrialModeDate' => 'getExpireTrialModeDate',
        'name' => 'getName',
        'plannedPaymentDate' => 'getPlannedPaymentDate',
        'rateAmount' => 'getRateAmount',
        'ratePeriodMonths' => 'getRatePeriodMonths',
        'tokenUrl' => 'getTokenUrl',
        'trialMode' => 'getTrialMode',
        'url' => 'getUrl',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activationDate'] = isset($data['activationDate']) ? $data['activationDate'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expireDate'] = isset($data['expireDate']) ? $data['expireDate'] : null;
        $this->container['expireTrialModeDate'] = isset($data['expireTrialModeDate']) ? $data['expireTrialModeDate'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['plannedPaymentDate'] = isset($data['plannedPaymentDate']) ? $data['plannedPaymentDate'] : null;
        $this->container['rateAmount'] = isset($data['rateAmount']) ? $data['rateAmount'] : null;
        $this->container['ratePeriodMonths'] = isset($data['ratePeriodMonths']) ? $data['ratePeriodMonths'] : null;
        $this->container['tokenUrl'] = isset($data['tokenUrl']) ? $data['tokenUrl'] : null;
        $this->container['trialMode'] = isset($data['trialMode']) ? $data['trialMode'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets activationDate
     *
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activationDate'];
    }

    /**
     * Sets activationDate
     *
     * @param \DateTime $activationDate Дата активации тарифа
     *
     * @return $this
     */
    public function setActivationDate($activationDate)
    {
        $this->container['activationDate'] = $activationDate;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Код тарифа
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Описание тарифа
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expireDate
     *
     * @return \DateTime
     */
    public function getExpireDate()
    {
        return $this->container['expireDate'];
    }

    /**
     * Sets expireDate
     *
     * @param \DateTime $expireDate Дата окончания тарифа
     *
     * @return $this
     */
    public function setExpireDate($expireDate)
    {
        $this->container['expireDate'] = $expireDate;

        return $this;
    }

    /**
     * Gets expireTrialModeDate
     *
     * @return \DateTime
     */
    public function getExpireTrialModeDate()
    {
        return $this->container['expireTrialModeDate'];
    }

    /**
     * Sets expireTrialModeDate
     *
     * @param \DateTime $expireTrialModeDate Дата завершения триального периода
     *
     * @return $this
     */
    public function setExpireTrialModeDate($expireTrialModeDate)
    {
        $this->container['expireTrialModeDate'] = $expireTrialModeDate;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Наименование тарифа
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plannedPaymentDate
     *
     * @return \DateTime
     */
    public function getPlannedPaymentDate()
    {
        return $this->container['plannedPaymentDate'];
    }

    /**
     * Sets plannedPaymentDate
     *
     * @param \DateTime $plannedPaymentDate Плановая дата списания денежных средств за сервис
     *
     * @return $this
     */
    public function setPlannedPaymentDate($plannedPaymentDate)
    {
        $this->container['plannedPaymentDate'] = $plannedPaymentDate;

        return $this;
    }

    /**
     * Gets rateAmount
     *
     * @return float
     */
    public function getRateAmount()
    {
        return $this->container['rateAmount'];
    }

    /**
     * Sets rateAmount
     *
     * @param float $rateAmount Стоимость
     *
     * @return $this
     */
    public function setRateAmount($rateAmount)
    {
        $this->container['rateAmount'] = $rateAmount;

        return $this;
    }

    /**
     * Gets ratePeriodMonths
     *
     * @return int
     */
    public function getRatePeriodMonths()
    {
        return $this->container['ratePeriodMonths'];
    }

    /**
     * Sets ratePeriodMonths
     *
     * @param int $ratePeriodMonths Периодичность оплаты в месяцах
     *
     * @return $this
     */
    public function setRatePeriodMonths($ratePeriodMonths)
    {
        $this->container['ratePeriodMonths'] = $ratePeriodMonths;

        return $this;
    }

    /**
     * Gets tokenUrl
     *
     * @return string
     */
    public function getTokenUrl()
    {
        return $this->container['tokenUrl'];
    }

    /**
     * Sets tokenUrl
     *
     * @param string $tokenUrl Ссылка на страницу управления тарифом для токенных клиентов
     *
     * @return $this
     */
    public function setTokenUrl($tokenUrl)
    {
        $this->container['tokenUrl'] = $tokenUrl;

        return $this;
    }

    /**
     * Gets trialMode
     *
     * @return bool
     */
    public function getTrialMode()
    {
        return $this->container['trialMode'];
    }

    /**
     * Sets trialMode
     *
     * @param bool $trialMode trialMode
     *
     * @return $this
     */
    public function setTrialMode($trialMode)
    {
        $this->container['trialMode'] = $trialMode;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Ссылка на страницу управления тарифом
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
