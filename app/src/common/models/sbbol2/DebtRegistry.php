<?php
/**
 * DebtRegistry
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * DebtRegistry Class Doc Comment
 *
 * @category Class
 * @description Реестр задолженности
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class DebtRegistry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DebtRegistry';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'bankComment' => 'string',
        'bankStatus' => 'string',
        'bfAttachments' => '\common\models\sbbol2\BfAttachment[]',
        'date' => '\DateTime',
        'digestSignatures' => '\common\models\sbbol2\Signature[]',
        'externalId' => 'string',
        'number' => 'string',
        'orgName' => 'string',
        'orgTaxNumber' => 'string',
        'recordNum' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'bankComment' => null,
        'bankStatus' => null,
        'bfAttachments' => null,
        'date' => 'date-time',
        'digestSignatures' => null,
        'externalId' => null,
        'number' => null,
        'orgName' => null,
        'orgTaxNumber' => null,
        'recordNum' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankComment' => 'bankComment',
        'bankStatus' => 'bankStatus',
        'bfAttachments' => 'bfAttachments',
        'date' => 'date',
        'digestSignatures' => 'digestSignatures',
        'externalId' => 'externalId',
        'number' => 'number',
        'orgName' => 'orgName',
        'orgTaxNumber' => 'orgTaxNumber',
        'recordNum' => 'recordNum',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankComment' => 'setBankComment',
        'bankStatus' => 'setBankStatus',
        'bfAttachments' => 'setBfAttachments',
        'date' => 'setDate',
        'digestSignatures' => 'setDigestSignatures',
        'externalId' => 'setExternalId',
        'number' => 'setNumber',
        'orgName' => 'setOrgName',
        'orgTaxNumber' => 'setOrgTaxNumber',
        'recordNum' => 'setRecordNum',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankComment' => 'getBankComment',
        'bankStatus' => 'getBankStatus',
        'bfAttachments' => 'getBfAttachments',
        'date' => 'getDate',
        'digestSignatures' => 'getDigestSignatures',
        'externalId' => 'getExternalId',
        'number' => 'getNumber',
        'orgName' => 'getOrgName',
        'orgTaxNumber' => 'getOrgTaxNumber',
        'recordNum' => 'getRecordNum',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bankComment'] = isset($data['bankComment']) ? $data['bankComment'] : null;
        $this->container['bankStatus'] = isset($data['bankStatus']) ? $data['bankStatus'] : null;
        $this->container['bfAttachments'] = isset($data['bfAttachments']) ? $data['bfAttachments'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['digestSignatures'] = isset($data['digestSignatures']) ? $data['digestSignatures'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['orgName'] = isset($data['orgName']) ? $data['orgName'] : null;
        $this->container['orgTaxNumber'] = isset($data['orgTaxNumber']) ? $data['orgTaxNumber'] : null;
        $this->container['recordNum'] = isset($data['recordNum']) ? $data['recordNum'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['orgName'] === null) {
            $invalidProperties[] = "'orgName' can't be null";
        }
        if ($this->container['orgTaxNumber'] === null) {
            $invalidProperties[] = "'orgTaxNumber' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets bankComment
     *
     * @return string
     */
    public function getBankComment()
    {
        return $this->container['bankComment'];
    }

    /**
     * Sets bankComment
     *
     * @param string $bankComment Банковский комментарий к статусу документа
     *
     * @return $this
     */
    public function setBankComment($bankComment)
    {
        $this->container['bankComment'] = $bankComment;

        return $this;
    }

    /**
     * Gets bankStatus
     *
     * @return string
     */
    public function getBankStatus()
    {
        return $this->container['bankStatus'];
    }

    /**
     * Sets bankStatus
     *
     * @param string $bankStatus Статус документа
     *
     * @return $this
     */
    public function setBankStatus($bankStatus)
    {
        $this->container['bankStatus'] = $bankStatus;

        return $this;
    }

    /**
     * Gets bfAttachments
     *
     * @return \common\models\sbbol2\BfAttachment[]
     */
    public function getBfAttachments()
    {
        return $this->container['bfAttachments'];
    }

    /**
     * Sets bfAttachments
     *
     * @param \common\models\sbbol2\BfAttachment[] $bfAttachments Данные о файлах, связанных с реестром задолженности
     *
     * @return $this
     */
    public function setBfAttachments($bfAttachments)
    {
        $this->container['bfAttachments'] = $bfAttachments;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата составления документа
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets digestSignatures
     *
     * @return \common\models\sbbol2\Signature[]
     */
    public function getDigestSignatures()
    {
        return $this->container['digestSignatures'];
    }

    /**
     * Sets digestSignatures
     *
     * @param \common\models\sbbol2\Signature[] $digestSignatures Электронные подписи по дайджесту документа
     *
     * @return $this
     */
    public function setDigestSignatures($digestSignatures)
    {
        $this->container['digestSignatures'] = $digestSignatures;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Идентификатор документа, присвоенный партнёром (UUID)
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер документа
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets orgName
     *
     * @return string
     */
    public function getOrgName()
    {
        return $this->container['orgName'];
    }

    /**
     * Sets orgName
     *
     * @param string $orgName Наименование организации клиента (сокращенное)
     *
     * @return $this
     */
    public function setOrgName($orgName)
    {
        $this->container['orgName'] = $orgName;

        return $this;
    }

    /**
     * Gets orgTaxNumber
     *
     * @return string
     */
    public function getOrgTaxNumber()
    {
        return $this->container['orgTaxNumber'];
    }

    /**
     * Sets orgTaxNumber
     *
     * @param string $orgTaxNumber ИНН организации клиента
     *
     * @return $this
     */
    public function setOrgTaxNumber($orgTaxNumber)
    {
        $this->container['orgTaxNumber'] = $orgTaxNumber;

        return $this;
    }

    /**
     * Gets recordNum
     *
     * @return string
     */
    public function getRecordNum()
    {
        return $this->container['recordNum'];
    }

    /**
     * Sets recordNum
     *
     * @param string $recordNum Количество записей
     *
     * @return $this
     */
    public function setRecordNum($recordNum)
    {
        $this->container['recordNum'] = $recordNum;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
