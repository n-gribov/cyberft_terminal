<?php
/**
 * AccountBlockInfo
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * AccountBlockInfo Class Doc Comment
 *
 * @category Class
 * @description Данные о блокировках счета клиента
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class AccountBlockInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'AccountBlockInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'beginDate' => '\DateTime',
        'blockedQueues' => 'int',
        'cause' => 'string',
        'endDate' => '\DateTime',
        'initiator' => 'string',
        'sum' => 'float',
        'taxAuthorityCode' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'beginDate' => 'date-time',
        'blockedQueues' => 'int32',
        'cause' => null,
        'endDate' => 'date-time',
        'initiator' => null,
        'sum' => null,
        'taxAuthorityCode' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'beginDate' => 'beginDate',
        'blockedQueues' => 'blockedQueues',
        'cause' => 'cause',
        'endDate' => 'endDate',
        'initiator' => 'initiator',
        'sum' => 'sum',
        'taxAuthorityCode' => 'taxAuthorityCode',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'beginDate' => 'setBeginDate',
        'blockedQueues' => 'setBlockedQueues',
        'cause' => 'setCause',
        'endDate' => 'setEndDate',
        'initiator' => 'setInitiator',
        'sum' => 'setSum',
        'taxAuthorityCode' => 'setTaxAuthorityCode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'beginDate' => 'getBeginDate',
        'blockedQueues' => 'getBlockedQueues',
        'cause' => 'getCause',
        'endDate' => 'getEndDate',
        'initiator' => 'getInitiator',
        'sum' => 'getSum',
        'taxAuthorityCode' => 'getTaxAuthorityCode',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['beginDate'] = isset($data['beginDate']) ? $data['beginDate'] : null;
        $this->container['blockedQueues'] = isset($data['blockedQueues']) ? $data['blockedQueues'] : null;
        $this->container['cause'] = isset($data['cause']) ? $data['cause'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['initiator'] = isset($data['initiator']) ? $data['initiator'] : null;
        $this->container['sum'] = isset($data['sum']) ? $data['sum'] : null;
        $this->container['taxAuthorityCode'] = isset($data['taxAuthorityCode']) ? $data['taxAuthorityCode'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets beginDate
     *
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->container['beginDate'];
    }

    /**
     * Sets beginDate
     *
     * @param \DateTime $beginDate Дата начала действия ограничения
     *
     * @return $this
     */
    public function setBeginDate($beginDate)
    {
        $this->container['beginDate'] = $beginDate;

        return $this;
    }

    /**
     * Gets blockedQueues
     *
     * @return int
     */
    public function getBlockedQueues()
    {
        return $this->container['blockedQueues'];
    }

    /**
     * Sets blockedQueues
     *
     * @param int $blockedQueues Наибольшая разрешённая очерёдность платежей (от 1 до 5). Указывается, если есть блокировка по очерёдности. Пример: значение 3 означает, что заблокированы очерёдности 4 - 6
     *
     * @return $this
     */
    public function setBlockedQueues($blockedQueues)
    {
        $this->container['blockedQueues'] = $blockedQueues;

        return $this;
    }

    /**
     * Gets cause
     *
     * @return string
     */
    public function getCause()
    {
        return $this->container['cause'];
    }

    /**
     * Sets cause
     *
     * @param string $cause Основание ареста
     *
     * @return $this
     */
    public function setCause($cause)
    {
        $this->container['cause'] = $cause;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate Дата снятия ограничения
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets initiator
     *
     * @return string
     */
    public function getInitiator()
    {
        return $this->container['initiator'];
    }

    /**
     * Sets initiator
     *
     * @param string $initiator Наименование органа, наложившего арест
     *
     * @return $this
     */
    public function setInitiator($initiator)
    {
        $this->container['initiator'] = $initiator;

        return $this;
    }

    /**
     * Gets sum
     *
     * @return float
     */
    public function getSum()
    {
        return $this->container['sum'];
    }

    /**
     * Sets sum
     *
     * @param float $sum Заблокированная (арестованная) сумма на счёте
     *
     * @return $this
     */
    public function setSum($sum)
    {
        $this->container['sum'] = $sum;

        return $this;
    }

    /**
     * Gets taxAuthorityCode
     *
     * @return string
     */
    public function getTaxAuthorityCode()
    {
        return $this->container['taxAuthorityCode'];
    }

    /**
     * Sets taxAuthorityCode
     *
     * @param string $taxAuthorityCode Код налогового органа, наложившего арест
     *
     * @return $this
     */
    public function setTaxAuthorityCode($taxAuthorityCode)
    {
        $this->container['taxAuthorityCode'] = $taxAuthorityCode;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
