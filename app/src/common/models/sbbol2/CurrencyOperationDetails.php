<?php
/**
 * CurrencyOperationDetails
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * CurrencyOperationDetails Class Doc Comment
 *
 * @category Class
 * @description Сведения о валютной операции
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class CurrencyOperationDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    const CURRENCY_DOC_TYPE_MANDATORY_SALE = 'MandatorySale';
    const CURRENCY_DOC_TYPE_PAY_DOC_CUR = 'PayDocCur';
    const CURRENCY_DOC_TYPE_PAY_DOC_RU = 'PayDocRu';
    const CURRENCY_DOC_TYPE_CURRENCY_NOTICES = 'CurrencyNotices';
    const PAYMENT_DIRECTION__1 = '1';
    const PAYMENT_DIRECTION__2 = '2';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CurrencyOperationDetails';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'acceptDate' => '\DateTime',
        'accountInOtherBank' => 'bool',
        'accountNumber' => 'string',
        'addInfo' => 'string',
        'authPersonName' => 'string',
        'authPersonTelfax' => 'string',
        'bankComment' => 'string',
        'bankNonResidentountryName' => 'string',
        'bankNonResidentountryNumericCode' => 'string',
        'bankStatus' => 'string',
        'bfAttachments' => '\common\models\sbbol2\BfAttachment[]',
        'correction' => 'bool',
        'correctionNumber' => 'int',
        'currencyDocDate' => '\DateTime',
        'currencyDocNumber' => 'string',
        'currencyDocType' => 'string',
        'date' => '\DateTime',
        'digestSignatures' => '\common\models\sbbol2\Signature[]',
        'executorEmployeeName' => 'string',
        'executorName' => 'string',
        'externalId' => 'string',
        'failReasons' => '\common\models\sbbol2\FailReason[]',
        'isAccountInOtherBank' => 'bool',
        'isNumberAbsent' => 'bool',
        'linkedDocs' => '\common\models\sbbol2\LinkedDoc[]',
        'number' => 'string',
        'numberAbsent' => 'bool',
        'operationDate' => '\DateTime',
        'operations' => '\common\models\sbbol2\CurrencyOperationDetailsDoc[]',
        'paymentAmount' => '\common\models\sbbol2\AmountCurrency',
        'paymentDirection' => 'string',
        'senderInn' => 'string',
        'senderName' => 'string',
        'senderOkpo' => 'string',
        'valueDate' => '\DateTime',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'acceptDate' => 'date-time',
        'accountInOtherBank' => null,
        'accountNumber' => null,
        'addInfo' => null,
        'authPersonName' => null,
        'authPersonTelfax' => null,
        'bankComment' => null,
        'bankNonResidentountryName' => null,
        'bankNonResidentountryNumericCode' => null,
        'bankStatus' => null,
        'bfAttachments' => null,
        'correction' => null,
        'correctionNumber' => 'int32',
        'currencyDocDate' => 'date-time',
        'currencyDocNumber' => null,
        'currencyDocType' => null,
        'date' => 'date-time',
        'digestSignatures' => null,
        'executorEmployeeName' => null,
        'executorName' => null,
        'externalId' => null,
        'failReasons' => null,
        'isAccountInOtherBank' => null,
        'isNumberAbsent' => null,
        'linkedDocs' => null,
        'number' => null,
        'numberAbsent' => null,
        'operationDate' => 'date-time',
        'operations' => null,
        'paymentAmount' => null,
        'paymentDirection' => null,
        'senderInn' => null,
        'senderName' => null,
        'senderOkpo' => null,
        'valueDate' => 'date-time',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptDate' => 'acceptDate',
        'accountInOtherBank' => 'accountInOtherBank',
        'accountNumber' => 'accountNumber',
        'addInfo' => 'addInfo',
        'authPersonName' => 'authPersonName',
        'authPersonTelfax' => 'authPersonTelfax',
        'bankComment' => 'bankComment',
        'bankNonResidentountryName' => 'bankNonResidentСountryName',
        'bankNonResidentountryNumericCode' => 'bankNonResidentСountryNumericCode',
        'bankStatus' => 'bankStatus',
        'bfAttachments' => 'bfAttachments',
        'correction' => 'correction',
        'correctionNumber' => 'correctionNumber',
        'currencyDocDate' => 'currencyDocDate',
        'currencyDocNumber' => 'currencyDocNumber',
        'currencyDocType' => 'currencyDocType',
        'date' => 'date',
        'digestSignatures' => 'digestSignatures',
        'executorEmployeeName' => 'executorEmployeeName',
        'executorName' => 'executorName',
        'externalId' => 'externalId',
        'failReasons' => 'failReasons',
        'isAccountInOtherBank' => 'isAccountInOtherBank',
        'isNumberAbsent' => 'isNumberAbsent',
        'linkedDocs' => 'linkedDocs',
        'number' => 'number',
        'numberAbsent' => 'numberAbsent',
        'operationDate' => 'operationDate',
        'operations' => 'operations',
        'paymentAmount' => 'paymentAmount',
        'paymentDirection' => 'paymentDirection',
        'senderInn' => 'senderInn',
        'senderName' => 'senderName',
        'senderOkpo' => 'senderOkpo',
        'valueDate' => 'valueDate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptDate' => 'setAcceptDate',
        'accountInOtherBank' => 'setAccountInOtherBank',
        'accountNumber' => 'setAccountNumber',
        'addInfo' => 'setAddInfo',
        'authPersonName' => 'setAuthPersonName',
        'authPersonTelfax' => 'setAuthPersonTelfax',
        'bankComment' => 'setBankComment',
        'bankNonResidentountryName' => 'setBankNonResidentountryName',
        'bankNonResidentountryNumericCode' => 'setBankNonResidentountryNumericCode',
        'bankStatus' => 'setBankStatus',
        'bfAttachments' => 'setBfAttachments',
        'correction' => 'setCorrection',
        'correctionNumber' => 'setCorrectionNumber',
        'currencyDocDate' => 'setCurrencyDocDate',
        'currencyDocNumber' => 'setCurrencyDocNumber',
        'currencyDocType' => 'setCurrencyDocType',
        'date' => 'setDate',
        'digestSignatures' => 'setDigestSignatures',
        'executorEmployeeName' => 'setExecutorEmployeeName',
        'executorName' => 'setExecutorName',
        'externalId' => 'setExternalId',
        'failReasons' => 'setFailReasons',
        'isAccountInOtherBank' => 'setIsAccountInOtherBank',
        'isNumberAbsent' => 'setIsNumberAbsent',
        'linkedDocs' => 'setLinkedDocs',
        'number' => 'setNumber',
        'numberAbsent' => 'setNumberAbsent',
        'operationDate' => 'setOperationDate',
        'operations' => 'setOperations',
        'paymentAmount' => 'setPaymentAmount',
        'paymentDirection' => 'setPaymentDirection',
        'senderInn' => 'setSenderInn',
        'senderName' => 'setSenderName',
        'senderOkpo' => 'setSenderOkpo',
        'valueDate' => 'setValueDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptDate' => 'getAcceptDate',
        'accountInOtherBank' => 'getAccountInOtherBank',
        'accountNumber' => 'getAccountNumber',
        'addInfo' => 'getAddInfo',
        'authPersonName' => 'getAuthPersonName',
        'authPersonTelfax' => 'getAuthPersonTelfax',
        'bankComment' => 'getBankComment',
        'bankNonResidentountryName' => 'getBankNonResidentountryName',
        'bankNonResidentountryNumericCode' => 'getBankNonResidentountryNumericCode',
        'bankStatus' => 'getBankStatus',
        'bfAttachments' => 'getBfAttachments',
        'correction' => 'getCorrection',
        'correctionNumber' => 'getCorrectionNumber',
        'currencyDocDate' => 'getCurrencyDocDate',
        'currencyDocNumber' => 'getCurrencyDocNumber',
        'currencyDocType' => 'getCurrencyDocType',
        'date' => 'getDate',
        'digestSignatures' => 'getDigestSignatures',
        'executorEmployeeName' => 'getExecutorEmployeeName',
        'executorName' => 'getExecutorName',
        'externalId' => 'getExternalId',
        'failReasons' => 'getFailReasons',
        'isAccountInOtherBank' => 'getIsAccountInOtherBank',
        'isNumberAbsent' => 'getIsNumberAbsent',
        'linkedDocs' => 'getLinkedDocs',
        'number' => 'getNumber',
        'numberAbsent' => 'getNumberAbsent',
        'operationDate' => 'getOperationDate',
        'operations' => 'getOperations',
        'paymentAmount' => 'getPaymentAmount',
        'paymentDirection' => 'getPaymentDirection',
        'senderInn' => 'getSenderInn',
        'senderName' => 'getSenderName',
        'senderOkpo' => 'getSenderOkpo',
        'valueDate' => 'getValueDate',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acceptDate'] = isset($data['acceptDate']) ? $data['acceptDate'] : null;
        $this->container['accountInOtherBank'] = isset($data['accountInOtherBank']) ? $data['accountInOtherBank'] : null;
        $this->container['accountNumber'] = isset($data['accountNumber']) ? $data['accountNumber'] : null;
        $this->container['addInfo'] = isset($data['addInfo']) ? $data['addInfo'] : null;
        $this->container['authPersonName'] = isset($data['authPersonName']) ? $data['authPersonName'] : null;
        $this->container['authPersonTelfax'] = isset($data['authPersonTelfax']) ? $data['authPersonTelfax'] : null;
        $this->container['bankComment'] = isset($data['bankComment']) ? $data['bankComment'] : null;
        $this->container['bankNonResidentountryName'] = isset($data['bankNonResidentountryName']) ? $data['bankNonResidentountryName'] : null;
        $this->container['bankNonResidentountryNumericCode'] = isset($data['bankNonResidentountryNumericCode']) ? $data['bankNonResidentountryNumericCode'] : null;
        $this->container['bankStatus'] = isset($data['bankStatus']) ? $data['bankStatus'] : null;
        $this->container['bfAttachments'] = isset($data['bfAttachments']) ? $data['bfAttachments'] : null;
        $this->container['correction'] = isset($data['correction']) ? $data['correction'] : null;
        $this->container['correctionNumber'] = isset($data['correctionNumber']) ? $data['correctionNumber'] : null;
        $this->container['currencyDocDate'] = isset($data['currencyDocDate']) ? $data['currencyDocDate'] : null;
        $this->container['currencyDocNumber'] = isset($data['currencyDocNumber']) ? $data['currencyDocNumber'] : null;
        $this->container['currencyDocType'] = isset($data['currencyDocType']) ? $data['currencyDocType'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['digestSignatures'] = isset($data['digestSignatures']) ? $data['digestSignatures'] : null;
        $this->container['executorEmployeeName'] = isset($data['executorEmployeeName']) ? $data['executorEmployeeName'] : null;
        $this->container['executorName'] = isset($data['executorName']) ? $data['executorName'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['failReasons'] = isset($data['failReasons']) ? $data['failReasons'] : null;
        $this->container['isAccountInOtherBank'] = isset($data['isAccountInOtherBank']) ? $data['isAccountInOtherBank'] : null;
        $this->container['isNumberAbsent'] = isset($data['isNumberAbsent']) ? $data['isNumberAbsent'] : null;
        $this->container['linkedDocs'] = isset($data['linkedDocs']) ? $data['linkedDocs'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['numberAbsent'] = isset($data['numberAbsent']) ? $data['numberAbsent'] : null;
        $this->container['operationDate'] = isset($data['operationDate']) ? $data['operationDate'] : null;
        $this->container['operations'] = isset($data['operations']) ? $data['operations'] : null;
        $this->container['paymentAmount'] = isset($data['paymentAmount']) ? $data['paymentAmount'] : null;
        $this->container['paymentDirection'] = isset($data['paymentDirection']) ? $data['paymentDirection'] : null;
        $this->container['senderInn'] = isset($data['senderInn']) ? $data['senderInn'] : null;
        $this->container['senderName'] = isset($data['senderName']) ? $data['senderName'] : null;
        $this->container['senderOkpo'] = isset($data['senderOkpo']) ? $data['senderOkpo'] : null;
        $this->container['valueDate'] = isset($data['valueDate']) ? $data['valueDate'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyDocTypeAllowableValues()
    {
        return [
            self::CURRENCY_DOC_TYPE_MANDATORY_SALE,
            self::CURRENCY_DOC_TYPE_PAY_DOC_CUR,
            self::CURRENCY_DOC_TYPE_PAY_DOC_RU,
            self::CURRENCY_DOC_TYPE_CURRENCY_NOTICES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentDirectionAllowableValues()
    {
        return [
            self::PAYMENT_DIRECTION__1,
            self::PAYMENT_DIRECTION__2,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyDocTypeAllowableValues();
        if (!is_null($this->container['currencyDocType']) && !in_array($this->container['currencyDocType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currencyDocType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['operations'] === null) {
            $invalidProperties[] = "'operations' can't be null";
        }
        if ($this->container['paymentAmount'] === null) {
            $invalidProperties[] = "'paymentAmount' can't be null";
        }
        if ($this->container['paymentDirection'] === null) {
            $invalidProperties[] = "'paymentDirection' can't be null";
        }
        $allowedValues = $this->getPaymentDirectionAllowableValues();
        if (!is_null($this->container['paymentDirection']) && !in_array($this->container['paymentDirection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'paymentDirection', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['senderInn'] === null) {
            $invalidProperties[] = "'senderInn' can't be null";
        }
        if ($this->container['senderName'] === null) {
            $invalidProperties[] = "'senderName' can't be null";
        }
        if ($this->container['senderOkpo'] === null) {
            $invalidProperties[] = "'senderOkpo' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets acceptDate
     *
     * @return \DateTime
     */
    public function getAcceptDate()
    {
        return $this->container['acceptDate'];
    }

    /**
     * Sets acceptDate
     *
     * @param \DateTime $acceptDate Дата представления в банк
     *
     * @return $this
     */
    public function setAcceptDate($acceptDate)
    {
        $this->container['acceptDate'] = $acceptDate;

        return $this;
    }

    /**
     * Gets accountInOtherBank
     *
     * @return bool
     */
    public function getAccountInOtherBank()
    {
        return $this->container['accountInOtherBank'];
    }

    /**
     * Sets accountInOtherBank
     *
     * @param bool $accountInOtherBank accountInOtherBank
     *
     * @return $this
     */
    public function setAccountInOtherBank($accountInOtherBank)
    {
        $this->container['accountInOtherBank'] = $accountInOtherBank;

        return $this;
    }

    /**
     * Gets accountNumber
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber
     *
     * @param string $accountNumber Номер счета
     *
     * @return $this
     */
    public function setAccountNumber($accountNumber)
    {
        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets addInfo
     *
     * @return string
     */
    public function getAddInfo()
    {
        return $this->container['addInfo'];
    }

    /**
     * Sets addInfo
     *
     * @param string $addInfo Дополнительная информация
     *
     * @return $this
     */
    public function setAddInfo($addInfo)
    {
        $this->container['addInfo'] = $addInfo;

        return $this;
    }

    /**
     * Gets authPersonName
     *
     * @return string
     */
    public function getAuthPersonName()
    {
        return $this->container['authPersonName'];
    }

    /**
     * Sets authPersonName
     *
     * @param string $authPersonName ФИО ответственного лица
     *
     * @return $this
     */
    public function setAuthPersonName($authPersonName)
    {
        $this->container['authPersonName'] = $authPersonName;

        return $this;
    }

    /**
     * Gets authPersonTelfax
     *
     * @return string
     */
    public function getAuthPersonTelfax()
    {
        return $this->container['authPersonTelfax'];
    }

    /**
     * Sets authPersonTelfax
     *
     * @param string $authPersonTelfax Телефон ответственного лица
     *
     * @return $this
     */
    public function setAuthPersonTelfax($authPersonTelfax)
    {
        $this->container['authPersonTelfax'] = $authPersonTelfax;

        return $this;
    }

    /**
     * Gets bankComment
     *
     * @return string
     */
    public function getBankComment()
    {
        return $this->container['bankComment'];
    }

    /**
     * Sets bankComment
     *
     * @param string $bankComment Банковский комментарий к статусу документа
     *
     * @return $this
     */
    public function setBankComment($bankComment)
    {
        $this->container['bankComment'] = $bankComment;

        return $this;
    }

    /**
     * Gets bankNonResidentountryName
     *
     * @return string
     */
    public function getBankNonResidentountryName()
    {
        return $this->container['bankNonResidentountryName'];
    }

    /**
     * Sets bankNonResidentountryName
     *
     * @param string $bankNonResidentountryName Наименование страны
     *
     * @return $this
     */
    public function setBankNonResidentountryName($bankNonResidentountryName)
    {
        $this->container['bankNonResidentountryName'] = $bankNonResidentountryName;

        return $this;
    }

    /**
     * Gets bankNonResidentountryNumericCode
     *
     * @return string
     */
    public function getBankNonResidentountryNumericCode()
    {
        return $this->container['bankNonResidentountryNumericCode'];
    }

    /**
     * Sets bankNonResidentountryNumericCode
     *
     * @param string $bankNonResidentountryNumericCode Код страны, 3 цифры
     *
     * @return $this
     */
    public function setBankNonResidentountryNumericCode($bankNonResidentountryNumericCode)
    {
        $this->container['bankNonResidentountryNumericCode'] = $bankNonResidentountryNumericCode;

        return $this;
    }

    /**
     * Gets bankStatus
     *
     * @return string
     */
    public function getBankStatus()
    {
        return $this->container['bankStatus'];
    }

    /**
     * Sets bankStatus
     *
     * @param string $bankStatus Статус документа
     *
     * @return $this
     */
    public function setBankStatus($bankStatus)
    {
        $this->container['bankStatus'] = $bankStatus;

        return $this;
    }

    /**
     * Gets bfAttachments
     *
     * @return \common\models\sbbol2\BfAttachment[]
     */
    public function getBfAttachments()
    {
        return $this->container['bfAttachments'];
    }

    /**
     * Sets bfAttachments
     *
     * @param \common\models\sbbol2\BfAttachment[] $bfAttachments Приложенные к документу: отсканированные образы-вложения - для АС БФ
     *
     * @return $this
     */
    public function setBfAttachments($bfAttachments)
    {
        $this->container['bfAttachments'] = $bfAttachments;

        return $this;
    }

    /**
     * Gets correction
     *
     * @return bool
     */
    public function getCorrection()
    {
        return $this->container['correction'];
    }

    /**
     * Sets correction
     *
     * @param bool $correction Признак корректировки
     *
     * @return $this
     */
    public function setCorrection($correction)
    {
        $this->container['correction'] = $correction;

        return $this;
    }

    /**
     * Gets correctionNumber
     *
     * @return int
     */
    public function getCorrectionNumber()
    {
        return $this->container['correctionNumber'];
    }

    /**
     * Sets correctionNumber
     *
     * @param int $correctionNumber Порядковый номер корректировки
     *
     * @return $this
     */
    public function setCorrectionNumber($correctionNumber)
    {
        $this->container['correctionNumber'] = $correctionNumber;

        return $this;
    }

    /**
     * Gets currencyDocDate
     *
     * @return \DateTime
     */
    public function getCurrencyDocDate()
    {
        return $this->container['currencyDocDate'];
    }

    /**
     * Sets currencyDocDate
     *
     * @param \DateTime $currencyDocDate Дата валютного документа
     *
     * @return $this
     */
    public function setCurrencyDocDate($currencyDocDate)
    {
        $this->container['currencyDocDate'] = $currencyDocDate;

        return $this;
    }

    /**
     * Gets currencyDocNumber
     *
     * @return string
     */
    public function getCurrencyDocNumber()
    {
        return $this->container['currencyDocNumber'];
    }

    /**
     * Sets currencyDocNumber
     *
     * @param string $currencyDocNumber Номер документа по валютной операций
     *
     * @return $this
     */
    public function setCurrencyDocNumber($currencyDocNumber)
    {
        $this->container['currencyDocNumber'] = $currencyDocNumber;

        return $this;
    }

    /**
     * Gets currencyDocType
     *
     * @return string
     */
    public function getCurrencyDocType()
    {
        return $this->container['currencyDocType'];
    }

    /**
     * Sets currencyDocType
     *
     * @param string $currencyDocType Тип валютного документа
     *
     * @return $this
     */
    public function setCurrencyDocType($currencyDocType)
    {
        $allowedValues = $this->getCurrencyDocTypeAllowableValues();
        if (!is_null($currencyDocType) && !in_array($currencyDocType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currencyDocType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currencyDocType'] = $currencyDocType;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата составления документа
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets digestSignatures
     *
     * @return \common\models\sbbol2\Signature[]
     */
    public function getDigestSignatures()
    {
        return $this->container['digestSignatures'];
    }

    /**
     * Sets digestSignatures
     *
     * @param \common\models\sbbol2\Signature[] $digestSignatures Электронные подписи по дайджесту документа
     *
     * @return $this
     */
    public function setDigestSignatures($digestSignatures)
    {
        $this->container['digestSignatures'] = $digestSignatures;

        return $this;
    }

    /**
     * Gets executorEmployeeName
     *
     * @return string
     */
    public function getExecutorEmployeeName()
    {
        return $this->container['executorEmployeeName'];
    }

    /**
     * Sets executorEmployeeName
     *
     * @param string $executorEmployeeName Должность ответственного лица
     *
     * @return $this
     */
    public function setExecutorEmployeeName($executorEmployeeName)
    {
        $this->container['executorEmployeeName'] = $executorEmployeeName;

        return $this;
    }

    /**
     * Gets executorName
     *
     * @return string
     */
    public function getExecutorName()
    {
        return $this->container['executorName'];
    }

    /**
     * Sets executorName
     *
     * @param string $executorName Подпись отвественного лица
     *
     * @return $this
     */
    public function setExecutorName($executorName)
    {
        $this->container['executorName'] = $executorName;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Идентификатор документа, присвоенный партнёром (UUID)
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets failReasons
     *
     * @return \common\models\sbbol2\FailReason[]
     */
    public function getFailReasons()
    {
        return $this->container['failReasons'];
    }

    /**
     * Sets failReasons
     *
     * @param \common\models\sbbol2\FailReason[] $failReasons Причины отказа
     *
     * @return $this
     */
    public function setFailReasons($failReasons)
    {
        $this->container['failReasons'] = $failReasons;

        return $this;
    }

    /**
     * Gets isAccountInOtherBank
     *
     * @return bool
     */
    public function getIsAccountInOtherBank()
    {
        return $this->container['isAccountInOtherBank'];
    }

    /**
     * Sets isAccountInOtherBank
     *
     * @param bool $isAccountInOtherBank Признак счёта в другом банке
     *
     * @return $this
     */
    public function setIsAccountInOtherBank($isAccountInOtherBank)
    {
        $this->container['isAccountInOtherBank'] = $isAccountInOtherBank;

        return $this;
    }

    /**
     * Gets isNumberAbsent
     *
     * @return bool
     */
    public function getIsNumberAbsent()
    {
        return $this->container['isNumberAbsent'];
    }

    /**
     * Sets isNumberAbsent
     *
     * @param bool $isNumberAbsent Признак отсутствия номера валютного документа
     *
     * @return $this
     */
    public function setIsNumberAbsent($isNumberAbsent)
    {
        $this->container['isNumberAbsent'] = $isNumberAbsent;

        return $this;
    }

    /**
     * Gets linkedDocs
     *
     * @return \common\models\sbbol2\LinkedDoc[]
     */
    public function getLinkedDocs()
    {
        return $this->container['linkedDocs'];
    }

    /**
     * Sets linkedDocs
     *
     * @param \common\models\sbbol2\LinkedDoc[] $linkedDocs Cвязанные документы
     *
     * @return $this
     */
    public function setLinkedDocs($linkedDocs)
    {
        $this->container['linkedDocs'] = $linkedDocs;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер документа
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets numberAbsent
     *
     * @return bool
     */
    public function getNumberAbsent()
    {
        return $this->container['numberAbsent'];
    }

    /**
     * Sets numberAbsent
     *
     * @param bool $numberAbsent numberAbsent
     *
     * @return $this
     */
    public function setNumberAbsent($numberAbsent)
    {
        $this->container['numberAbsent'] = $numberAbsent;

        return $this;
    }

    /**
     * Gets operationDate
     *
     * @return \DateTime
     */
    public function getOperationDate()
    {
        return $this->container['operationDate'];
    }

    /**
     * Sets operationDate
     *
     * @param \DateTime $operationDate Дата операции
     *
     * @return $this
     */
    public function setOperationDate($operationDate)
    {
        $this->container['operationDate'] = $operationDate;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \common\models\sbbol2\CurrencyOperationDetailsDoc[]
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \common\models\sbbol2\CurrencyOperationDetailsDoc[] $operations Документы валютного контроля
     *
     * @return $this
     */
    public function setOperations($operations)
    {
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets paymentAmount
     *
     * @return \common\models\sbbol2\AmountCurrency
     */
    public function getPaymentAmount()
    {
        return $this->container['paymentAmount'];
    }

    /**
     * Sets paymentAmount
     *
     * @param \common\models\sbbol2\AmountCurrency $paymentAmount paymentAmount
     *
     * @return $this
     */
    public function setPaymentAmount($paymentAmount)
    {
        $this->container['paymentAmount'] = $paymentAmount;

        return $this;
    }

    /**
     * Gets paymentDirection
     *
     * @return string
     */
    public function getPaymentDirection()
    {
        return $this->container['paymentDirection'];
    }

    /**
     * Sets paymentDirection
     *
     * @param string $paymentDirection Направление платежа: 1-зачисление, 2-списание
     *
     * @return $this
     */
    public function setPaymentDirection($paymentDirection)
    {
        $allowedValues = $this->getPaymentDirectionAllowableValues();
        if (!in_array($paymentDirection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paymentDirection', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentDirection'] = $paymentDirection;

        return $this;
    }

    /**
     * Gets senderInn
     *
     * @return string
     */
    public function getSenderInn()
    {
        return $this->container['senderInn'];
    }

    /**
     * Sets senderInn
     *
     * @param string $senderInn ИНН резидента, указываемый в документе
     *
     * @return $this
     */
    public function setSenderInn($senderInn)
    {
        $this->container['senderInn'] = $senderInn;

        return $this;
    }

    /**
     * Gets senderName
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['senderName'];
    }

    /**
     * Sets senderName
     *
     * @param string $senderName Полное наименование организации, указываемое в документе
     *
     * @return $this
     */
    public function setSenderName($senderName)
    {
        $this->container['senderName'] = $senderName;

        return $this;
    }

    /**
     * Gets senderOkpo
     *
     * @return string
     */
    public function getSenderOkpo()
    {
        return $this->container['senderOkpo'];
    }

    /**
     * Sets senderOkpo
     *
     * @param string $senderOkpo ОКПО клиента, указываемый в документе
     *
     * @return $this
     */
    public function setSenderOkpo($senderOkpo)
    {
        $this->container['senderOkpo'] = $senderOkpo;

        return $this;
    }

    /**
     * Gets valueDate
     *
     * @return \DateTime
     */
    public function getValueDate()
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate
     *
     * @param \DateTime $valueDate Дата принятия/возврата
     *
     * @return $this
     */
    public function setValueDate($valueDate)
    {
        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
