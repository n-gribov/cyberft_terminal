<?php
/**
 * StatementTransaction
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * StatementTransaction Class Doc Comment
 *
 * @category Class
 * @description Данные операции по выписке
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class StatementTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    const DIRECTION_DEBIT = 'DEBIT';
    const DIRECTION_CREDIT = 'CREDIT';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'StatementTransaction';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'amount' => '\common\models\sbbol2\Amount',
        'amountRub' => '\common\models\sbbol2\Amount',
        'correspondingAccount' => 'string',
        'direction' => 'string',
        'documentDate' => '\DateTime',
        'filial' => 'string',
        'number' => 'string',
        'operationCode' => 'string',
        'operationDate' => '\DateTime',
        'paymentPurpose' => 'string',
        'priority' => 'string',
        'revaln' => 'string',
        'rurTransfer' => '\common\models\sbbol2\RURTransfer',
        'swiftTransfer' => '\common\models\sbbol2\SWIFTTransfer',
        'uuid' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'amount' => null,
        'amountRub' => null,
        'correspondingAccount' => null,
        'direction' => null,
        'documentDate' => 'date-time',
        'filial' => null,
        'number' => null,
        'operationCode' => null,
        'operationDate' => 'date-time',
        'paymentPurpose' => null,
        'priority' => null,
        'revaln' => null,
        'rurTransfer' => null,
        'swiftTransfer' => null,
        'uuid' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'amountRub' => 'amountRub',
        'correspondingAccount' => 'correspondingAccount',
        'direction' => 'direction',
        'documentDate' => 'documentDate',
        'filial' => 'filial',
        'number' => 'number',
        'operationCode' => 'operationCode',
        'operationDate' => 'operationDate',
        'paymentPurpose' => 'paymentPurpose',
        'priority' => 'priority',
        'revaln' => 'revaln',
        'rurTransfer' => 'rurTransfer',
        'swiftTransfer' => 'swiftTransfer',
        'uuid' => 'uuid',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'amountRub' => 'setAmountRub',
        'correspondingAccount' => 'setCorrespondingAccount',
        'direction' => 'setDirection',
        'documentDate' => 'setDocumentDate',
        'filial' => 'setFilial',
        'number' => 'setNumber',
        'operationCode' => 'setOperationCode',
        'operationDate' => 'setOperationDate',
        'paymentPurpose' => 'setPaymentPurpose',
        'priority' => 'setPriority',
        'revaln' => 'setRevaln',
        'rurTransfer' => 'setRurTransfer',
        'swiftTransfer' => 'setSwiftTransfer',
        'uuid' => 'setUuid',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'amountRub' => 'getAmountRub',
        'correspondingAccount' => 'getCorrespondingAccount',
        'direction' => 'getDirection',
        'documentDate' => 'getDocumentDate',
        'filial' => 'getFilial',
        'number' => 'getNumber',
        'operationCode' => 'getOperationCode',
        'operationDate' => 'getOperationDate',
        'paymentPurpose' => 'getPaymentPurpose',
        'priority' => 'getPriority',
        'revaln' => 'getRevaln',
        'rurTransfer' => 'getRurTransfer',
        'swiftTransfer' => 'getSwiftTransfer',
        'uuid' => 'getUuid',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amountRub'] = isset($data['amountRub']) ? $data['amountRub'] : null;
        $this->container['correspondingAccount'] = isset($data['correspondingAccount']) ? $data['correspondingAccount'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['documentDate'] = isset($data['documentDate']) ? $data['documentDate'] : null;
        $this->container['filial'] = isset($data['filial']) ? $data['filial'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['operationCode'] = isset($data['operationCode']) ? $data['operationCode'] : null;
        $this->container['operationDate'] = isset($data['operationDate']) ? $data['operationDate'] : null;
        $this->container['paymentPurpose'] = isset($data['paymentPurpose']) ? $data['paymentPurpose'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['revaln'] = isset($data['revaln']) ? $data['revaln'] : null;
        $this->container['rurTransfer'] = isset($data['rurTransfer']) ? $data['rurTransfer'] : null;
        $this->container['swiftTransfer'] = isset($data['swiftTransfer']) ? $data['swiftTransfer'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_DEBIT,
            self::DIRECTION_CREDIT,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets amount
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \common\models\sbbol2\Amount $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amountRub
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getAmountRub()
    {
        return $this->container['amountRub'];
    }

    /**
     * Sets amountRub
     *
     * @param \common\models\sbbol2\Amount $amountRub amountRub
     *
     * @return $this
     */
    public function setAmountRub($amountRub)
    {
        $this->container['amountRub'] = $amountRub;

        return $this;
    }

    /**
     * Gets correspondingAccount
     *
     * @return string
     */
    public function getCorrespondingAccount()
    {
        return $this->container['correspondingAccount'];
    }

    /**
     * Sets correspondingAccount
     *
     * @param string $correspondingAccount Корреспондирующий счёт
     *
     * @return $this
     */
    public function setCorrespondingAccount($correspondingAccount)
    {
        $this->container['correspondingAccount'] = $correspondingAccount;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction Направление транзакции DEBIT/CREDIT
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets documentDate
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['documentDate'];
    }

    /**
     * Sets documentDate
     *
     * @param \DateTime $documentDate Дата документа
     *
     * @return $this
     */
    public function setDocumentDate($documentDate)
    {
        $this->container['documentDate'] = $documentDate;

        return $this;
    }

    /**
     * Gets filial
     *
     * @return string
     */
    public function getFilial()
    {
        return $this->container['filial'];
    }

    /**
     * Sets filial
     *
     * @param string $filial Наименование филиала
     *
     * @return $this
     */
    public function setFilial($filial)
    {
        $this->container['filial'] = $filial;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер операции
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets operationCode
     *
     * @return string
     */
    public function getOperationCode()
    {
        return $this->container['operationCode'];
    }

    /**
     * Sets operationCode
     *
     * @param string $operationCode Тип операции
     *
     * @return $this
     */
    public function setOperationCode($operationCode)
    {
        $this->container['operationCode'] = $operationCode;

        return $this;
    }

    /**
     * Gets operationDate
     *
     * @return \DateTime
     */
    public function getOperationDate()
    {
        return $this->container['operationDate'];
    }

    /**
     * Sets operationDate
     *
     * @param \DateTime $operationDate Дата и время операции
     *
     * @return $this
     */
    public function setOperationDate($operationDate)
    {
        $this->container['operationDate'] = $operationDate;

        return $this;
    }

    /**
     * Gets paymentPurpose
     *
     * @return string
     */
    public function getPaymentPurpose()
    {
        return $this->container['paymentPurpose'];
    }

    /**
     * Sets paymentPurpose
     *
     * @param string $paymentPurpose Назначение платежа
     *
     * @return $this
     */
    public function setPaymentPurpose($paymentPurpose)
    {
        $this->container['paymentPurpose'] = $paymentPurpose;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority Очередность платежа
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets revaln
     *
     * @return string
     */
    public function getRevaln()
    {
        return $this->container['revaln'];
    }

    /**
     * Sets revaln
     *
     * @param string $revaln Признак операции переоценки (ПК - пересчет курса, ДП - дооценка руб. покрытия)
     *
     * @return $this
     */
    public function setRevaln($revaln)
    {
        $this->container['revaln'] = $revaln;

        return $this;
    }

    /**
     * Gets rurTransfer
     *
     * @return \common\models\sbbol2\RURTransfer
     */
    public function getRurTransfer()
    {
        return $this->container['rurTransfer'];
    }

    /**
     * Sets rurTransfer
     *
     * @param \common\models\sbbol2\RURTransfer $rurTransfer rurTransfer
     *
     * @return $this
     */
    public function setRurTransfer($rurTransfer)
    {
        $this->container['rurTransfer'] = $rurTransfer;

        return $this;
    }

    /**
     * Gets swiftTransfer
     *
     * @return \common\models\sbbol2\SWIFTTransfer
     */
    public function getSwiftTransfer()
    {
        return $this->container['swiftTransfer'];
    }

    /**
     * Sets swiftTransfer
     *
     * @param \common\models\sbbol2\SWIFTTransfer $swiftTransfer swiftTransfer
     *
     * @return $this
     */
    public function setSwiftTransfer($swiftTransfer)
    {
        $this->container['swiftTransfer'] = $swiftTransfer;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Уникальный идентификатор операции (UUID)
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
