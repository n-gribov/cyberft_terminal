<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @description Счет клиента
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    const MODE_STANDART = 'STANDART';
    const MODE_FORBIDDEN_RECEIVING = 'FORBIDDEN_RECEIVING';
    const MODE_ONLY_RECEIVING = 'ONLY_RECEIVING';
    const STATE_OPEN = 'OPEN';
    const STATE_BLOCKED = 'BLOCKED';
    const STATE_CLOSED = 'CLOSED';
    const TYPE_ASSURANCE_REGISTRATION = 'assuranceRegistration';
    const TYPE_CALCULATED = 'calculated';
    const TYPE_TRANSIT = 'transit';
    const TYPE_SPECIAL_TRANSIT = 'specialTransit';
    const TYPE_BUDGET = 'budget';
    const TYPE_LOAN = 'loan';
    const TYPE_DEPOSIT = 'deposit';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Account';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'bic' => 'string',
        'blockedQueuesInfo' => '\common\models\sbbol2\AccountBlockInfo[]',
        'blockedSumQueuesInfo' => '\common\models\sbbol2\AccountBlockInfo[]',
        'blockedSums' => '\common\models\sbbol2\AccountBlockInfo[]',
        'business' => 'bool',
        'businessNewType' => 'bool',
        'cdiAcptDocQnt' => 'int',
        'cdiAcptDocSum' => 'float',
        'cdiCart2DocQnt' => 'int',
        'cdiCart2DocSum' => 'float',
        'cdiPermDocQnt' => 'int',
        'cdiPermDocSum' => 'float',
        'closeDate' => '\DateTime',
        'comment' => 'string',
        'creditBlocked' => 'bool',
        'creditBlockedBeginDate' => '\DateTime',
        'creditBlockedCause' => 'string',
        'creditBlockedEndDate' => '\DateTime',
        'creditBlockedInitiator' => 'string',
        'creditBlockedTaxAuthorityCode' => 'string',
        'currencyCode' => 'string',
        'dbo' => 'bool',
        'debitBlocked' => 'bool',
        'debitBlockedBeginDate' => '\DateTime',
        'debitBlockedCause' => 'string',
        'debitBlockedEndDate' => '\DateTime',
        'debitBlockedInitiator' => 'string',
        'debitBlockedTaxAuthorityCode' => 'string',
        'minBalance' => 'float',
        'mode' => 'string',
        'name' => 'string',
        'notDelay' => 'bool',
        'number' => 'string',
        'openDate' => '\DateTime',
        'overdraft' => 'float',
        'passive' => 'bool',
        'state' => 'string',
        'type' => 'string',
        'urgent' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'bic' => null,
        'blockedQueuesInfo' => null,
        'blockedSumQueuesInfo' => null,
        'blockedSums' => null,
        'business' => null,
        'businessNewType' => null,
        'cdiAcptDocQnt' => 'int32',
        'cdiAcptDocSum' => null,
        'cdiCart2DocQnt' => 'int32',
        'cdiCart2DocSum' => null,
        'cdiPermDocQnt' => 'int32',
        'cdiPermDocSum' => null,
        'closeDate' => 'date-time',
        'comment' => null,
        'creditBlocked' => null,
        'creditBlockedBeginDate' => 'date-time',
        'creditBlockedCause' => null,
        'creditBlockedEndDate' => 'date-time',
        'creditBlockedInitiator' => null,
        'creditBlockedTaxAuthorityCode' => null,
        'currencyCode' => null,
        'dbo' => null,
        'debitBlocked' => null,
        'debitBlockedBeginDate' => 'date-time',
        'debitBlockedCause' => null,
        'debitBlockedEndDate' => 'date-time',
        'debitBlockedInitiator' => null,
        'debitBlockedTaxAuthorityCode' => null,
        'minBalance' => null,
        'mode' => null,
        'name' => null,
        'notDelay' => null,
        'number' => null,
        'openDate' => 'date-time',
        'overdraft' => null,
        'passive' => null,
        'state' => null,
        'type' => null,
        'urgent' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bic' => 'bic',
        'blockedQueuesInfo' => 'blockedQueuesInfo',
        'blockedSumQueuesInfo' => 'blockedSumQueuesInfo',
        'blockedSums' => 'blockedSums',
        'business' => 'business',
        'businessNewType' => 'businessNewType',
        'cdiAcptDocQnt' => 'cdiAcptDocQnt',
        'cdiAcptDocSum' => 'cdiAcptDocSum',
        'cdiCart2DocQnt' => 'cdiCart2DocQnt',
        'cdiCart2DocSum' => 'cdiCart2DocSum',
        'cdiPermDocQnt' => 'cdiPermDocQnt',
        'cdiPermDocSum' => 'cdiPermDocSum',
        'closeDate' => 'closeDate',
        'comment' => 'comment',
        'creditBlocked' => 'creditBlocked',
        'creditBlockedBeginDate' => 'creditBlockedBeginDate',
        'creditBlockedCause' => 'creditBlockedCause',
        'creditBlockedEndDate' => 'creditBlockedEndDate',
        'creditBlockedInitiator' => 'creditBlockedInitiator',
        'creditBlockedTaxAuthorityCode' => 'creditBlockedTaxAuthorityCode',
        'currencyCode' => 'currencyCode',
        'dbo' => 'dbo',
        'debitBlocked' => 'debitBlocked',
        'debitBlockedBeginDate' => 'debitBlockedBeginDate',
        'debitBlockedCause' => 'debitBlockedCause',
        'debitBlockedEndDate' => 'debitBlockedEndDate',
        'debitBlockedInitiator' => 'debitBlockedInitiator',
        'debitBlockedTaxAuthorityCode' => 'debitBlockedTaxAuthorityCode',
        'minBalance' => 'minBalance',
        'mode' => 'mode',
        'name' => 'name',
        'notDelay' => 'notDelay',
        'number' => 'number',
        'openDate' => 'openDate',
        'overdraft' => 'overdraft',
        'passive' => 'passive',
        'state' => 'state',
        'type' => 'type',
        'urgent' => 'urgent',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bic' => 'setBic',
        'blockedQueuesInfo' => 'setBlockedQueuesInfo',
        'blockedSumQueuesInfo' => 'setBlockedSumQueuesInfo',
        'blockedSums' => 'setBlockedSums',
        'business' => 'setBusiness',
        'businessNewType' => 'setBusinessNewType',
        'cdiAcptDocQnt' => 'setCdiAcptDocQnt',
        'cdiAcptDocSum' => 'setCdiAcptDocSum',
        'cdiCart2DocQnt' => 'setCdiCart2DocQnt',
        'cdiCart2DocSum' => 'setCdiCart2DocSum',
        'cdiPermDocQnt' => 'setCdiPermDocQnt',
        'cdiPermDocSum' => 'setCdiPermDocSum',
        'closeDate' => 'setCloseDate',
        'comment' => 'setComment',
        'creditBlocked' => 'setCreditBlocked',
        'creditBlockedBeginDate' => 'setCreditBlockedBeginDate',
        'creditBlockedCause' => 'setCreditBlockedCause',
        'creditBlockedEndDate' => 'setCreditBlockedEndDate',
        'creditBlockedInitiator' => 'setCreditBlockedInitiator',
        'creditBlockedTaxAuthorityCode' => 'setCreditBlockedTaxAuthorityCode',
        'currencyCode' => 'setCurrencyCode',
        'dbo' => 'setDbo',
        'debitBlocked' => 'setDebitBlocked',
        'debitBlockedBeginDate' => 'setDebitBlockedBeginDate',
        'debitBlockedCause' => 'setDebitBlockedCause',
        'debitBlockedEndDate' => 'setDebitBlockedEndDate',
        'debitBlockedInitiator' => 'setDebitBlockedInitiator',
        'debitBlockedTaxAuthorityCode' => 'setDebitBlockedTaxAuthorityCode',
        'minBalance' => 'setMinBalance',
        'mode' => 'setMode',
        'name' => 'setName',
        'notDelay' => 'setNotDelay',
        'number' => 'setNumber',
        'openDate' => 'setOpenDate',
        'overdraft' => 'setOverdraft',
        'passive' => 'setPassive',
        'state' => 'setState',
        'type' => 'setType',
        'urgent' => 'setUrgent',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bic' => 'getBic',
        'blockedQueuesInfo' => 'getBlockedQueuesInfo',
        'blockedSumQueuesInfo' => 'getBlockedSumQueuesInfo',
        'blockedSums' => 'getBlockedSums',
        'business' => 'getBusiness',
        'businessNewType' => 'getBusinessNewType',
        'cdiAcptDocQnt' => 'getCdiAcptDocQnt',
        'cdiAcptDocSum' => 'getCdiAcptDocSum',
        'cdiCart2DocQnt' => 'getCdiCart2DocQnt',
        'cdiCart2DocSum' => 'getCdiCart2DocSum',
        'cdiPermDocQnt' => 'getCdiPermDocQnt',
        'cdiPermDocSum' => 'getCdiPermDocSum',
        'closeDate' => 'getCloseDate',
        'comment' => 'getComment',
        'creditBlocked' => 'getCreditBlocked',
        'creditBlockedBeginDate' => 'getCreditBlockedBeginDate',
        'creditBlockedCause' => 'getCreditBlockedCause',
        'creditBlockedEndDate' => 'getCreditBlockedEndDate',
        'creditBlockedInitiator' => 'getCreditBlockedInitiator',
        'creditBlockedTaxAuthorityCode' => 'getCreditBlockedTaxAuthorityCode',
        'currencyCode' => 'getCurrencyCode',
        'dbo' => 'getDbo',
        'debitBlocked' => 'getDebitBlocked',
        'debitBlockedBeginDate' => 'getDebitBlockedBeginDate',
        'debitBlockedCause' => 'getDebitBlockedCause',
        'debitBlockedEndDate' => 'getDebitBlockedEndDate',
        'debitBlockedInitiator' => 'getDebitBlockedInitiator',
        'debitBlockedTaxAuthorityCode' => 'getDebitBlockedTaxAuthorityCode',
        'minBalance' => 'getMinBalance',
        'mode' => 'getMode',
        'name' => 'getName',
        'notDelay' => 'getNotDelay',
        'number' => 'getNumber',
        'openDate' => 'getOpenDate',
        'overdraft' => 'getOverdraft',
        'passive' => 'getPassive',
        'state' => 'getState',
        'type' => 'getType',
        'urgent' => 'getUrgent',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bic'] = isset($data['bic']) ? $data['bic'] : null;
        $this->container['blockedQueuesInfo'] = isset($data['blockedQueuesInfo']) ? $data['blockedQueuesInfo'] : null;
        $this->container['blockedSumQueuesInfo'] = isset($data['blockedSumQueuesInfo']) ? $data['blockedSumQueuesInfo'] : null;
        $this->container['blockedSums'] = isset($data['blockedSums']) ? $data['blockedSums'] : null;
        $this->container['business'] = isset($data['business']) ? $data['business'] : null;
        $this->container['businessNewType'] = isset($data['businessNewType']) ? $data['businessNewType'] : null;
        $this->container['cdiAcptDocQnt'] = isset($data['cdiAcptDocQnt']) ? $data['cdiAcptDocQnt'] : null;
        $this->container['cdiAcptDocSum'] = isset($data['cdiAcptDocSum']) ? $data['cdiAcptDocSum'] : null;
        $this->container['cdiCart2DocQnt'] = isset($data['cdiCart2DocQnt']) ? $data['cdiCart2DocQnt'] : null;
        $this->container['cdiCart2DocSum'] = isset($data['cdiCart2DocSum']) ? $data['cdiCart2DocSum'] : null;
        $this->container['cdiPermDocQnt'] = isset($data['cdiPermDocQnt']) ? $data['cdiPermDocQnt'] : null;
        $this->container['cdiPermDocSum'] = isset($data['cdiPermDocSum']) ? $data['cdiPermDocSum'] : null;
        $this->container['closeDate'] = isset($data['closeDate']) ? $data['closeDate'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['creditBlocked'] = isset($data['creditBlocked']) ? $data['creditBlocked'] : null;
        $this->container['creditBlockedBeginDate'] = isset($data['creditBlockedBeginDate']) ? $data['creditBlockedBeginDate'] : null;
        $this->container['creditBlockedCause'] = isset($data['creditBlockedCause']) ? $data['creditBlockedCause'] : null;
        $this->container['creditBlockedEndDate'] = isset($data['creditBlockedEndDate']) ? $data['creditBlockedEndDate'] : null;
        $this->container['creditBlockedInitiator'] = isset($data['creditBlockedInitiator']) ? $data['creditBlockedInitiator'] : null;
        $this->container['creditBlockedTaxAuthorityCode'] = isset($data['creditBlockedTaxAuthorityCode']) ? $data['creditBlockedTaxAuthorityCode'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['dbo'] = isset($data['dbo']) ? $data['dbo'] : null;
        $this->container['debitBlocked'] = isset($data['debitBlocked']) ? $data['debitBlocked'] : null;
        $this->container['debitBlockedBeginDate'] = isset($data['debitBlockedBeginDate']) ? $data['debitBlockedBeginDate'] : null;
        $this->container['debitBlockedCause'] = isset($data['debitBlockedCause']) ? $data['debitBlockedCause'] : null;
        $this->container['debitBlockedEndDate'] = isset($data['debitBlockedEndDate']) ? $data['debitBlockedEndDate'] : null;
        $this->container['debitBlockedInitiator'] = isset($data['debitBlockedInitiator']) ? $data['debitBlockedInitiator'] : null;
        $this->container['debitBlockedTaxAuthorityCode'] = isset($data['debitBlockedTaxAuthorityCode']) ? $data['debitBlockedTaxAuthorityCode'] : null;
        $this->container['minBalance'] = isset($data['minBalance']) ? $data['minBalance'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notDelay'] = isset($data['notDelay']) ? $data['notDelay'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['openDate'] = isset($data['openDate']) ? $data['openDate'] : null;
        $this->container['overdraft'] = isset($data['overdraft']) ? $data['overdraft'] : null;
        $this->container['passive'] = isset($data['passive']) ? $data['passive'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['urgent'] = isset($data['urgent']) ? $data['urgent'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_STANDART,
            self::MODE_FORBIDDEN_RECEIVING,
            self::MODE_ONLY_RECEIVING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_OPEN,
            self::STATE_BLOCKED,
            self::STATE_CLOSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ASSURANCE_REGISTRATION,
            self::TYPE_CALCULATED,
            self::TYPE_TRANSIT,
            self::TYPE_SPECIAL_TRANSIT,
            self::TYPE_BUDGET,
            self::TYPE_LOAN,
            self::TYPE_DEPOSIT,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets bic
     *
     * @return string
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string $bic БИК банка, где открыт счет
     *
     * @return $this
     */
    public function setBic($bic)
    {
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets blockedQueuesInfo
     *
     * @return \common\models\sbbol2\AccountBlockInfo[]
     */
    public function getBlockedQueuesInfo()
    {
        return $this->container['blockedQueuesInfo'];
    }

    /**
     * Sets blockedQueuesInfo
     *
     * @param \common\models\sbbol2\AccountBlockInfo[] $blockedQueuesInfo Приостановления операций по счету выше очередности (блокировки по очередности)
     *
     * @return $this
     */
    public function setBlockedQueuesInfo($blockedQueuesInfo)
    {
        $this->container['blockedQueuesInfo'] = $blockedQueuesInfo;

        return $this;
    }

    /**
     * Gets blockedSumQueuesInfo
     *
     * @return \common\models\sbbol2\AccountBlockInfo[]
     */
    public function getBlockedSumQueuesInfo()
    {
        return $this->container['blockedSumQueuesInfo'];
    }

    /**
     * Sets blockedSumQueuesInfo
     *
     * @param \common\models\sbbol2\AccountBlockInfo[] $blockedSumQueuesInfo Приостановления операций по счету выше очередности на сумму
     *
     * @return $this
     */
    public function setBlockedSumQueuesInfo($blockedSumQueuesInfo)
    {
        $this->container['blockedSumQueuesInfo'] = $blockedSumQueuesInfo;

        return $this;
    }

    /**
     * Gets blockedSums
     *
     * @return \common\models\sbbol2\AccountBlockInfo[]
     */
    public function getBlockedSums()
    {
        return $this->container['blockedSums'];
    }

    /**
     * Sets blockedSums
     *
     * @param \common\models\sbbol2\AccountBlockInfo[] $blockedSums Заблокированные (арестованные) суммы на счёте
     *
     * @return $this
     */
    public function setBlockedSums($blockedSums)
    {
        $this->container['blockedSums'] = $blockedSums;

        return $this;
    }

    /**
     * Gets business
     *
     * @return bool
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param bool $business Признак бизнес-счёта
     *
     * @return $this
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets businessNewType
     *
     * @return bool
     */
    public function getBusinessNewType()
    {
        return $this->container['businessNewType'];
    }

    /**
     * Sets businessNewType
     *
     * @param bool $businessNewType Признак бизнес-счёта 'нового' типа
     *
     * @return $this
     */
    public function setBusinessNewType($businessNewType)
    {
        $this->container['businessNewType'] = $businessNewType;

        return $this;
    }

    /**
     * Gets cdiAcptDocQnt
     *
     * @return int
     */
    public function getCdiAcptDocQnt()
    {
        return $this->container['cdiAcptDocQnt'];
    }

    /**
     * Sets cdiAcptDocQnt
     *
     * @param int $cdiAcptDocQnt Содержит информацию о расчетных документах, ожидающих акцепта. Количество документов
     *
     * @return $this
     */
    public function setCdiAcptDocQnt($cdiAcptDocQnt)
    {
        $this->container['cdiAcptDocQnt'] = $cdiAcptDocQnt;

        return $this;
    }

    /**
     * Gets cdiAcptDocSum
     *
     * @return float
     */
    public function getCdiAcptDocSum()
    {
        return $this->container['cdiAcptDocSum'];
    }

    /**
     * Sets cdiAcptDocSum
     *
     * @param float $cdiAcptDocSum Содержит информацию о расчетных документах, ожидающих акцепта. Сумма документов
     *
     * @return $this
     */
    public function setCdiAcptDocSum($cdiAcptDocSum)
    {
        $this->container['cdiAcptDocSum'] = $cdiAcptDocSum;

        return $this;
    }

    /**
     * Gets cdiCart2DocQnt
     *
     * @return int
     */
    public function getCdiCart2DocQnt()
    {
        return $this->container['cdiCart2DocQnt'];
    }

    /**
     * Sets cdiCart2DocQnt
     *
     * @param int $cdiCart2DocQnt Содержит информацию о расчетных документах, помещённых в картотеку к счету 90902 (картотека 2). Количество документов
     *
     * @return $this
     */
    public function setCdiCart2DocQnt($cdiCart2DocQnt)
    {
        $this->container['cdiCart2DocQnt'] = $cdiCart2DocQnt;

        return $this;
    }

    /**
     * Gets cdiCart2DocSum
     *
     * @return float
     */
    public function getCdiCart2DocSum()
    {
        return $this->container['cdiCart2DocSum'];
    }

    /**
     * Sets cdiCart2DocSum
     *
     * @param float $cdiCart2DocSum Содержит информацию о расчетных документах, помещённых в картотеку к счету 90902 (картотека 2). Сумма документов
     *
     * @return $this
     */
    public function setCdiCart2DocSum($cdiCart2DocSum)
    {
        $this->container['cdiCart2DocSum'] = $cdiCart2DocSum;

        return $this;
    }

    /**
     * Gets cdiPermDocQnt
     *
     * @return int
     */
    public function getCdiPermDocQnt()
    {
        return $this->container['cdiPermDocQnt'];
    }

    /**
     * Sets cdiPermDocQnt
     *
     * @param int $cdiPermDocQnt Содержит информацию о расчетных документах, ожидающих разрешения на проведение операции. Количество документов
     *
     * @return $this
     */
    public function setCdiPermDocQnt($cdiPermDocQnt)
    {
        $this->container['cdiPermDocQnt'] = $cdiPermDocQnt;

        return $this;
    }

    /**
     * Gets cdiPermDocSum
     *
     * @return float
     */
    public function getCdiPermDocSum()
    {
        return $this->container['cdiPermDocSum'];
    }

    /**
     * Sets cdiPermDocSum
     *
     * @param float $cdiPermDocSum Содержит информацию о расчетных документах, ожидающих разрешения на проведение операции. Сумма документов
     *
     * @return $this
     */
    public function setCdiPermDocSum($cdiPermDocSum)
    {
        $this->container['cdiPermDocSum'] = $cdiPermDocSum;

        return $this;
    }

    /**
     * Gets closeDate
     *
     * @return \DateTime
     */
    public function getCloseDate()
    {
        return $this->container['closeDate'];
    }

    /**
     * Sets closeDate
     *
     * @param \DateTime $closeDate Дата закрытия счета
     *
     * @return $this
     */
    public function setCloseDate($closeDate)
    {
        $this->container['closeDate'] = $closeDate;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Примечание
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets creditBlocked
     *
     * @return bool
     */
    public function getCreditBlocked()
    {
        return $this->container['creditBlocked'];
    }

    /**
     * Sets creditBlocked
     *
     * @param bool $creditBlocked Признак полной блокировки счета по кредиту
     *
     * @return $this
     */
    public function setCreditBlocked($creditBlocked)
    {
        $this->container['creditBlocked'] = $creditBlocked;

        return $this;
    }

    /**
     * Gets creditBlockedBeginDate
     *
     * @return \DateTime
     */
    public function getCreditBlockedBeginDate()
    {
        return $this->container['creditBlockedBeginDate'];
    }

    /**
     * Sets creditBlockedBeginDate
     *
     * @param \DateTime $creditBlockedBeginDate Дата начала действия ограничения
     *
     * @return $this
     */
    public function setCreditBlockedBeginDate($creditBlockedBeginDate)
    {
        $this->container['creditBlockedBeginDate'] = $creditBlockedBeginDate;

        return $this;
    }

    /**
     * Gets creditBlockedCause
     *
     * @return string
     */
    public function getCreditBlockedCause()
    {
        return $this->container['creditBlockedCause'];
    }

    /**
     * Sets creditBlockedCause
     *
     * @param string $creditBlockedCause Основание ареста
     *
     * @return $this
     */
    public function setCreditBlockedCause($creditBlockedCause)
    {
        $this->container['creditBlockedCause'] = $creditBlockedCause;

        return $this;
    }

    /**
     * Gets creditBlockedEndDate
     *
     * @return \DateTime
     */
    public function getCreditBlockedEndDate()
    {
        return $this->container['creditBlockedEndDate'];
    }

    /**
     * Sets creditBlockedEndDate
     *
     * @param \DateTime $creditBlockedEndDate Дата снятия ограничения
     *
     * @return $this
     */
    public function setCreditBlockedEndDate($creditBlockedEndDate)
    {
        $this->container['creditBlockedEndDate'] = $creditBlockedEndDate;

        return $this;
    }

    /**
     * Gets creditBlockedInitiator
     *
     * @return string
     */
    public function getCreditBlockedInitiator()
    {
        return $this->container['creditBlockedInitiator'];
    }

    /**
     * Sets creditBlockedInitiator
     *
     * @param string $creditBlockedInitiator Наименование органа, наложившего арест
     *
     * @return $this
     */
    public function setCreditBlockedInitiator($creditBlockedInitiator)
    {
        $this->container['creditBlockedInitiator'] = $creditBlockedInitiator;

        return $this;
    }

    /**
     * Gets creditBlockedTaxAuthorityCode
     *
     * @return string
     */
    public function getCreditBlockedTaxAuthorityCode()
    {
        return $this->container['creditBlockedTaxAuthorityCode'];
    }

    /**
     * Sets creditBlockedTaxAuthorityCode
     *
     * @param string $creditBlockedTaxAuthorityCode Код налогового органа, наложившего арест
     *
     * @return $this
     */
    public function setCreditBlockedTaxAuthorityCode($creditBlockedTaxAuthorityCode)
    {
        $this->container['creditBlockedTaxAuthorityCode'] = $creditBlockedTaxAuthorityCode;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string $currencyCode Числовой код валюты счета
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets dbo
     *
     * @return bool
     */
    public function getDbo()
    {
        return $this->container['dbo'];
    }

    /**
     * Sets dbo
     *
     * @param bool $dbo Признак обслуживания в ДБО
     *
     * @return $this
     */
    public function setDbo($dbo)
    {
        $this->container['dbo'] = $dbo;

        return $this;
    }

    /**
     * Gets debitBlocked
     *
     * @return bool
     */
    public function getDebitBlocked()
    {
        return $this->container['debitBlocked'];
    }

    /**
     * Sets debitBlocked
     *
     * @param bool $debitBlocked Признак полной блокировки счета по дебету
     *
     * @return $this
     */
    public function setDebitBlocked($debitBlocked)
    {
        $this->container['debitBlocked'] = $debitBlocked;

        return $this;
    }

    /**
     * Gets debitBlockedBeginDate
     *
     * @return \DateTime
     */
    public function getDebitBlockedBeginDate()
    {
        return $this->container['debitBlockedBeginDate'];
    }

    /**
     * Sets debitBlockedBeginDate
     *
     * @param \DateTime $debitBlockedBeginDate Дата начала действия ограничения
     *
     * @return $this
     */
    public function setDebitBlockedBeginDate($debitBlockedBeginDate)
    {
        $this->container['debitBlockedBeginDate'] = $debitBlockedBeginDate;

        return $this;
    }

    /**
     * Gets debitBlockedCause
     *
     * @return string
     */
    public function getDebitBlockedCause()
    {
        return $this->container['debitBlockedCause'];
    }

    /**
     * Sets debitBlockedCause
     *
     * @param string $debitBlockedCause Основание ареста
     *
     * @return $this
     */
    public function setDebitBlockedCause($debitBlockedCause)
    {
        $this->container['debitBlockedCause'] = $debitBlockedCause;

        return $this;
    }

    /**
     * Gets debitBlockedEndDate
     *
     * @return \DateTime
     */
    public function getDebitBlockedEndDate()
    {
        return $this->container['debitBlockedEndDate'];
    }

    /**
     * Sets debitBlockedEndDate
     *
     * @param \DateTime $debitBlockedEndDate Дата снятия ограничения
     *
     * @return $this
     */
    public function setDebitBlockedEndDate($debitBlockedEndDate)
    {
        $this->container['debitBlockedEndDate'] = $debitBlockedEndDate;

        return $this;
    }

    /**
     * Gets debitBlockedInitiator
     *
     * @return string
     */
    public function getDebitBlockedInitiator()
    {
        return $this->container['debitBlockedInitiator'];
    }

    /**
     * Sets debitBlockedInitiator
     *
     * @param string $debitBlockedInitiator Наименование органа, наложившего арест
     *
     * @return $this
     */
    public function setDebitBlockedInitiator($debitBlockedInitiator)
    {
        $this->container['debitBlockedInitiator'] = $debitBlockedInitiator;

        return $this;
    }

    /**
     * Gets debitBlockedTaxAuthorityCode
     *
     * @return string
     */
    public function getDebitBlockedTaxAuthorityCode()
    {
        return $this->container['debitBlockedTaxAuthorityCode'];
    }

    /**
     * Sets debitBlockedTaxAuthorityCode
     *
     * @param string $debitBlockedTaxAuthorityCode Код налогового органа, наложившего арест
     *
     * @return $this
     */
    public function setDebitBlockedTaxAuthorityCode($debitBlockedTaxAuthorityCode)
    {
        $this->container['debitBlockedTaxAuthorityCode'] = $debitBlockedTaxAuthorityCode;

        return $this;
    }

    /**
     * Gets minBalance
     *
     * @return float
     */
    public function getMinBalance()
    {
        return $this->container['minBalance'];
    }

    /**
     * Sets minBalance
     *
     * @param float $minBalance Минимальный поддерживаемый (неснижаемый) остаток на счете
     *
     * @return $this
     */
    public function setMinBalance($minBalance)
    {
        $this->container['minBalance'] = $minBalance;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode Режим работы счёта
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Наименование счета
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notDelay
     *
     * @return bool
     */
    public function getNotDelay()
    {
        return $this->container['notDelay'];
    }

    /**
     * Sets notDelay
     *
     * @param bool $notDelay Признак возможности проведения неотложных платежей
     *
     * @return $this
     */
    public function setNotDelay($notDelay)
    {
        $this->container['notDelay'] = $notDelay;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер счета (20 сиволов)
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets openDate
     *
     * @return \DateTime
     */
    public function getOpenDate()
    {
        return $this->container['openDate'];
    }

    /**
     * Sets openDate
     *
     * @param \DateTime $openDate Дата открытия счета
     *
     * @return $this
     */
    public function setOpenDate($openDate)
    {
        $this->container['openDate'] = $openDate;

        return $this;
    }

    /**
     * Gets overdraft
     *
     * @return float
     */
    public function getOverdraft()
    {
        return $this->container['overdraft'];
    }

    /**
     * Sets overdraft
     *
     * @param float $overdraft Сумма общего лимита овердрафта в валюте счёта
     *
     * @return $this
     */
    public function setOverdraft($overdraft)
    {
        $this->container['overdraft'] = $overdraft;

        return $this;
    }

    /**
     * Gets passive
     *
     * @return bool
     */
    public function getPassive()
    {
        return $this->container['passive'];
    }

    /**
     * Sets passive
     *
     * @param bool $passive Признак пассивности счета
     *
     * @return $this
     */
    public function setPassive($passive)
    {
        $this->container['passive'] = $passive;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Состояние счета
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Тип счёта
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets urgent
     *
     * @return bool
     */
    public function getUrgent()
    {
        return $this->container['urgent'];
    }

    /**
     * Sets urgent
     *
     * @param bool $urgent Признак возможности проведения срочных платежей
     *
     * @return $this
     */
    public function setUrgent($urgent)
    {
        $this->container['urgent'] = $urgent;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
