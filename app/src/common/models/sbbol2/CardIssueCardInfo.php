<?php
/**
 * CardIssueCardInfo
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * CardIssueCardInfo Class Doc Comment
 *
 * @category Class
 * @description Зарплатная карта
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class CardIssueCardInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CardIssueCardInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'bonusId' => 'string',
        'bonusNum' => 'string',
        'cardCurrName' => 'string',
        'cardTypeCode' => 'string',
        'cardTypeName' => 'string',
        'embossedTextFirstName' => 'string',
        'embossedTextSurname' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'bonusId' => null,
        'bonusNum' => null,
        'cardCurrName' => null,
        'cardTypeCode' => null,
        'cardTypeName' => null,
        'embossedTextFirstName' => null,
        'embossedTextSurname' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bonusId' => 'bonusId',
        'bonusNum' => 'bonusNum',
        'cardCurrName' => 'cardCurrName',
        'cardTypeCode' => 'cardTypeCode',
        'cardTypeName' => 'cardTypeName',
        'embossedTextFirstName' => 'embossedTextFirstName',
        'embossedTextSurname' => 'embossedTextSurname',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bonusId' => 'setBonusId',
        'bonusNum' => 'setBonusNum',
        'cardCurrName' => 'setCardCurrName',
        'cardTypeCode' => 'setCardTypeCode',
        'cardTypeName' => 'setCardTypeName',
        'embossedTextFirstName' => 'setEmbossedTextFirstName',
        'embossedTextSurname' => 'setEmbossedTextSurname',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bonusId' => 'getBonusId',
        'bonusNum' => 'getBonusNum',
        'cardCurrName' => 'getCardCurrName',
        'cardTypeCode' => 'getCardTypeCode',
        'cardTypeName' => 'getCardTypeName',
        'embossedTextFirstName' => 'getEmbossedTextFirstName',
        'embossedTextSurname' => 'getEmbossedTextSurname',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bonusId'] = isset($data['bonusId']) ? $data['bonusId'] : null;
        $this->container['bonusNum'] = isset($data['bonusNum']) ? $data['bonusNum'] : null;
        $this->container['cardCurrName'] = isset($data['cardCurrName']) ? $data['cardCurrName'] : null;
        $this->container['cardTypeCode'] = isset($data['cardTypeCode']) ? $data['cardTypeCode'] : null;
        $this->container['cardTypeName'] = isset($data['cardTypeName']) ? $data['cardTypeName'] : null;
        $this->container['embossedTextFirstName'] = isset($data['embossedTextFirstName']) ? $data['embossedTextFirstName'] : null;
        $this->container['embossedTextSurname'] = isset($data['embossedTextSurname']) ? $data['embossedTextSurname'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cardCurrName'] === null) {
            $invalidProperties[] = "'cardCurrName' can't be null";
        }
        if ($this->container['cardTypeCode'] === null) {
            $invalidProperties[] = "'cardTypeCode' can't be null";
        }
        if ($this->container['cardTypeName'] === null) {
            $invalidProperties[] = "'cardTypeName' can't be null";
        }
        if ($this->container['embossedTextFirstName'] === null) {
            $invalidProperties[] = "'embossedTextFirstName' can't be null";
        }
        if ($this->container['embossedTextSurname'] === null) {
            $invalidProperties[] = "'embossedTextSurname' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets bonusId
     *
     * @return string
     */
    public function getBonusId()
    {
        return $this->container['bonusId'];
    }

    /**
     * Sets bonusId
     *
     * @param string $bonusId Идентификатор бонус программы
     *
     * @return $this
     */
    public function setBonusId($bonusId)
    {
        $this->container['bonusId'] = $bonusId;

        return $this;
    }

    /**
     * Gets bonusNum
     *
     * @return string
     */
    public function getBonusNum()
    {
        return $this->container['bonusNum'];
    }

    /**
     * Sets bonusNum
     *
     * @param string $bonusNum Номер участника в бонусной программе
     *
     * @return $this
     */
    public function setBonusNum($bonusNum)
    {
        $this->container['bonusNum'] = $bonusNum;

        return $this;
    }

    /**
     * Gets cardCurrName
     *
     * @return string
     */
    public function getCardCurrName()
    {
        return $this->container['cardCurrName'];
    }

    /**
     * Sets cardCurrName
     *
     * @param string $cardCurrName Цифровой код валюты счета
     *
     * @return $this
     */
    public function setCardCurrName($cardCurrName)
    {
        $this->container['cardCurrName'] = $cardCurrName;

        return $this;
    }

    /**
     * Gets cardTypeCode
     *
     * @return string
     */
    public function getCardTypeCode()
    {
        return $this->container['cardTypeCode'];
    }

    /**
     * Sets cardTypeCode
     *
     * @param string $cardTypeCode Код типа карты
     *
     * @return $this
     */
    public function setCardTypeCode($cardTypeCode)
    {
        $this->container['cardTypeCode'] = $cardTypeCode;

        return $this;
    }

    /**
     * Gets cardTypeName
     *
     * @return string
     */
    public function getCardTypeName()
    {
        return $this->container['cardTypeName'];
    }

    /**
     * Sets cardTypeName
     *
     * @param string $cardTypeName Тип карты
     *
     * @return $this
     */
    public function setCardTypeName($cardTypeName)
    {
        $this->container['cardTypeName'] = $cardTypeName;

        return $this;
    }

    /**
     * Gets embossedTextFirstName
     *
     * @return string
     */
    public function getEmbossedTextFirstName()
    {
        return $this->container['embossedTextFirstName'];
    }

    /**
     * Sets embossedTextFirstName
     *
     * @param string $embossedTextFirstName Текст эмбоссированный Имя
     *
     * @return $this
     */
    public function setEmbossedTextFirstName($embossedTextFirstName)
    {
        $this->container['embossedTextFirstName'] = $embossedTextFirstName;

        return $this;
    }

    /**
     * Gets embossedTextSurname
     *
     * @return string
     */
    public function getEmbossedTextSurname()
    {
        return $this->container['embossedTextSurname'];
    }

    /**
     * Sets embossedTextSurname
     *
     * @param string $embossedTextSurname Текст эмбоссированный Фамилия
     *
     * @return $this
     */
    public function setEmbossedTextSurname($embossedTextSurname)
    {
        $this->container['embossedTextSurname'] = $embossedTextSurname;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
