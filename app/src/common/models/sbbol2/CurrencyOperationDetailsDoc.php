<?php
/**
 * CurrencyOperationDetailsDoc
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * CurrencyOperationDetailsDoc Class Doc Comment
 *
 * @category Class
 * @description Документ валютного контроля
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class CurrencyOperationDetailsDoc implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    const CONTRACT_NUMBER_TYPE__0 = '0';
    const CONTRACT_NUMBER_TYPE__1 = '1';
    const CONTRACT_NUMBER_TYPE__2 = '2';
    const DATA_COMPOSITION__1 = '1';
    const DATA_COMPOSITION__2 = '2';
    const DATA_COMPOSITION__3 = '3';
    const DATA_COMPOSITION__5 = '5';
    const DATA_COMPOSITION__6 = '6';
    const DATA_COMPOSITION__8 = '8';
    const OPERATION_REASON__1 = '1';
    const OPERATION_REASON__2 = '2';
    const OPERATION_REASON__3 = '3';
    const OPERATION_REASON__4 = '4';
    const PAYMENT_CONDITIONS__0 = '0';
    const PAYMENT_CONDITIONS__1 = '1';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CurrencyOperationDetailsDoc';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'additionalInfo' => 'string',
        'amount' => '\common\models\sbbol2\AmountCurrency',
        'contractDate' => '\DateTime',
        'contractNumber' => 'string',
        'contractNumberType' => 'string',
        'creditAmount' => '\common\models\sbbol2\AmountCurrency',
        'dataComposition' => 'string',
        'expectedDate' => '\DateTime',
        'operationCode' => 'string',
        'operationCodeDescription' => 'string',
        'operationReason' => 'string',
        'passportNumber' => 'string',
        'paymentConditions' => 'string',
        'serialNumber' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'additionalInfo' => null,
        'amount' => null,
        'contractDate' => 'date-time',
        'contractNumber' => null,
        'contractNumberType' => null,
        'creditAmount' => null,
        'dataComposition' => null,
        'expectedDate' => 'date-time',
        'operationCode' => null,
        'operationCodeDescription' => null,
        'operationReason' => null,
        'passportNumber' => null,
        'paymentConditions' => null,
        'serialNumber' => 'int32',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalInfo' => 'additionalInfo',
        'amount' => 'amount',
        'contractDate' => 'contractDate',
        'contractNumber' => 'contractNumber',
        'contractNumberType' => 'contractNumberType',
        'creditAmount' => 'creditAmount',
        'dataComposition' => 'dataComposition',
        'expectedDate' => 'expectedDate',
        'operationCode' => 'operationCode',
        'operationCodeDescription' => 'operationCodeDescription',
        'operationReason' => 'operationReason',
        'passportNumber' => 'passportNumber',
        'paymentConditions' => 'paymentConditions',
        'serialNumber' => 'serialNumber',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalInfo' => 'setAdditionalInfo',
        'amount' => 'setAmount',
        'contractDate' => 'setContractDate',
        'contractNumber' => 'setContractNumber',
        'contractNumberType' => 'setContractNumberType',
        'creditAmount' => 'setCreditAmount',
        'dataComposition' => 'setDataComposition',
        'expectedDate' => 'setExpectedDate',
        'operationCode' => 'setOperationCode',
        'operationCodeDescription' => 'setOperationCodeDescription',
        'operationReason' => 'setOperationReason',
        'passportNumber' => 'setPassportNumber',
        'paymentConditions' => 'setPaymentConditions',
        'serialNumber' => 'setSerialNumber',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalInfo' => 'getAdditionalInfo',
        'amount' => 'getAmount',
        'contractDate' => 'getContractDate',
        'contractNumber' => 'getContractNumber',
        'contractNumberType' => 'getContractNumberType',
        'creditAmount' => 'getCreditAmount',
        'dataComposition' => 'getDataComposition',
        'expectedDate' => 'getExpectedDate',
        'operationCode' => 'getOperationCode',
        'operationCodeDescription' => 'getOperationCodeDescription',
        'operationReason' => 'getOperationReason',
        'passportNumber' => 'getPassportNumber',
        'paymentConditions' => 'getPaymentConditions',
        'serialNumber' => 'getSerialNumber',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additionalInfo'] = isset($data['additionalInfo']) ? $data['additionalInfo'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['contractDate'] = isset($data['contractDate']) ? $data['contractDate'] : null;
        $this->container['contractNumber'] = isset($data['contractNumber']) ? $data['contractNumber'] : null;
        $this->container['contractNumberType'] = isset($data['contractNumberType']) ? $data['contractNumberType'] : null;
        $this->container['creditAmount'] = isset($data['creditAmount']) ? $data['creditAmount'] : null;
        $this->container['dataComposition'] = isset($data['dataComposition']) ? $data['dataComposition'] : null;
        $this->container['expectedDate'] = isset($data['expectedDate']) ? $data['expectedDate'] : null;
        $this->container['operationCode'] = isset($data['operationCode']) ? $data['operationCode'] : null;
        $this->container['operationCodeDescription'] = isset($data['operationCodeDescription']) ? $data['operationCodeDescription'] : null;
        $this->container['operationReason'] = isset($data['operationReason']) ? $data['operationReason'] : null;
        $this->container['passportNumber'] = isset($data['passportNumber']) ? $data['passportNumber'] : null;
        $this->container['paymentConditions'] = isset($data['paymentConditions']) ? $data['paymentConditions'] : null;
        $this->container['serialNumber'] = isset($data['serialNumber']) ? $data['serialNumber'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContractNumberTypeAllowableValues()
    {
        return [
            self::CONTRACT_NUMBER_TYPE__0,
            self::CONTRACT_NUMBER_TYPE__1,
            self::CONTRACT_NUMBER_TYPE__2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataCompositionAllowableValues()
    {
        return [
            self::DATA_COMPOSITION__1,
            self::DATA_COMPOSITION__2,
            self::DATA_COMPOSITION__3,
            self::DATA_COMPOSITION__5,
            self::DATA_COMPOSITION__6,
            self::DATA_COMPOSITION__8,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationReasonAllowableValues()
    {
        return [
            self::OPERATION_REASON__1,
            self::OPERATION_REASON__2,
            self::OPERATION_REASON__3,
            self::OPERATION_REASON__4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentConditionsAllowableValues()
    {
        return [
            self::PAYMENT_CONDITIONS__0,
            self::PAYMENT_CONDITIONS__1,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getContractNumberTypeAllowableValues();
        if (!is_null($this->container['contractNumberType']) && !in_array($this->container['contractNumberType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contractNumberType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDataCompositionAllowableValues();
        if (!is_null($this->container['dataComposition']) && !in_array($this->container['dataComposition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'dataComposition', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['operationCode'] === null) {
            $invalidProperties[] = "'operationCode' can't be null";
        }
        if ($this->container['operationCodeDescription'] === null) {
            $invalidProperties[] = "'operationCodeDescription' can't be null";
        }
        if ($this->container['operationReason'] === null) {
            $invalidProperties[] = "'operationReason' can't be null";
        }
        $allowedValues = $this->getOperationReasonAllowableValues();
        if (!is_null($this->container['operationReason']) && !in_array($this->container['operationReason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operationReason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentConditionsAllowableValues();
        if (!is_null($this->container['paymentConditions']) && !in_array($this->container['paymentConditions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'paymentConditions', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets additionalInfo
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->container['additionalInfo'];
    }

    /**
     * Sets additionalInfo
     *
     * @param string $additionalInfo Примечание
     *
     * @return $this
     */
    public function setAdditionalInfo($additionalInfo)
    {
        $this->container['additionalInfo'] = $additionalInfo;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \common\models\sbbol2\AmountCurrency
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \common\models\sbbol2\AmountCurrency $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets contractDate
     *
     * @return \DateTime
     */
    public function getContractDate()
    {
        return $this->container['contractDate'];
    }

    /**
     * Sets contractDate
     *
     * @param \DateTime $contractDate Дата договора
     *
     * @return $this
     */
    public function setContractDate($contractDate)
    {
        $this->container['contractDate'] = $contractDate;

        return $this;
    }

    /**
     * Gets contractNumber
     *
     * @return string
     */
    public function getContractNumber()
    {
        return $this->container['contractNumber'];
    }

    /**
     * Sets contractNumber
     *
     * @param string $contractNumber Номер договора
     *
     * @return $this
     */
    public function setContractNumber($contractNumber)
    {
        $this->container['contractNumber'] = $contractNumber;

        return $this;
    }

    /**
     * Gets contractNumberType
     *
     * @return string
     */
    public function getContractNumberType()
    {
        return $this->container['contractNumberType'];
    }

    /**
     * Sets contractNumberType
     *
     * @param string $contractNumberType Тип указание номера договора
     *
     * @return $this
     */
    public function setContractNumberType($contractNumberType)
    {
        $allowedValues = $this->getContractNumberTypeAllowableValues();
        if (!is_null($contractNumberType) && !in_array($contractNumberType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contractNumberType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contractNumberType'] = $contractNumberType;

        return $this;
    }

    /**
     * Gets creditAmount
     *
     * @return \common\models\sbbol2\AmountCurrency
     */
    public function getCreditAmount()
    {
        return $this->container['creditAmount'];
    }

    /**
     * Sets creditAmount
     *
     * @param \common\models\sbbol2\AmountCurrency $creditAmount creditAmount
     *
     * @return $this
     */
    public function setCreditAmount($creditAmount)
    {
        $this->container['creditAmount'] = $creditAmount;

        return $this;
    }

    /**
     * Gets dataComposition
     *
     * @return string
     */
    public function getDataComposition()
    {
        return $this->container['dataComposition'];
    }

    /**
     * Sets dataComposition
     *
     * @param string $dataComposition Состав предоставляемой информации
     *
     * @return $this
     */
    public function setDataComposition($dataComposition)
    {
        $allowedValues = $this->getDataCompositionAllowableValues();
        if (!is_null($dataComposition) && !in_array($dataComposition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dataComposition', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dataComposition'] = $dataComposition;

        return $this;
    }

    /**
     * Gets expectedDate
     *
     * @return \DateTime
     */
    public function getExpectedDate()
    {
        return $this->container['expectedDate'];
    }

    /**
     * Sets expectedDate
     *
     * @param \DateTime $expectedDate Ожидаемый срок
     *
     * @return $this
     */
    public function setExpectedDate($expectedDate)
    {
        $this->container['expectedDate'] = $expectedDate;

        return $this;
    }

    /**
     * Gets operationCode
     *
     * @return string
     */
    public function getOperationCode()
    {
        return $this->container['operationCode'];
    }

    /**
     * Sets operationCode
     *
     * @param string $operationCode Код вида валютной операции
     *
     * @return $this
     */
    public function setOperationCode($operationCode)
    {
        $this->container['operationCode'] = $operationCode;

        return $this;
    }

    /**
     * Gets operationCodeDescription
     *
     * @return string
     */
    public function getOperationCodeDescription()
    {
        return $this->container['operationCodeDescription'];
    }

    /**
     * Sets operationCodeDescription
     *
     * @param string $operationCodeDescription Описание валютной операции
     *
     * @return $this
     */
    public function setOperationCodeDescription($operationCodeDescription)
    {
        $this->container['operationCodeDescription'] = $operationCodeDescription;

        return $this;
    }

    /**
     * Gets operationReason
     *
     * @return string
     */
    public function getOperationReason()
    {
        return $this->container['operationReason'];
    }

    /**
     * Sets operationReason
     *
     * @param string $operationReason Основание проведения операции
     *
     * @return $this
     */
    public function setOperationReason($operationReason)
    {
        $allowedValues = $this->getOperationReasonAllowableValues();
        if (!in_array($operationReason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operationReason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operationReason'] = $operationReason;

        return $this;
    }

    /**
     * Gets passportNumber
     *
     * @return string
     */
    public function getPassportNumber()
    {
        return $this->container['passportNumber'];
    }

    /**
     * Sets passportNumber
     *
     * @param string $passportNumber Уникальный номер контракта (кредитного договора)
     *
     * @return $this
     */
    public function setPassportNumber($passportNumber)
    {
        $this->container['passportNumber'] = $passportNumber;

        return $this;
    }

    /**
     * Gets paymentConditions
     *
     * @return string
     */
    public function getPaymentConditions()
    {
        return $this->container['paymentConditions'];
    }

    /**
     * Sets paymentConditions
     *
     * @param string $paymentConditions Условия расчета
     *
     * @return $this
     */
    public function setPaymentConditions($paymentConditions)
    {
        $allowedValues = $this->getPaymentConditionsAllowableValues();
        if (!is_null($paymentConditions) && !in_array($paymentConditions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paymentConditions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentConditions'] = $paymentConditions;

        return $this;
    }

    /**
     * Gets serialNumber
     *
     * @return int
     */
    public function getSerialNumber()
    {
        return $this->container['serialNumber'];
    }

    /**
     * Sets serialNumber
     *
     * @param int $serialNumber Номер по порядку
     *
     * @return $this
     */
    public function setSerialNumber($serialNumber)
    {
        $this->container['serialNumber'] = $serialNumber;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
