<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @description Счёт на оплату по фиксированным реквизитам
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    const URGENCY_CODE_INTERNAL = 'INTERNAL';
    const URGENCY_CODE_INTERNAL_NOTIF = 'INTERNAL_NOTIF';
    const URGENCY_CODE_OFFHOURS = 'OFFHOURS';
    const URGENCY_CODE_BESP = 'BESP';
    const URGENCY_CODE_NORMAL = 'NORMAL';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Invoice';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'amount' => 'float',
        'date' => '\DateTime',
        'deliveryKind' => 'string',
        'expirationDate' => '\DateTime',
        'externalId' => 'string',
        'operationCode' => 'string',
        'orderNumber' => 'string',
        'payeeAccount' => 'string',
        'payeeOrgIdHash' => 'string',
        'paymentNumber' => 'string',
        'priority' => 'string',
        'purpose' => 'string',
        'urgencyCode' => 'string',
        'vat' => '\common\models\sbbol2\Vat',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'amount' => null,
        'date' => 'date-time',
        'deliveryKind' => null,
        'expirationDate' => 'date-time',
        'externalId' => null,
        'operationCode' => null,
        'orderNumber' => null,
        'payeeAccount' => null,
        'payeeOrgIdHash' => null,
        'paymentNumber' => null,
        'priority' => null,
        'purpose' => null,
        'urgencyCode' => null,
        'vat' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'date' => 'date',
        'deliveryKind' => 'deliveryKind',
        'expirationDate' => 'expirationDate',
        'externalId' => 'externalId',
        'operationCode' => 'operationCode',
        'orderNumber' => 'orderNumber',
        'payeeAccount' => 'payeeAccount',
        'payeeOrgIdHash' => 'payeeOrgIdHash',
        'paymentNumber' => 'paymentNumber',
        'priority' => 'priority',
        'purpose' => 'purpose',
        'urgencyCode' => 'urgencyCode',
        'vat' => 'vat',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'date' => 'setDate',
        'deliveryKind' => 'setDeliveryKind',
        'expirationDate' => 'setExpirationDate',
        'externalId' => 'setExternalId',
        'operationCode' => 'setOperationCode',
        'orderNumber' => 'setOrderNumber',
        'payeeAccount' => 'setPayeeAccount',
        'payeeOrgIdHash' => 'setPayeeOrgIdHash',
        'paymentNumber' => 'setPaymentNumber',
        'priority' => 'setPriority',
        'purpose' => 'setPurpose',
        'urgencyCode' => 'setUrgencyCode',
        'vat' => 'setVat',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'date' => 'getDate',
        'deliveryKind' => 'getDeliveryKind',
        'expirationDate' => 'getExpirationDate',
        'externalId' => 'getExternalId',
        'operationCode' => 'getOperationCode',
        'orderNumber' => 'getOrderNumber',
        'payeeAccount' => 'getPayeeAccount',
        'payeeOrgIdHash' => 'getPayeeOrgIdHash',
        'paymentNumber' => 'getPaymentNumber',
        'priority' => 'getPriority',
        'purpose' => 'getPurpose',
        'urgencyCode' => 'getUrgencyCode',
        'vat' => 'getVat',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['deliveryKind'] = isset($data['deliveryKind']) ? $data['deliveryKind'] : null;
        $this->container['expirationDate'] = isset($data['expirationDate']) ? $data['expirationDate'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['operationCode'] = isset($data['operationCode']) ? $data['operationCode'] : null;
        $this->container['orderNumber'] = isset($data['orderNumber']) ? $data['orderNumber'] : null;
        $this->container['payeeAccount'] = isset($data['payeeAccount']) ? $data['payeeAccount'] : null;
        $this->container['payeeOrgIdHash'] = isset($data['payeeOrgIdHash']) ? $data['payeeOrgIdHash'] : null;
        $this->container['paymentNumber'] = isset($data['paymentNumber']) ? $data['paymentNumber'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['urgencyCode'] = isset($data['urgencyCode']) ? $data['urgencyCode'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUrgencyCodeAllowableValues()
    {
        return [
            self::URGENCY_CODE_INTERNAL,
            self::URGENCY_CODE_INTERNAL_NOTIF,
            self::URGENCY_CODE_OFFHOURS,
            self::URGENCY_CODE_BESP,
            self::URGENCY_CODE_NORMAL,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['payeeAccount'] === null) {
            $invalidProperties[] = "'payeeAccount' can't be null";
        }
        if ($this->container['purpose'] === null) {
            $invalidProperties[] = "'purpose' can't be null";
        }
        $allowedValues = $this->getUrgencyCodeAllowableValues();
        if (!is_null($this->container['urgencyCode']) && !in_array($this->container['urgencyCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'urgencyCode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Сумма платежа
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата составления документа
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets deliveryKind
     *
     * @return string
     */
    public function getDeliveryKind()
    {
        return $this->container['deliveryKind'];
    }

    /**
     * Sets deliveryKind
     *
     * @param string $deliveryKind Вид платежа
     *
     * @return $this
     */
    public function setDeliveryKind($deliveryKind)
    {
        $this->container['deliveryKind'] = $deliveryKind;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param \DateTime $expirationDate Дата истечения заказа (платёж должен быть подтверждён клиентом)
     *
     * @return $this
     */
    public function setExpirationDate($expirationDate)
    {
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Идентификатор документа, присвоенный партнёром (UUID)
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets operationCode
     *
     * @return string
     */
    public function getOperationCode()
    {
        return $this->container['operationCode'];
    }

    /**
     * Sets operationCode
     *
     * @param string $operationCode Код операции
     *
     * @return $this
     */
    public function setOperationCode($operationCode)
    {
        $this->container['operationCode'] = $operationCode;

        return $this;
    }

    /**
     * Gets orderNumber
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['orderNumber'];
    }

    /**
     * Sets orderNumber
     *
     * @param string $orderNumber Номер заказа
     *
     * @return $this
     */
    public function setOrderNumber($orderNumber)
    {
        $this->container['orderNumber'] = $orderNumber;

        return $this;
    }

    /**
     * Gets payeeAccount
     *
     * @return string
     */
    public function getPayeeAccount()
    {
        return $this->container['payeeAccount'];
    }

    /**
     * Sets payeeAccount
     *
     * @param string $payeeAccount Счёт получателя платежа
     *
     * @return $this
     */
    public function setPayeeAccount($payeeAccount)
    {
        $this->container['payeeAccount'] = $payeeAccount;

        return $this;
    }

    /**
     * Gets payeeOrgIdHash
     *
     * @return string
     */
    public function getPayeeOrgIdHash()
    {
        return $this->container['payeeOrgIdHash'];
    }

    /**
     * Sets payeeOrgIdHash
     *
     * @param string $payeeOrgIdHash Идентификатор получателя платежа
     *
     * @return $this
     */
    public function setPayeeOrgIdHash($payeeOrgIdHash)
    {
        $this->container['payeeOrgIdHash'] = $payeeOrgIdHash;

        return $this;
    }

    /**
     * Gets paymentNumber
     *
     * @return string
     */
    public function getPaymentNumber()
    {
        return $this->container['paymentNumber'];
    }

    /**
     * Sets paymentNumber
     *
     * @param string $paymentNumber Номер платёжного документа
     *
     * @return $this
     */
    public function setPaymentNumber($paymentNumber)
    {
        $this->container['paymentNumber'] = $paymentNumber;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority Очерёдность платежа
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose Назначение платежа
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets urgencyCode
     *
     * @return string
     */
    public function getUrgencyCode()
    {
        return $this->container['urgencyCode'];
    }

    /**
     * Sets urgencyCode
     *
     * @param string $urgencyCode Код срочности
     *
     * @return $this
     */
    public function setUrgencyCode($urgencyCode)
    {
        $allowedValues = $this->getUrgencyCodeAllowableValues();
        if (!is_null($urgencyCode) && !in_array($urgencyCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'urgencyCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['urgencyCode'] = $urgencyCode;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return \common\models\sbbol2\Vat
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param \common\models\sbbol2\Vat $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
