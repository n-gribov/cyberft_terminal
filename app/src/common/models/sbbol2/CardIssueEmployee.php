<?php
/**
 * CardIssueEmployee
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * CardIssueEmployee Class Doc Comment
 *
 * @category Class
 * @description Реквизиты сотрудников в реестре
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class CardIssueEmployee implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CardIssueEmployee';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'accountNumber' => 'string',
        'bankMessage' => 'string',
        'birthDate' => '\DateTime',
        'birthPlace' => 'string',
        'cardInfo' => '\common\models\sbbol2\CardIssueCardInfo',
        'cardUniqueDesignCode' => 'string',
        'categoryCode' => 'string',
        'citizenship' => '\common\models\sbbol2\CardIssueCitizenship',
        'contactInfo' => '\common\models\sbbol2\CardIssueContactInfo',
        'firstName' => 'string',
        'identityDoc' => '\common\models\sbbol2\CardIssueIdentityDoc',
        'inn' => 'string',
        'issCard' => 'bool',
        'lastName' => 'string',
        'middleName' => 'string',
        'personnelNumber' => 'string',
        'placeOfService' => '\common\models\sbbol2\CardIssuePlaceOfService',
        'position' => 'string',
        'registrationAddress' => '\common\models\sbbol2\CardIssueAddress',
        'resident' => 'bool',
        'residentalAddress' => '\common\models\sbbol2\CardIssueAddress',
        'result' => 'string',
        'sameAddress' => 'bool',
        'sendReport' => 'bool',
        'serNumber' => 'int',
        'sex' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'accountNumber' => null,
        'bankMessage' => null,
        'birthDate' => 'date-time',
        'birthPlace' => null,
        'cardInfo' => null,
        'cardUniqueDesignCode' => null,
        'categoryCode' => null,
        'citizenship' => null,
        'contactInfo' => null,
        'firstName' => null,
        'identityDoc' => null,
        'inn' => null,
        'issCard' => null,
        'lastName' => null,
        'middleName' => null,
        'personnelNumber' => null,
        'placeOfService' => null,
        'position' => null,
        'registrationAddress' => null,
        'resident' => null,
        'residentalAddress' => null,
        'result' => null,
        'sameAddress' => null,
        'sendReport' => null,
        'serNumber' => 'int32',
        'sex' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountNumber' => 'accountNumber',
        'bankMessage' => 'bankMessage',
        'birthDate' => 'birthDate',
        'birthPlace' => 'birthPlace',
        'cardInfo' => 'cardInfo',
        'cardUniqueDesignCode' => 'cardUniqueDesignCode',
        'categoryCode' => 'categoryCode',
        'citizenship' => 'citizenship',
        'contactInfo' => 'contactInfo',
        'firstName' => 'firstName',
        'identityDoc' => 'identityDoc',
        'inn' => 'inn',
        'issCard' => 'issCard',
        'lastName' => 'lastName',
        'middleName' => 'middleName',
        'personnelNumber' => 'personnelNumber',
        'placeOfService' => 'placeOfService',
        'position' => 'position',
        'registrationAddress' => 'registrationAddress',
        'resident' => 'resident',
        'residentalAddress' => 'residentalAddress',
        'result' => 'result',
        'sameAddress' => 'sameAddress',
        'sendReport' => 'sendReport',
        'serNumber' => 'serNumber',
        'sex' => 'sex',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountNumber' => 'setAccountNumber',
        'bankMessage' => 'setBankMessage',
        'birthDate' => 'setBirthDate',
        'birthPlace' => 'setBirthPlace',
        'cardInfo' => 'setCardInfo',
        'cardUniqueDesignCode' => 'setCardUniqueDesignCode',
        'categoryCode' => 'setCategoryCode',
        'citizenship' => 'setCitizenship',
        'contactInfo' => 'setContactInfo',
        'firstName' => 'setFirstName',
        'identityDoc' => 'setIdentityDoc',
        'inn' => 'setInn',
        'issCard' => 'setIssCard',
        'lastName' => 'setLastName',
        'middleName' => 'setMiddleName',
        'personnelNumber' => 'setPersonnelNumber',
        'placeOfService' => 'setPlaceOfService',
        'position' => 'setPosition',
        'registrationAddress' => 'setRegistrationAddress',
        'resident' => 'setResident',
        'residentalAddress' => 'setResidentalAddress',
        'result' => 'setResult',
        'sameAddress' => 'setSameAddress',
        'sendReport' => 'setSendReport',
        'serNumber' => 'setSerNumber',
        'sex' => 'setSex',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountNumber' => 'getAccountNumber',
        'bankMessage' => 'getBankMessage',
        'birthDate' => 'getBirthDate',
        'birthPlace' => 'getBirthPlace',
        'cardInfo' => 'getCardInfo',
        'cardUniqueDesignCode' => 'getCardUniqueDesignCode',
        'categoryCode' => 'getCategoryCode',
        'citizenship' => 'getCitizenship',
        'contactInfo' => 'getContactInfo',
        'firstName' => 'getFirstName',
        'identityDoc' => 'getIdentityDoc',
        'inn' => 'getInn',
        'issCard' => 'getIssCard',
        'lastName' => 'getLastName',
        'middleName' => 'getMiddleName',
        'personnelNumber' => 'getPersonnelNumber',
        'placeOfService' => 'getPlaceOfService',
        'position' => 'getPosition',
        'registrationAddress' => 'getRegistrationAddress',
        'resident' => 'getResident',
        'residentalAddress' => 'getResidentalAddress',
        'result' => 'getResult',
        'sameAddress' => 'getSameAddress',
        'sendReport' => 'getSendReport',
        'serNumber' => 'getSerNumber',
        'sex' => 'getSex',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountNumber'] = isset($data['accountNumber']) ? $data['accountNumber'] : null;
        $this->container['bankMessage'] = isset($data['bankMessage']) ? $data['bankMessage'] : null;
        $this->container['birthDate'] = isset($data['birthDate']) ? $data['birthDate'] : null;
        $this->container['birthPlace'] = isset($data['birthPlace']) ? $data['birthPlace'] : null;
        $this->container['cardInfo'] = isset($data['cardInfo']) ? $data['cardInfo'] : null;
        $this->container['cardUniqueDesignCode'] = isset($data['cardUniqueDesignCode']) ? $data['cardUniqueDesignCode'] : null;
        $this->container['categoryCode'] = isset($data['categoryCode']) ? $data['categoryCode'] : null;
        $this->container['citizenship'] = isset($data['citizenship']) ? $data['citizenship'] : null;
        $this->container['contactInfo'] = isset($data['contactInfo']) ? $data['contactInfo'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['identityDoc'] = isset($data['identityDoc']) ? $data['identityDoc'] : null;
        $this->container['inn'] = isset($data['inn']) ? $data['inn'] : null;
        $this->container['issCard'] = isset($data['issCard']) ? $data['issCard'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['middleName'] = isset($data['middleName']) ? $data['middleName'] : null;
        $this->container['personnelNumber'] = isset($data['personnelNumber']) ? $data['personnelNumber'] : null;
        $this->container['placeOfService'] = isset($data['placeOfService']) ? $data['placeOfService'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['registrationAddress'] = isset($data['registrationAddress']) ? $data['registrationAddress'] : null;
        $this->container['resident'] = isset($data['resident']) ? $data['resident'] : null;
        $this->container['residentalAddress'] = isset($data['residentalAddress']) ? $data['residentalAddress'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['sameAddress'] = isset($data['sameAddress']) ? $data['sameAddress'] : null;
        $this->container['sendReport'] = isset($data['sendReport']) ? $data['sendReport'] : null;
        $this->container['serNumber'] = isset($data['serNumber']) ? $data['serNumber'] : null;
        $this->container['sex'] = isset($data['sex']) ? $data['sex'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['birthDate'] === null) {
            $invalidProperties[] = "'birthDate' can't be null";
        }
        if ($this->container['birthPlace'] === null) {
            $invalidProperties[] = "'birthPlace' can't be null";
        }
        if ($this->container['cardInfo'] === null) {
            $invalidProperties[] = "'cardInfo' can't be null";
        }
        if ($this->container['categoryCode'] === null) {
            $invalidProperties[] = "'categoryCode' can't be null";
        }
        if ($this->container['citizenship'] === null) {
            $invalidProperties[] = "'citizenship' can't be null";
        }
        if ($this->container['firstName'] === null) {
            $invalidProperties[] = "'firstName' can't be null";
        }
        if ($this->container['lastName'] === null) {
            $invalidProperties[] = "'lastName' can't be null";
        }
        if ($this->container['placeOfService'] === null) {
            $invalidProperties[] = "'placeOfService' can't be null";
        }
        if ($this->container['registrationAddress'] === null) {
            $invalidProperties[] = "'registrationAddress' can't be null";
        }
        if ($this->container['serNumber'] === null) {
            $invalidProperties[] = "'serNumber' can't be null";
        }
        if ($this->container['sex'] === null) {
            $invalidProperties[] = "'sex' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets accountNumber
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber
     *
     * @param string $accountNumber Номер открытого счета
     *
     * @return $this
     */
    public function setAccountNumber($accountNumber)
    {
        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets bankMessage
     *
     * @return string
     */
    public function getBankMessage()
    {
        return $this->container['bankMessage'];
    }

    /**
     * Sets bankMessage
     *
     * @param string $bankMessage Банковский комментарий к статусу карты
     *
     * @return $this
     */
    public function setBankMessage($bankMessage)
    {
        $this->container['bankMessage'] = $bankMessage;

        return $this;
    }

    /**
     * Gets birthDate
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birthDate'];
    }

    /**
     * Sets birthDate
     *
     * @param \DateTime $birthDate Дата рождения
     *
     * @return $this
     */
    public function setBirthDate($birthDate)
    {
        $this->container['birthDate'] = $birthDate;

        return $this;
    }

    /**
     * Gets birthPlace
     *
     * @return string
     */
    public function getBirthPlace()
    {
        return $this->container['birthPlace'];
    }

    /**
     * Sets birthPlace
     *
     * @param string $birthPlace Место рождения
     *
     * @return $this
     */
    public function setBirthPlace($birthPlace)
    {
        $this->container['birthPlace'] = $birthPlace;

        return $this;
    }

    /**
     * Gets cardInfo
     *
     * @return \common\models\sbbol2\CardIssueCardInfo
     */
    public function getCardInfo()
    {
        return $this->container['cardInfo'];
    }

    /**
     * Sets cardInfo
     *
     * @param \common\models\sbbol2\CardIssueCardInfo $cardInfo cardInfo
     *
     * @return $this
     */
    public function setCardInfo($cardInfo)
    {
        $this->container['cardInfo'] = $cardInfo;

        return $this;
    }

    /**
     * Gets cardUniqueDesignCode
     *
     * @return string
     */
    public function getCardUniqueDesignCode()
    {
        return $this->container['cardUniqueDesignCode'];
    }

    /**
     * Sets cardUniqueDesignCode
     *
     * @param string $cardUniqueDesignCode Код индивидуального дизайна карты
     *
     * @return $this
     */
    public function setCardUniqueDesignCode($cardUniqueDesignCode)
    {
        $this->container['cardUniqueDesignCode'] = $cardUniqueDesignCode;

        return $this;
    }

    /**
     * Gets categoryCode
     *
     * @return string
     */
    public function getCategoryCode()
    {
        return $this->container['categoryCode'];
    }

    /**
     * Sets categoryCode
     *
     * @param string $categoryCode Код категории населения
     *
     * @return $this
     */
    public function setCategoryCode($categoryCode)
    {
        $this->container['categoryCode'] = $categoryCode;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return \common\models\sbbol2\CardIssueCitizenship
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param \common\models\sbbol2\CardIssueCitizenship $citizenship citizenship
     *
     * @return $this
     */
    public function setCitizenship($citizenship)
    {
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets contactInfo
     *
     * @return \common\models\sbbol2\CardIssueContactInfo
     */
    public function getContactInfo()
    {
        return $this->container['contactInfo'];
    }

    /**
     * Sets contactInfo
     *
     * @param \common\models\sbbol2\CardIssueContactInfo $contactInfo contactInfo
     *
     * @return $this
     */
    public function setContactInfo($contactInfo)
    {
        $this->container['contactInfo'] = $contactInfo;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName Имя
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets identityDoc
     *
     * @return \common\models\sbbol2\CardIssueIdentityDoc
     */
    public function getIdentityDoc()
    {
        return $this->container['identityDoc'];
    }

    /**
     * Sets identityDoc
     *
     * @param \common\models\sbbol2\CardIssueIdentityDoc $identityDoc identityDoc
     *
     * @return $this
     */
    public function setIdentityDoc($identityDoc)
    {
        $this->container['identityDoc'] = $identityDoc;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string $inn ИНН
     *
     * @return $this
     */
    public function setInn($inn)
    {
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets issCard
     *
     * @return bool
     */
    public function getIssCard()
    {
        return $this->container['issCard'];
    }

    /**
     * Sets issCard
     *
     * @param bool $issCard Признак того что карта выпущена
     *
     * @return $this
     */
    public function setIssCard($issCard)
    {
        $this->container['issCard'] = $issCard;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName Фамилия
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string $middleName Отчество
     *
     * @return $this
     */
    public function setMiddleName($middleName)
    {
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets personnelNumber
     *
     * @return string
     */
    public function getPersonnelNumber()
    {
        return $this->container['personnelNumber'];
    }

    /**
     * Sets personnelNumber
     *
     * @param string $personnelNumber Табельный номер
     *
     * @return $this
     */
    public function setPersonnelNumber($personnelNumber)
    {
        $this->container['personnelNumber'] = $personnelNumber;

        return $this;
    }

    /**
     * Gets placeOfService
     *
     * @return \common\models\sbbol2\CardIssuePlaceOfService
     */
    public function getPlaceOfService()
    {
        return $this->container['placeOfService'];
    }

    /**
     * Sets placeOfService
     *
     * @param \common\models\sbbol2\CardIssuePlaceOfService $placeOfService placeOfService
     *
     * @return $this
     */
    public function setPlaceOfService($placeOfService)
    {
        $this->container['placeOfService'] = $placeOfService;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position Должность
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets registrationAddress
     *
     * @return \common\models\sbbol2\CardIssueAddress
     */
    public function getRegistrationAddress()
    {
        return $this->container['registrationAddress'];
    }

    /**
     * Sets registrationAddress
     *
     * @param \common\models\sbbol2\CardIssueAddress $registrationAddress registrationAddress
     *
     * @return $this
     */
    public function setRegistrationAddress($registrationAddress)
    {
        $this->container['registrationAddress'] = $registrationAddress;

        return $this;
    }

    /**
     * Gets resident
     *
     * @return bool
     */
    public function getResident()
    {
        return $this->container['resident'];
    }

    /**
     * Sets resident
     *
     * @param bool $resident Резидент РФ
     *
     * @return $this
     */
    public function setResident($resident)
    {
        $this->container['resident'] = $resident;

        return $this;
    }

    /**
     * Gets residentalAddress
     *
     * @return \common\models\sbbol2\CardIssueAddress
     */
    public function getResidentalAddress()
    {
        return $this->container['residentalAddress'];
    }

    /**
     * Sets residentalAddress
     *
     * @param \common\models\sbbol2\CardIssueAddress $residentalAddress residentalAddress
     *
     * @return $this
     */
    public function setResidentalAddress($residentalAddress)
    {
        $this->container['residentalAddress'] = $residentalAddress;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result Результат открытия счетов / выпуска карт
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets sameAddress
     *
     * @return bool
     */
    public function getSameAddress()
    {
        return $this->container['sameAddress'];
    }

    /**
     * Sets sameAddress
     *
     * @param bool $sameAddress Адреса регистрации и проживания совпадают
     *
     * @return $this
     */
    public function setSameAddress($sameAddress)
    {
        $this->container['sameAddress'] = $sameAddress;

        return $this;
    }

    /**
     * Gets sendReport
     *
     * @return bool
     */
    public function getSendReport()
    {
        return $this->container['sendReport'];
    }

    /**
     * Sets sendReport
     *
     * @param bool $sendReport Признак рассылки отчета по Internet
     *
     * @return $this
     */
    public function setSendReport($sendReport)
    {
        $this->container['sendReport'] = $sendReport;

        return $this;
    }

    /**
     * Gets serNumber
     *
     * @return int
     */
    public function getSerNumber()
    {
        return $this->container['serNumber'];
    }

    /**
     * Sets serNumber
     *
     * @param int $serNumber № п/п
     *
     * @return $this
     */
    public function setSerNumber($serNumber)
    {
        $this->container['serNumber'] = $serNumber;

        return $this;
    }

    /**
     * Gets sex
     *
     * @return bool
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     *
     * @param bool $sex Пол
     *
     * @return $this
     */
    public function setSex($sex)
    {
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
