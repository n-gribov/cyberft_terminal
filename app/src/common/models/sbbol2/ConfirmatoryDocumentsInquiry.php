<?php
/**
 * ConfirmatoryDocumentsInquiry
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * ConfirmatoryDocumentsInquiry Class Doc Comment
 *
 * @category Class
 * @description Сведения о подтверждающих документах
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ConfirmatoryDocumentsInquiry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ConfirmatoryDocumentsInquiry';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'acceptDate' => '\DateTime',
        'bankComment' => 'string',
        'bankStatus' => 'string',
        'bfAttachments' => '\common\models\sbbol2\BfAttachment[]',
        'branchSystemName' => 'string',
        'customerBankBIC' => 'string',
        'customerBankName' => 'string',
        'customerINN' => 'string',
        'customerName' => 'string',
        'customerOKPO' => 'string',
        'date' => '\DateTime',
        'dealDate' => '\DateTime',
        'digestSignatures' => '\common\models\sbbol2\Signature[]',
        'docs' => '\common\models\sbbol2\ConfirmatoryDocumentsInquiryDoc[]',
        'executorEmployeeName' => 'string',
        'executorName' => 'string',
        'externalId' => 'string',
        'failReasons' => '\common\models\sbbol2\FailReason[]',
        'number' => 'string',
        'phoneOfficials' => 'string',
        'psNumber' => 'string',
        'returnReason1' => 'bool',
        'returnReason1Comment' => 'string',
        'returnReason2' => 'bool',
        'returnReason2Comment' => 'string',
        'returnReason3' => 'bool',
        'returnReason3Comment' => 'string',
        'returnReason4' => 'bool',
        'returnReason4Comment' => 'string',
        'senderOfficials' => 'string',
        'valueDate' => '\DateTime',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'acceptDate' => 'date-time',
        'bankComment' => null,
        'bankStatus' => null,
        'bfAttachments' => null,
        'branchSystemName' => null,
        'customerBankBIC' => null,
        'customerBankName' => null,
        'customerINN' => null,
        'customerName' => null,
        'customerOKPO' => null,
        'date' => 'date-time',
        'dealDate' => 'date-time',
        'digestSignatures' => null,
        'docs' => null,
        'executorEmployeeName' => null,
        'executorName' => null,
        'externalId' => null,
        'failReasons' => null,
        'number' => null,
        'phoneOfficials' => null,
        'psNumber' => null,
        'returnReason1' => null,
        'returnReason1Comment' => null,
        'returnReason2' => null,
        'returnReason2Comment' => null,
        'returnReason3' => null,
        'returnReason3Comment' => null,
        'returnReason4' => null,
        'returnReason4Comment' => null,
        'senderOfficials' => null,
        'valueDate' => 'date-time',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptDate' => 'acceptDate',
        'bankComment' => 'bankComment',
        'bankStatus' => 'bankStatus',
        'bfAttachments' => 'bfAttachments',
        'branchSystemName' => 'branchSystemName',
        'customerBankBIC' => 'customerBankBIC',
        'customerBankName' => 'customerBankName',
        'customerINN' => 'customerINN',
        'customerName' => 'customerName',
        'customerOKPO' => 'customerOKPO',
        'date' => 'date',
        'dealDate' => 'dealDate',
        'digestSignatures' => 'digestSignatures',
        'docs' => 'docs',
        'executorEmployeeName' => 'executorEmployeeName',
        'executorName' => 'executorName',
        'externalId' => 'externalId',
        'failReasons' => 'failReasons',
        'number' => 'number',
        'phoneOfficials' => 'phoneOfficials',
        'psNumber' => 'psNumber',
        'returnReason1' => 'returnReason1',
        'returnReason1Comment' => 'returnReason1Comment',
        'returnReason2' => 'returnReason2',
        'returnReason2Comment' => 'returnReason2Comment',
        'returnReason3' => 'returnReason3',
        'returnReason3Comment' => 'returnReason3Comment',
        'returnReason4' => 'returnReason4',
        'returnReason4Comment' => 'returnReason4Comment',
        'senderOfficials' => 'senderOfficials',
        'valueDate' => 'valueDate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptDate' => 'setAcceptDate',
        'bankComment' => 'setBankComment',
        'bankStatus' => 'setBankStatus',
        'bfAttachments' => 'setBfAttachments',
        'branchSystemName' => 'setBranchSystemName',
        'customerBankBIC' => 'setCustomerBankBIC',
        'customerBankName' => 'setCustomerBankName',
        'customerINN' => 'setCustomerINN',
        'customerName' => 'setCustomerName',
        'customerOKPO' => 'setCustomerOKPO',
        'date' => 'setDate',
        'dealDate' => 'setDealDate',
        'digestSignatures' => 'setDigestSignatures',
        'docs' => 'setDocs',
        'executorEmployeeName' => 'setExecutorEmployeeName',
        'executorName' => 'setExecutorName',
        'externalId' => 'setExternalId',
        'failReasons' => 'setFailReasons',
        'number' => 'setNumber',
        'phoneOfficials' => 'setPhoneOfficials',
        'psNumber' => 'setPsNumber',
        'returnReason1' => 'setReturnReason1',
        'returnReason1Comment' => 'setReturnReason1Comment',
        'returnReason2' => 'setReturnReason2',
        'returnReason2Comment' => 'setReturnReason2Comment',
        'returnReason3' => 'setReturnReason3',
        'returnReason3Comment' => 'setReturnReason3Comment',
        'returnReason4' => 'setReturnReason4',
        'returnReason4Comment' => 'setReturnReason4Comment',
        'senderOfficials' => 'setSenderOfficials',
        'valueDate' => 'setValueDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptDate' => 'getAcceptDate',
        'bankComment' => 'getBankComment',
        'bankStatus' => 'getBankStatus',
        'bfAttachments' => 'getBfAttachments',
        'branchSystemName' => 'getBranchSystemName',
        'customerBankBIC' => 'getCustomerBankBIC',
        'customerBankName' => 'getCustomerBankName',
        'customerINN' => 'getCustomerINN',
        'customerName' => 'getCustomerName',
        'customerOKPO' => 'getCustomerOKPO',
        'date' => 'getDate',
        'dealDate' => 'getDealDate',
        'digestSignatures' => 'getDigestSignatures',
        'docs' => 'getDocs',
        'executorEmployeeName' => 'getExecutorEmployeeName',
        'executorName' => 'getExecutorName',
        'externalId' => 'getExternalId',
        'failReasons' => 'getFailReasons',
        'number' => 'getNumber',
        'phoneOfficials' => 'getPhoneOfficials',
        'psNumber' => 'getPsNumber',
        'returnReason1' => 'getReturnReason1',
        'returnReason1Comment' => 'getReturnReason1Comment',
        'returnReason2' => 'getReturnReason2',
        'returnReason2Comment' => 'getReturnReason2Comment',
        'returnReason3' => 'getReturnReason3',
        'returnReason3Comment' => 'getReturnReason3Comment',
        'returnReason4' => 'getReturnReason4',
        'returnReason4Comment' => 'getReturnReason4Comment',
        'senderOfficials' => 'getSenderOfficials',
        'valueDate' => 'getValueDate',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acceptDate'] = isset($data['acceptDate']) ? $data['acceptDate'] : null;
        $this->container['bankComment'] = isset($data['bankComment']) ? $data['bankComment'] : null;
        $this->container['bankStatus'] = isset($data['bankStatus']) ? $data['bankStatus'] : null;
        $this->container['bfAttachments'] = isset($data['bfAttachments']) ? $data['bfAttachments'] : null;
        $this->container['branchSystemName'] = isset($data['branchSystemName']) ? $data['branchSystemName'] : null;
        $this->container['customerBankBIC'] = isset($data['customerBankBIC']) ? $data['customerBankBIC'] : null;
        $this->container['customerBankName'] = isset($data['customerBankName']) ? $data['customerBankName'] : null;
        $this->container['customerINN'] = isset($data['customerINN']) ? $data['customerINN'] : null;
        $this->container['customerName'] = isset($data['customerName']) ? $data['customerName'] : null;
        $this->container['customerOKPO'] = isset($data['customerOKPO']) ? $data['customerOKPO'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['dealDate'] = isset($data['dealDate']) ? $data['dealDate'] : null;
        $this->container['digestSignatures'] = isset($data['digestSignatures']) ? $data['digestSignatures'] : null;
        $this->container['docs'] = isset($data['docs']) ? $data['docs'] : null;
        $this->container['executorEmployeeName'] = isset($data['executorEmployeeName']) ? $data['executorEmployeeName'] : null;
        $this->container['executorName'] = isset($data['executorName']) ? $data['executorName'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['failReasons'] = isset($data['failReasons']) ? $data['failReasons'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['phoneOfficials'] = isset($data['phoneOfficials']) ? $data['phoneOfficials'] : null;
        $this->container['psNumber'] = isset($data['psNumber']) ? $data['psNumber'] : null;
        $this->container['returnReason1'] = isset($data['returnReason1']) ? $data['returnReason1'] : null;
        $this->container['returnReason1Comment'] = isset($data['returnReason1Comment']) ? $data['returnReason1Comment'] : null;
        $this->container['returnReason2'] = isset($data['returnReason2']) ? $data['returnReason2'] : null;
        $this->container['returnReason2Comment'] = isset($data['returnReason2Comment']) ? $data['returnReason2Comment'] : null;
        $this->container['returnReason3'] = isset($data['returnReason3']) ? $data['returnReason3'] : null;
        $this->container['returnReason3Comment'] = isset($data['returnReason3Comment']) ? $data['returnReason3Comment'] : null;
        $this->container['returnReason4'] = isset($data['returnReason4']) ? $data['returnReason4'] : null;
        $this->container['returnReason4Comment'] = isset($data['returnReason4Comment']) ? $data['returnReason4Comment'] : null;
        $this->container['senderOfficials'] = isset($data['senderOfficials']) ? $data['senderOfficials'] : null;
        $this->container['valueDate'] = isset($data['valueDate']) ? $data['valueDate'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['branchSystemName'] === null) {
            $invalidProperties[] = "'branchSystemName' can't be null";
        }
        if ($this->container['customerINN'] === null) {
            $invalidProperties[] = "'customerINN' can't be null";
        }
        if ($this->container['customerName'] === null) {
            $invalidProperties[] = "'customerName' can't be null";
        }
        if ($this->container['customerOKPO'] === null) {
            $invalidProperties[] = "'customerOKPO' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['dealDate'] === null) {
            $invalidProperties[] = "'dealDate' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets acceptDate
     *
     * @return \DateTime
     */
    public function getAcceptDate()
    {
        return $this->container['acceptDate'];
    }

    /**
     * Sets acceptDate
     *
     * @param \DateTime $acceptDate Дата представления в банк
     *
     * @return $this
     */
    public function setAcceptDate($acceptDate)
    {
        $this->container['acceptDate'] = $acceptDate;

        return $this;
    }

    /**
     * Gets bankComment
     *
     * @return string
     */
    public function getBankComment()
    {
        return $this->container['bankComment'];
    }

    /**
     * Sets bankComment
     *
     * @param string $bankComment Банковский комментарий к статусу документа
     *
     * @return $this
     */
    public function setBankComment($bankComment)
    {
        $this->container['bankComment'] = $bankComment;

        return $this;
    }

    /**
     * Gets bankStatus
     *
     * @return string
     */
    public function getBankStatus()
    {
        return $this->container['bankStatus'];
    }

    /**
     * Sets bankStatus
     *
     * @param string $bankStatus Статус документа
     *
     * @return $this
     */
    public function setBankStatus($bankStatus)
    {
        $this->container['bankStatus'] = $bankStatus;

        return $this;
    }

    /**
     * Gets bfAttachments
     *
     * @return \common\models\sbbol2\BfAttachment[]
     */
    public function getBfAttachments()
    {
        return $this->container['bfAttachments'];
    }

    /**
     * Sets bfAttachments
     *
     * @param \common\models\sbbol2\BfAttachment[] $bfAttachments Приложенные к документу: отсканированные образы-вложения - для АС БФ
     *
     * @return $this
     */
    public function setBfAttachments($bfAttachments)
    {
        $this->container['bfAttachments'] = $bfAttachments;

        return $this;
    }

    /**
     * Gets branchSystemName
     *
     * @return string
     */
    public function getBranchSystemName()
    {
        return $this->container['branchSystemName'];
    }

    /**
     * Sets branchSystemName
     *
     * @param string $branchSystemName Наименование подразделения – получателя поручения
     *
     * @return $this
     */
    public function setBranchSystemName($branchSystemName)
    {
        $this->container['branchSystemName'] = $branchSystemName;

        return $this;
    }

    /**
     * Gets customerBankBIC
     *
     * @return string
     */
    public function getCustomerBankBIC()
    {
        return $this->container['customerBankBIC'];
    }

    /**
     * Sets customerBankBIC
     *
     * @param string $customerBankBIC БИК банка клиента
     *
     * @return $this
     */
    public function setCustomerBankBIC($customerBankBIC)
    {
        $this->container['customerBankBIC'] = $customerBankBIC;

        return $this;
    }

    /**
     * Gets customerBankName
     *
     * @return string
     */
    public function getCustomerBankName()
    {
        return $this->container['customerBankName'];
    }

    /**
     * Sets customerBankName
     *
     * @param string $customerBankName Наименование уполномоченного банка
     *
     * @return $this
     */
    public function setCustomerBankName($customerBankName)
    {
        $this->container['customerBankName'] = $customerBankName;

        return $this;
    }

    /**
     * Gets customerINN
     *
     * @return string
     */
    public function getCustomerINN()
    {
        return $this->container['customerINN'];
    }

    /**
     * Sets customerINN
     *
     * @param string $customerINN ИНН резидента
     *
     * @return $this
     */
    public function setCustomerINN($customerINN)
    {
        $this->container['customerINN'] = $customerINN;

        return $this;
    }

    /**
     * Gets customerName
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customerName'];
    }

    /**
     * Sets customerName
     *
     * @param string $customerName Наименование резидента
     *
     * @return $this
     */
    public function setCustomerName($customerName)
    {
        $this->container['customerName'] = $customerName;

        return $this;
    }

    /**
     * Gets customerOKPO
     *
     * @return string
     */
    public function getCustomerOKPO()
    {
        return $this->container['customerOKPO'];
    }

    /**
     * Sets customerOKPO
     *
     * @param string $customerOKPO ОКПО резидента
     *
     * @return $this
     */
    public function setCustomerOKPO($customerOKPO)
    {
        $this->container['customerOKPO'] = $customerOKPO;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата составления документа
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets dealDate
     *
     * @return \DateTime
     */
    public function getDealDate()
    {
        return $this->container['dealDate'];
    }

    /**
     * Sets dealDate
     *
     * @param \DateTime $dealDate Дата справки
     *
     * @return $this
     */
    public function setDealDate($dealDate)
    {
        $this->container['dealDate'] = $dealDate;

        return $this;
    }

    /**
     * Gets digestSignatures
     *
     * @return \common\models\sbbol2\Signature[]
     */
    public function getDigestSignatures()
    {
        return $this->container['digestSignatures'];
    }

    /**
     * Sets digestSignatures
     *
     * @param \common\models\sbbol2\Signature[] $digestSignatures Электронные подписи по дайджесту документа
     *
     * @return $this
     */
    public function setDigestSignatures($digestSignatures)
    {
        $this->container['digestSignatures'] = $digestSignatures;

        return $this;
    }

    /**
     * Gets docs
     *
     * @return \common\models\sbbol2\ConfirmatoryDocumentsInquiryDoc[]
     */
    public function getDocs()
    {
        return $this->container['docs'];
    }

    /**
     * Sets docs
     *
     * @param \common\models\sbbol2\ConfirmatoryDocumentsInquiryDoc[] $docs Документы, включённые в справку
     *
     * @return $this
     */
    public function setDocs($docs)
    {
        $this->container['docs'] = $docs;

        return $this;
    }

    /**
     * Gets executorEmployeeName
     *
     * @return string
     */
    public function getExecutorEmployeeName()
    {
        return $this->container['executorEmployeeName'];
    }

    /**
     * Sets executorEmployeeName
     *
     * @param string $executorEmployeeName Должность ответственного лица
     *
     * @return $this
     */
    public function setExecutorEmployeeName($executorEmployeeName)
    {
        $this->container['executorEmployeeName'] = $executorEmployeeName;

        return $this;
    }

    /**
     * Gets executorName
     *
     * @return string
     */
    public function getExecutorName()
    {
        return $this->container['executorName'];
    }

    /**
     * Sets executorName
     *
     * @param string $executorName Подпись ответственного лица
     *
     * @return $this
     */
    public function setExecutorName($executorName)
    {
        $this->container['executorName'] = $executorName;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Идентификатор документа, присвоенный партнёром (UUID)
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets failReasons
     *
     * @return \common\models\sbbol2\FailReason[]
     */
    public function getFailReasons()
    {
        return $this->container['failReasons'];
    }

    /**
     * Sets failReasons
     *
     * @param \common\models\sbbol2\FailReason[] $failReasons Причины отказа
     *
     * @return $this
     */
    public function setFailReasons($failReasons)
    {
        $this->container['failReasons'] = $failReasons;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер документа
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets phoneOfficials
     *
     * @return string
     */
    public function getPhoneOfficials()
    {
        return $this->container['phoneOfficials'];
    }

    /**
     * Sets phoneOfficials
     *
     * @param string $phoneOfficials Телефон ответственного лица
     *
     * @return $this
     */
    public function setPhoneOfficials($phoneOfficials)
    {
        $this->container['phoneOfficials'] = $phoneOfficials;

        return $this;
    }

    /**
     * Gets psNumber
     *
     * @return string
     */
    public function getPsNumber()
    {
        return $this->container['psNumber'];
    }

    /**
     * Sets psNumber
     *
     * @param string $psNumber Уникальный номер контракта (кредитного договора)
     *
     * @return $this
     */
    public function setPsNumber($psNumber)
    {
        $this->container['psNumber'] = $psNumber;

        return $this;
    }

    /**
     * Gets returnReason1
     *
     * @return bool
     */
    public function getReturnReason1()
    {
        return $this->container['returnReason1'];
    }

    /**
     * Sets returnReason1
     *
     * @param bool $returnReason1 Флаг причины возврата 16.1.1
     *
     * @return $this
     */
    public function setReturnReason1($returnReason1)
    {
        $this->container['returnReason1'] = $returnReason1;

        return $this;
    }

    /**
     * Gets returnReason1Comment
     *
     * @return string
     */
    public function getReturnReason1Comment()
    {
        return $this->container['returnReason1Comment'];
    }

    /**
     * Sets returnReason1Comment
     *
     * @param string $returnReason1Comment Комментарий причины возврата 16.1.1
     *
     * @return $this
     */
    public function setReturnReason1Comment($returnReason1Comment)
    {
        $this->container['returnReason1Comment'] = $returnReason1Comment;

        return $this;
    }

    /**
     * Gets returnReason2
     *
     * @return bool
     */
    public function getReturnReason2()
    {
        return $this->container['returnReason2'];
    }

    /**
     * Sets returnReason2
     *
     * @param bool $returnReason2 Флаг причины возврата 16.1.3
     *
     * @return $this
     */
    public function setReturnReason2($returnReason2)
    {
        $this->container['returnReason2'] = $returnReason2;

        return $this;
    }

    /**
     * Gets returnReason2Comment
     *
     * @return string
     */
    public function getReturnReason2Comment()
    {
        return $this->container['returnReason2Comment'];
    }

    /**
     * Sets returnReason2Comment
     *
     * @param string $returnReason2Comment Комментарий причины возврата 16.1.3
     *
     * @return $this
     */
    public function setReturnReason2Comment($returnReason2Comment)
    {
        $this->container['returnReason2Comment'] = $returnReason2Comment;

        return $this;
    }

    /**
     * Gets returnReason3
     *
     * @return bool
     */
    public function getReturnReason3()
    {
        return $this->container['returnReason3'];
    }

    /**
     * Sets returnReason3
     *
     * @param bool $returnReason3 Флаг причины возврата 16.1.4
     *
     * @return $this
     */
    public function setReturnReason3($returnReason3)
    {
        $this->container['returnReason3'] = $returnReason3;

        return $this;
    }

    /**
     * Gets returnReason3Comment
     *
     * @return string
     */
    public function getReturnReason3Comment()
    {
        return $this->container['returnReason3Comment'];
    }

    /**
     * Sets returnReason3Comment
     *
     * @param string $returnReason3Comment Комментарий причины возврата 16.1.4
     *
     * @return $this
     */
    public function setReturnReason3Comment($returnReason3Comment)
    {
        $this->container['returnReason3Comment'] = $returnReason3Comment;

        return $this;
    }

    /**
     * Gets returnReason4
     *
     * @return bool
     */
    public function getReturnReason4()
    {
        return $this->container['returnReason4'];
    }

    /**
     * Sets returnReason4
     *
     * @param bool $returnReason4 Флаг причины возврата 16.1.5
     *
     * @return $this
     */
    public function setReturnReason4($returnReason4)
    {
        $this->container['returnReason4'] = $returnReason4;

        return $this;
    }

    /**
     * Gets returnReason4Comment
     *
     * @return string
     */
    public function getReturnReason4Comment()
    {
        return $this->container['returnReason4Comment'];
    }

    /**
     * Sets returnReason4Comment
     *
     * @param string $returnReason4Comment Комментарий причины возврата 16.1.5
     *
     * @return $this
     */
    public function setReturnReason4Comment($returnReason4Comment)
    {
        $this->container['returnReason4Comment'] = $returnReason4Comment;

        return $this;
    }

    /**
     * Gets senderOfficials
     *
     * @return string
     */
    public function getSenderOfficials()
    {
        return $this->container['senderOfficials'];
    }

    /**
     * Sets senderOfficials
     *
     * @param string $senderOfficials ФИО ответственного лица
     *
     * @return $this
     */
    public function setSenderOfficials($senderOfficials)
    {
        $this->container['senderOfficials'] = $senderOfficials;

        return $this;
    }

    /**
     * Gets valueDate
     *
     * @return \DateTime
     */
    public function getValueDate()
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate
     *
     * @param \DateTime $valueDate Дата принятия/возврата
     *
     * @return $this
     */
    public function setValueDate($valueDate)
    {
        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
