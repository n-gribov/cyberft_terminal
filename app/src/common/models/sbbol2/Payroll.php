<?php
/**
 * Payroll
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace common\models\sbbol2;

use ArrayAccess;

/**
 * Payroll Class Doc Comment
 *
 * @category Class
 * @description Зарплатная ведомость
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Payroll implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Payroll';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'account' => 'string',
        'admissionValue' => 'string',
        'amount' => '\common\models\sbbol2\Amount',
        'authPersonName' => 'string',
        'authPersonTelfax' => 'string',
        'bankComment' => 'string',
        'bankStatus' => 'string',
        'bic' => 'string',
        'contractDate' => '\DateTime',
        'contractNumber' => 'string',
        'date' => '\DateTime',
        'digestSignatures' => '\common\models\sbbol2\Signature[]',
        'employeeSalaries' => '\common\models\sbbol2\PayrollEmpSalary[]',
        'employeesNumber' => 'int',
        'externalId' => 'string',
        'loanAmount' => '\common\models\sbbol2\Amount',
        'loanDate' => '\DateTime',
        'loanNumber' => 'string',
        'month' => 'string',
        'number' => 'string',
        'orgName' => 'string',
        'orgTaxNumber' => 'string',
        'payDocs' => '\common\models\sbbol2\PayrollPayDoc[]',
        'year' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'account' => null,
        'admissionValue' => null,
        'amount' => null,
        'authPersonName' => null,
        'authPersonTelfax' => null,
        'bankComment' => null,
        'bankStatus' => null,
        'bic' => null,
        'contractDate' => 'date-time',
        'contractNumber' => null,
        'date' => 'date-time',
        'digestSignatures' => null,
        'employeeSalaries' => null,
        'employeesNumber' => 'int32',
        'externalId' => null,
        'loanAmount' => null,
        'loanDate' => 'date-time',
        'loanNumber' => null,
        'month' => null,
        'number' => null,
        'orgName' => null,
        'orgTaxNumber' => null,
        'payDocs' => null,
        'year' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'admissionValue' => 'admissionValue',
        'amount' => 'amount',
        'authPersonName' => 'authPersonName',
        'authPersonTelfax' => 'authPersonTelfax',
        'bankComment' => 'bankComment',
        'bankStatus' => 'bankStatus',
        'bic' => 'bic',
        'contractDate' => 'contractDate',
        'contractNumber' => 'contractNumber',
        'date' => 'date',
        'digestSignatures' => 'digestSignatures',
        'employeeSalaries' => 'employeeSalaries',
        'employeesNumber' => 'employeesNumber',
        'externalId' => 'externalId',
        'loanAmount' => 'loanAmount',
        'loanDate' => 'loanDate',
        'loanNumber' => 'loanNumber',
        'month' => 'month',
        'number' => 'number',
        'orgName' => 'orgName',
        'orgTaxNumber' => 'orgTaxNumber',
        'payDocs' => 'payDocs',
        'year' => 'year',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'admissionValue' => 'setAdmissionValue',
        'amount' => 'setAmount',
        'authPersonName' => 'setAuthPersonName',
        'authPersonTelfax' => 'setAuthPersonTelfax',
        'bankComment' => 'setBankComment',
        'bankStatus' => 'setBankStatus',
        'bic' => 'setBic',
        'contractDate' => 'setContractDate',
        'contractNumber' => 'setContractNumber',
        'date' => 'setDate',
        'digestSignatures' => 'setDigestSignatures',
        'employeeSalaries' => 'setEmployeeSalaries',
        'employeesNumber' => 'setEmployeesNumber',
        'externalId' => 'setExternalId',
        'loanAmount' => 'setLoanAmount',
        'loanDate' => 'setLoanDate',
        'loanNumber' => 'setLoanNumber',
        'month' => 'setMonth',
        'number' => 'setNumber',
        'orgName' => 'setOrgName',
        'orgTaxNumber' => 'setOrgTaxNumber',
        'payDocs' => 'setPayDocs',
        'year' => 'setYear',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'admissionValue' => 'getAdmissionValue',
        'amount' => 'getAmount',
        'authPersonName' => 'getAuthPersonName',
        'authPersonTelfax' => 'getAuthPersonTelfax',
        'bankComment' => 'getBankComment',
        'bankStatus' => 'getBankStatus',
        'bic' => 'getBic',
        'contractDate' => 'getContractDate',
        'contractNumber' => 'getContractNumber',
        'date' => 'getDate',
        'digestSignatures' => 'getDigestSignatures',
        'employeeSalaries' => 'getEmployeeSalaries',
        'employeesNumber' => 'getEmployeesNumber',
        'externalId' => 'getExternalId',
        'loanAmount' => 'getLoanAmount',
        'loanDate' => 'getLoanDate',
        'loanNumber' => 'getLoanNumber',
        'month' => 'getMonth',
        'number' => 'getNumber',
        'orgName' => 'getOrgName',
        'orgTaxNumber' => 'getOrgTaxNumber',
        'payDocs' => 'getPayDocs',
        'year' => 'getYear',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['admissionValue'] = isset($data['admissionValue']) ? $data['admissionValue'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['authPersonName'] = isset($data['authPersonName']) ? $data['authPersonName'] : null;
        $this->container['authPersonTelfax'] = isset($data['authPersonTelfax']) ? $data['authPersonTelfax'] : null;
        $this->container['bankComment'] = isset($data['bankComment']) ? $data['bankComment'] : null;
        $this->container['bankStatus'] = isset($data['bankStatus']) ? $data['bankStatus'] : null;
        $this->container['bic'] = isset($data['bic']) ? $data['bic'] : null;
        $this->container['contractDate'] = isset($data['contractDate']) ? $data['contractDate'] : null;
        $this->container['contractNumber'] = isset($data['contractNumber']) ? $data['contractNumber'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['digestSignatures'] = isset($data['digestSignatures']) ? $data['digestSignatures'] : null;
        $this->container['employeeSalaries'] = isset($data['employeeSalaries']) ? $data['employeeSalaries'] : null;
        $this->container['employeesNumber'] = isset($data['employeesNumber']) ? $data['employeesNumber'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['loanAmount'] = isset($data['loanAmount']) ? $data['loanAmount'] : null;
        $this->container['loanDate'] = isset($data['loanDate']) ? $data['loanDate'] : null;
        $this->container['loanNumber'] = isset($data['loanNumber']) ? $data['loanNumber'] : null;
        $this->container['month'] = isset($data['month']) ? $data['month'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['orgName'] = isset($data['orgName']) ? $data['orgName'] : null;
        $this->container['orgTaxNumber'] = isset($data['orgTaxNumber']) ? $data['orgTaxNumber'] : null;
        $this->container['payDocs'] = isset($data['payDocs']) ? $data['payDocs'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['bic'] === null) {
            $invalidProperties[] = "'bic' can't be null";
        }
        if ($this->container['contractDate'] === null) {
            $invalidProperties[] = "'contractDate' can't be null";
        }
        if ($this->container['contractNumber'] === null) {
            $invalidProperties[] = "'contractNumber' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['employeesNumber'] === null) {
            $invalidProperties[] = "'employeesNumber' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['month'] === null) {
            $invalidProperties[] = "'month' can't be null";
        }
        if ($this->container['orgName'] === null) {
            $invalidProperties[] = "'orgName' can't be null";
        }
        if ($this->container['orgTaxNumber'] === null) {
            $invalidProperties[] = "'orgTaxNumber' can't be null";
        }
        if ($this->container['year'] === null) {
            $invalidProperties[] = "'year' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account Номер счёта клиента
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets admissionValue
     *
     * @return string
     */
    public function getAdmissionValue()
    {
        return $this->container['admissionValue'];
    }

    /**
     * Sets admissionValue
     *
     * @param string $admissionValue Вид зачисления
     *
     * @return $this
     */
    public function setAdmissionValue($admissionValue)
    {
        $this->container['admissionValue'] = $admissionValue;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \common\models\sbbol2\Amount $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets authPersonName
     *
     * @return string
     */
    public function getAuthPersonName()
    {
        return $this->container['authPersonName'];
    }

    /**
     * Sets authPersonName
     *
     * @param string $authPersonName ФИО уполномоченного сотрудника организации клиента
     *
     * @return $this
     */
    public function setAuthPersonName($authPersonName)
    {
        $this->container['authPersonName'] = $authPersonName;

        return $this;
    }

    /**
     * Gets authPersonTelfax
     *
     * @return string
     */
    public function getAuthPersonTelfax()
    {
        return $this->container['authPersonTelfax'];
    }

    /**
     * Sets authPersonTelfax
     *
     * @param string $authPersonTelfax Номер телефона, факса уполномоченного сотрудника организации клиента
     *
     * @return $this
     */
    public function setAuthPersonTelfax($authPersonTelfax)
    {
        $this->container['authPersonTelfax'] = $authPersonTelfax;

        return $this;
    }

    /**
     * Gets bankComment
     *
     * @return string
     */
    public function getBankComment()
    {
        return $this->container['bankComment'];
    }

    /**
     * Sets bankComment
     *
     * @param string $bankComment Банковский комментарий к статусу документа
     *
     * @return $this
     */
    public function setBankComment($bankComment)
    {
        $this->container['bankComment'] = $bankComment;

        return $this;
    }

    /**
     * Gets bankStatus
     *
     * @return string
     */
    public function getBankStatus()
    {
        return $this->container['bankStatus'];
    }

    /**
     * Sets bankStatus
     *
     * @param string $bankStatus Статус документа
     *
     * @return $this
     */
    public function setBankStatus($bankStatus)
    {
        $this->container['bankStatus'] = $bankStatus;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string $bic БИК банка клиента
     *
     * @return $this
     */
    public function setBic($bic)
    {
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets contractDate
     *
     * @return \DateTime
     */
    public function getContractDate()
    {
        return $this->container['contractDate'];
    }

    /**
     * Sets contractDate
     *
     * @param \DateTime $contractDate Дата договора
     *
     * @return $this
     */
    public function setContractDate($contractDate)
    {
        $this->container['contractDate'] = $contractDate;

        return $this;
    }

    /**
     * Gets contractNumber
     *
     * @return string
     */
    public function getContractNumber()
    {
        return $this->container['contractNumber'];
    }

    /**
     * Sets contractNumber
     *
     * @param string $contractNumber Номер договора
     *
     * @return $this
     */
    public function setContractNumber($contractNumber)
    {
        $this->container['contractNumber'] = $contractNumber;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата составления документа
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets digestSignatures
     *
     * @return \common\models\sbbol2\Signature[]
     */
    public function getDigestSignatures()
    {
        return $this->container['digestSignatures'];
    }

    /**
     * Sets digestSignatures
     *
     * @param \common\models\sbbol2\Signature[] $digestSignatures Электронные подписи по дайджесту документа
     *
     * @return $this
     */
    public function setDigestSignatures($digestSignatures)
    {
        $this->container['digestSignatures'] = $digestSignatures;

        return $this;
    }

    /**
     * Gets employeeSalaries
     *
     * @return \common\models\sbbol2\PayrollEmpSalary[]
     */
    public function getEmployeeSalaries()
    {
        return $this->container['employeeSalaries'];
    }

    /**
     * Sets employeeSalaries
     *
     * @param \common\models\sbbol2\PayrollEmpSalary[] $employeeSalaries Сотрудники, которым зачисляют зарплату
     *
     * @return $this
     */
    public function setEmployeeSalaries($employeeSalaries)
    {
        $this->container['employeeSalaries'] = $employeeSalaries;

        return $this;
    }

    /**
     * Gets employeesNumber
     *
     * @return int
     */
    public function getEmployeesNumber()
    {
        return $this->container['employeesNumber'];
    }

    /**
     * Sets employeesNumber
     *
     * @param int $employeesNumber Количество сотрудников
     *
     * @return $this
     */
    public function setEmployeesNumber($employeesNumber)
    {
        $this->container['employeesNumber'] = $employeesNumber;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Идентификатор документа, присвоенный партнёром (UUID)
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets loanAmount
     *
     * @return \common\models\sbbol2\Amount
     */
    public function getLoanAmount()
    {
        return $this->container['loanAmount'];
    }

    /**
     * Sets loanAmount
     *
     * @param \common\models\sbbol2\Amount $loanAmount loanAmount
     *
     * @return $this
     */
    public function setLoanAmount($loanAmount)
    {
        $this->container['loanAmount'] = $loanAmount;

        return $this;
    }

    /**
     * Gets loanDate
     *
     * @return \DateTime
     */
    public function getLoanDate()
    {
        return $this->container['loanDate'];
    }

    /**
     * Sets loanDate
     *
     * @param \DateTime $loanDate Дата кредитного договора
     *
     * @return $this
     */
    public function setLoanDate($loanDate)
    {
        $this->container['loanDate'] = $loanDate;

        return $this;
    }

    /**
     * Gets loanNumber
     *
     * @return string
     */
    public function getLoanNumber()
    {
        return $this->container['loanNumber'];
    }

    /**
     * Sets loanNumber
     *
     * @param string $loanNumber Номер кредитного договора
     *
     * @return $this
     */
    public function setLoanNumber($loanNumber)
    {
        $this->container['loanNumber'] = $loanNumber;

        return $this;
    }

    /**
     * Gets month
     *
     * @return string
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param string $month Месяц отчётного периода
     *
     * @return $this
     */
    public function setMonth($month)
    {
        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер документа
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets orgName
     *
     * @return string
     */
    public function getOrgName()
    {
        return $this->container['orgName'];
    }

    /**
     * Sets orgName
     *
     * @param string $orgName Наименование организации клиента
     *
     * @return $this
     */
    public function setOrgName($orgName)
    {
        $this->container['orgName'] = $orgName;

        return $this;
    }

    /**
     * Gets orgTaxNumber
     *
     * @return string
     */
    public function getOrgTaxNumber()
    {
        return $this->container['orgTaxNumber'];
    }

    /**
     * Sets orgTaxNumber
     *
     * @param string $orgTaxNumber ИНН организации клиента
     *
     * @return $this
     */
    public function setOrgTaxNumber($orgTaxNumber)
    {
        $this->container['orgTaxNumber'] = $orgTaxNumber;

        return $this;
    }

    /**
     * Gets payDocs
     *
     * @return \common\models\sbbol2\PayrollPayDoc[]
     */
    public function getPayDocs()
    {
        return $this->container['payDocs'];
    }

    /**
     * Sets payDocs
     *
     * @param \common\models\sbbol2\PayrollPayDoc[] $payDocs Платежные документы перечисления зарплаты
     *
     * @return $this
     */
    public function setPayDocs($payDocs)
    {
        $this->container['payDocs'] = $payDocs;

        return $this;
    }

    /**
     * Gets year
     *
     * @return string
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param string $year Год отчётного периода
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
}
