package CyberFT::SWIFT::Types::MT300;
use CyberFT::SWIFT::Types::Utils;
use strict;

our $ValidationProfile = {

    fields => [
        # Обязательная последовательность A «Общая информация»
        {
            key => '15A',
            required => 1,
            allow_empty => 1,
        },
        {
            key => '20',
            required => 1,
        },
        {
            key => '21',
            required => 0,
        },
        {
            key => '22A',
            required => 1,
        },
        {
            key => '94A',
            required => 0,
        },
        {
            key => '22C',
            required => 1,
        },
        {
            key => '17T',
            required => 0,
        },
        {
            key => '17U',
            required => 0,
        },
        {
            key => '82a',
            key_regexp => '82[ADJ]',
            required => 1,
        },
        {
            key => '87a',
            key_regexp => '87[ADJ]',
            required => 1,
        },
        {
            key => '83a',
            key_regexp => '83[ADJ]',
            required => 0,
        },
        {
            key => '77H',
            required => 0,
        },
        {
            key => '77D',
            required => 0,
        },
        {
            key => '14C',
            required => 0,
        },
        # Окончание последовательности А «Общая информация»
        # Обязательная последовательность B «Детали операции»
        {
            key => '15B',
            required => 1,
            allow_empty => 1,
        },
        {
            key => '30T',
            required => 1,
        },
        {
            key => '30V',
            required => 1,
        },
        {
            key => '36',
            required => 1,
        },
        # Обязательная подпоследовательность B1 «Купленная сумма»
        {
            key => '32B',
            required => 1,
        },
        {
            key => '53a',
            key_regexp => '53[ADJ]',
            required => 0,
        },
        {
            key => '56a',
            key_regexp => '56[ADJ]',
            required => 0,
        },
        {
            key => '57a',
            key_regexp => '57[ADJ]',
            required => 1,
        },
        # Окончание подпоследовательности B1 «Купленная сумма»
        # Обязательная подпоследовательность B2 «Проданная сумма»
        {
            key => '33B',
            required => 1,
        },
        {
            key => '53a',
            key_regexp => '53[ADJ]',
            required => 0,
        },
        {
            key => '56a',
            key_regexp => '56[ADJ]',
            required => 0,
        },
        {
            key => '57a',
            key_regexp => '57[ADJ]',
            required => 1,
        },
        {
            key => '58a',
            key_regexp => '58[ADJ]',
            required => 0,
        },
        # Окончание подпоследовательности B2 «Проданная сумма»
        # Окончание последовательности B «Детали операции»
        # Необязательная последовательность С «Дополнительная общая информация»
        {
            key => '15C',
            required => 0, # Это поле обязательно, если данная последовательность присутствует.
            allow_empty => 1,
        },
        {
            key => '29A',
            required => 0,
        },
        {
            key => '24D',
            required => 0,
        },
        {
            key => '84a',
            key_regexp => '84[ABDJ]',
            required => 0,
        },
        {
            key => '85a',
            key_regexp => '85[ABDJ]',
            required => 0,
        },
        {
            key => '88a',
            key_regexp => '88[ADJ]',
            required => 0,
        },
        {
            key => '71F',
            required => 0,
        },
        {
            key => '26H',
            required => 0,
        },
        {
            key => '21G',
            required => 0,
        },
        {
            key => '72',
            required => 0,
        },
        # Окончание последовательности С «Дополнительная общая информация»
        # Необязательная последовательность D «Детали расчетов по сделке частями»
        {
            key => '15D',
            required => 0, # Это поле обязательно, если данная последовательность присутствует.
            allow_empty => 1,
        },
            # ----->
        {
            key => '17A',
            required => 0, # Это поле обязательно, если данная последовательность присутствует.
        },
        {
            key => '32B',
            required => 0, # Это поле обязательно, если данная последовательность присутствует.
        },
        {
            key => '53a',
            key_regexp => '53[ADJ]',
            required => 0,
        },
        {
            key => '56a',
            key_regexp => '56[ADJ]',
            required => 0,
        },
        {
            key => '57a',
            key_regexp => '57[ADJ]',
            required => 0, # Это поле обязательно, если данная последовательность присутствует.
        },
        {
            key => '58a',
            key_regexp => '58[ADJ]',
            required => 0,
        },
            # -----|
        {
            key => '16A',
            required => 0, # Это поле обязательно, если данная последовательность присутствует.
        },
        # Окончание последовательности D «Детали расчетов по сделке частями»
        # Необязательная последовательность E «Отчетная информация»
        {
            key => '15E',
            required => 0, # Это поле обязательно, если данная последовательность присутствует.
            allow_empty => 1,
        },
        # --> Необязательная повторяющаяся подпоследовательность E1 «Отчетные стороны»
        {
            key => '22L',
            required => 0, # Это поле обязательно, если данная (под)последовательность присутствует.
        },
        {
            key => '91a',
            key_regexp => '91[ADJ]',
            required => 0,
        },
        # --> Необязательная повторяющаяся подпоследовательность E1а «Уникальный идентификатор транзакции» (UTI)
        {
            key => '22M',
            required => 0, # Это поле обязательно, если данная (под)последовательность присутствует.
        },
        {
            key => '22N',
            required => 0, # Это поле обязательно, если данная (под)последовательность присутствует.
        },
        # --> Необязательная повторяющаяся подпоследовательность E1а1 «Прежний уникальный идентификатор транзакции» (PUTI)
        {
            key => '22P',
            required => 0, # Это поле обязательно, если данная (под)последовательность присутствует.
        },
        {
            key => '22R',
            required => 0, # Это поле обязательно, если данная (под)последовательность присутствует.
        },
        # --| Конец подпоследовательности E1а1 «Прежний уникальный идентификатор транзакции» (PUTI)
        # --| Конец подпоследовательности E1а «Уникальный идентификатор транзакции» (UTI)
        # --| Конец подпоследовательности E1 «Отчетные стороны»
        {
            key => '81a',
            key_regexp => '81[ADJ]',
            required => 0,
        },
        {
            key => '96a',
            key_regexp => '96[ADJ]',
            required => 0,
        },
            # ----->
        {
            key => '22S',
            required => 0,
        },
            # -----|
        {
            key => '22T',
            required => 0,
        },
        {
            key => '17E',
            required => 0,
        },
        {
            key => '22U',
            required => 0,
        },
        {
            key => '17H',
            required => 0,
        },
        {
            key => '17P',
            required => 0,
        },
        {
            key => '22V',
            required => 0,
        },
        {
            key => '98D',
            required => 0,
        },
        {
            key => '17W',
            required => 0,
        },
        {
            key => '22W',
            required => 0,
        },
        {
            key => '77A',
            required => 0,
        },
    ],

    rules => [
        # C1. В последовательности А присутствие поля 21 зависит от значения поля 22А и
        # определяется следующим образом (Код ошибки D70):
        # Последовательность А если поле 22А ...	Последовательность А то поле 21 ...
        #    AMND	Обязательное
        #    CANC	Обязательное
        #    DUPL	Необязательное
        #    EXOP	Необязательное
        #    NEWT	Необязательное
        {
            if =>[
                ['exists', '22A'],
                ['match', '22A', '^(AMND|CANC)\s*$'],
            ],
            must => ['exists', '21'],
            err => 'D70',
        },

        # C2. Использование полей 88а и 71F в последовательности C – а тем самым использование самой
        # последовательности C – зависит от значения поля 94А и определяется следующим образом
        # (Код ошибки D74):
        # Последоват. А если поле 94А ... 	То последоват. C … 	Последоват. С и поле 88а 	Последоват. С и поле 71F
        # Поле отсутствует 	Необязательная  Необязательное  Не используется
        # AGNT              Необязательная  Необязательное  Не используется
        # BILA              Необязательная 	Необязательное 	Не используется
        # BROK              Обязательная    Обязательное    Необязательное
        {
            if => ['not_exists', '94A'],
            must => ['not_exists', '71F'],
            err => 'D74',
        },
        {
            if => [
                ['exists', '94A'],
                ['match', '94A', '^(AGNT|BILA)\s*$'],
            ],
            must => ['not_exists', '71F'],
            err => 'D74',
        },
        {
            if => [
                ['exists', '94A'],
                ['match', '94A', '^BROK\s*$'],
            ],
            must => [
                ['exists', '15C'],
                ['exists', '88[ADJ]'],
            ],
            err => 'D74',
        },

        # C3. Использование последовательности D зависит от значения поля 17U в последовательности А
        # и определяется следующим образом (Код ошибки D76):
        # Последовательность А если поле 17U... 	То последовательность D …
        # Поле отсутствует 	Не используется
        # Y 	Обязательная
        # N 	Не используется
        {
            if => ['not_exists', '17U'],
            must => ['not_exists', '15D'],
            err => 'D76',
        },
        {
            if => [
                ['exists', '17U'],
                ['match', '17U', '^N\s*$'],
            ],
            must => ['not_exists', '15D'],
            err => 'D76',
        },
        {
            if => [
                ['exists', '17U'],
                ['match', '17U', '^Y\s*$'],
            ],
            must => ['exists', '15D'],
            err => 'D76',
        },

        # C4. Если в последовательности А присутствует поле 77D, и если первые 6 знаков первой строки
        # этого поля имеют значение /VALD/, то следующие 8 знаков должны содержать определение даты,
        # выраженное в формате YYYYMMDD (год, месяц, день), за которым должен следовать признак
        # окончания строки CrLf (Код ошибки С58).
        {
            if => [
                ['exists', '77D'],
                ['match', '77D', '^/VALD/'],
            ],
            must => ['match', '77D', '^/VALD/\d{8}\r\n'],
            err => 'C58',
        },

        # C5. Если в последовательности А присутствует поле 77D, то:
        # •	если первые шесть знаков первой строки этого поля имеют значение /VALD/, то вторая строка
        #   должна быть представлена и должна содержать код /SETC/, за которым следует указывать код
        #   валюты (ISO 4217) и признак окончания строки (/SWTC/currencyCrLf) (Код ошибки С59).
        # •	если первые шесть знаков второй строки этого поля имеют значение /SETC/, то первые шесть
        #   знаков первой строки должны содержать код /VALD/ (Код ошибки C59).
        # •	код /SETC/ используется только в первых шести знаках второй строки (Код ошибки C59).
        # •	если первые шесть знаков третьей строки этого поля имеют значение /SRCE/, то первые шесть
        #   знаков второй строки должны содержать код /SETC/ (Код ошибки C59).
        # •	код / SRCE / используется только в первых шести знаках третьей строки (Код ошибки C59).
        {
            if => [
                ['exists', '77D'],
                ['match', '77D', '^/VALD/'],
            ],
            must => ['match', '77D', '^.*?\r\n/SETC/\S{3}\r\n'],
            err => 'C59',
        },
        {
            if => [
                ['exists', '77D'],
                ['match', '77D', '^.*?\r\n/SETC/'],
            ],
            must => ['match', '77D', '^/VALD/'],
            err => 'C59',
        },
        {
            if => [
                ['exists', '77D'],
                ['match', '77D', '^.*?\r\n.*?\r\n/SRCE/'],
            ],
            must => ['match', '77D', '^.*?\r\n/SETC/'],
            err => 'C59',
        },
        {
            func => sub {
                my $doc = shift;
                if ($doc->key_exists('77D')) {
                    my $val = $doc->get_first('77D');
                    my $count_SETC = $val =~ s/(\/SETC\/)/$1/g;
                    if (($count_SETC > 1) || ($count_SETC == 1 && $val !~ /^.*?\r\n\/SETC\//)) {
                        return 0;
                    }
                    my $count_SRCE = $val =~ s/(\/SRCE\/)/$1/g;
                    if (($count_SRCE > 1) || ($count_SRCE == 1 && $val !~ /^.*?\r\n.*?\r\n\/SRCE\//)) {
                        return 0;
                    }
                }
                return 1;
            },
            err => 'C59',
        },

        # С6. Во всех необязательных последовательностях, если существует последовательность,
        # поля со статусом М должны присутствовать, другие не используются (Код ошибки С32).
        # Проверка присутствия всех обязательных полей в необязательных (под)последовательностях.
        {
            func => sub {
                my $doc = shift;
                my $seqs = _find_sequences($doc->data);
                if (defined $seqs->{'D'}) {
                    # Обязательные поля для последовательности D: 17A, 32B, 57a, 16A.
                    return 0 unless(seq_key_exists($seqs->{'D'}, '17A'));
                    return 0 unless(seq_key_exists($seqs->{'D'}, '32B'));
                    return 0 unless(seq_key_exists($seqs->{'D'}, '57[ADJ]'));
                    return 0 unless(seq_key_exists($seqs->{'D'}, '16A'));
                }
                return 1;
            },
            err => 'C32',
        },
        {
            func => sub {
                my $doc = shift;
                my $seqs = _find_sequences($doc->data);
                if (defined $seqs->{'E'}) {
                    # В последовательности E:
                    #    после 22M всегда должен быть 22N (Необязательная повторяющаяся подпоследовательность E1а)
                    #    после 22P всегда должен быть 22R (Необязательная повторяющаяся подпоследовательность E1а1)
                    my $last_i = scalar(@{$seqs->{'E'}})-1;
                    for my $i (0 .. $last_i) {
                        if ($seqs->{'E'}->[$i]->{key} eq '22M') {
                            return 0 if ($i == $last_i || $seqs->{'E'}->[$i+1]->{key} ne '22N');
                        }
                        if ($seqs->{'E'}->[$i]->{key} eq '22P') {
                            return 0 if ($i == $last_i || $seqs->{'E'}->[$i+1]->{key} ne '22R');
                        }
                    }
                }
                return 1;
            },
            err => 'C32',
        },

        # C7.	В полях, указанных ниже, коды XAU, XAG, XPD и XPT не используются, поскольку эти
        # коды относятся к товарам, для которых должна использоваться 6 категоря сообщений (Код ошибки C08):
        # •	Подпоследовательность B1 Купленная Сумма, поле 32B Валюта, Сумма.
        # •	Подпоследовательность B2 Проданная Сумма, поле 33B Валюта, Сумма.
        # •	Последовательность С Дополнительная общая информация, поле 71F Комиссия брокера.
        # •	Последовательность D Детали расчетов по сделке частями, поле 32B Валюта, Сумма.
        {
            must => [
                ['not_match', '32B', 'XAU|XAG|XPD|XPT'],
                ['not_match', '33B', 'XAU|XAG|XPD|XPT'],
                ['not_match', '71F', 'XAU|XAG|XPD|XPT'],
            ],
            err => 'C08',
        },

        # C8. Если в последовательности E присутствует поле 15E, хотя бы одно из других полей
        # последовательности E должно присутствовать (Код ошибки С98).
        {
            func => sub {
                my $doc = shift;
                my $seqs = _find_sequences($doc->data);
                if (defined $seqs->{'E'}) {
                    return 0 if (scalar @{$seqs->{'E'}} <= 1);
                }
                return 1;
            },
            err => 'C98',
        },
    ]
};

# Вытаскиваем все последовательности как хэш массивов.
sub _find_sequences {
    my $data = shift;

    my $marks = {
        '15A' => 'A',
        '15B' => 'B',
        '15C' => 'C',
        '15D' => 'D',
        '15E' => 'E',
    };

    my $cur_seq = undef;
    my $seqs = {};

    for my $item (@$data) {
        my $k = $item->{key};
        if (defined $marks->{$k}) {
            $cur_seq = $marks->{$k};
        }
        if ($cur_seq) {
            push @{$seqs->{$cur_seq}}, $item;
        }
    }

    return $seqs;
}

1;