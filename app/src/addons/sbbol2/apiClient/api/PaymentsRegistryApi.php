<?php
/**
 * PaymentsRegistryApi
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace addons\sbbol2\apiClient\api;

use addons\sbbol2\apiClient\ApiException;
use addons\sbbol2\apiClient\Configuration;
use addons\sbbol2\apiClient\HeaderSelector;
use addons\sbbol2\apiClient\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * PaymentsRegistryApi Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsRegistryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changePaymentsRegistryStateUsingPUT
     *
     * Изменение статуса реестра платежей
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $externalId    Внешний UUID реестра платежей (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \common\models\sbbol2\DocState
     */
    public function changePaymentsRegistryStateUsingPUT($authorization, $externalId)
    {
        list($response) = $this->changePaymentsRegistryStateUsingPUTWithHttpInfo($authorization, $externalId);

        return $response;
    }

    /**
     * Operation changePaymentsRegistryStateUsingPUTWithHttpInfo
     *
     * Изменение статуса реестра платежей
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $externalId    Внешний UUID реестра платежей (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \common\models\sbbol2\DocState, HTTP status code, HTTP response headers (array of strings)
     */
    public function changePaymentsRegistryStateUsingPUTWithHttpInfo($authorization, $externalId)
    {
        $returnType = '\common\models\sbbol2\DocState';
        $request = $this->changePaymentsRegistryStateUsingPUTRequest($authorization, $externalId);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\DocState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation changePaymentsRegistryStateUsingPUTAsync
     *
     * Изменение статуса реестра платежей
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $externalId    Внешний UUID реестра платежей (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePaymentsRegistryStateUsingPUTAsync($authorization, $externalId)
    {
        return $this->changePaymentsRegistryStateUsingPUTAsyncWithHttpInfo($authorization, $externalId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changePaymentsRegistryStateUsingPUTAsyncWithHttpInfo
     *
     * Изменение статуса реестра платежей
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $externalId    Внешний UUID реестра платежей (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePaymentsRegistryStateUsingPUTAsyncWithHttpInfo($authorization, $externalId)
    {
        $returnType = '\common\models\sbbol2\DocState';
        $request = $this->changePaymentsRegistryStateUsingPUTRequest($authorization, $externalId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getPaymentsRegistryUsingGET
     *
     * Запрос реестра платежей
     *
     * @param string    $authorization       Access token организации-клиента, полученный через SSO (required)
     * @param \DateTime $datetimeLastRequest Дата и время последнего запроса реестров платежей (yyyy-MM-dd&#x27;T&#x27;HH:mm:ss) (optional)
     * @param \DateTime $dateSince           Дата начала периода (yyyy-MM-dd) (optional)
     * @param \DateTime $dateUntil           Дата окончания периода (yyyy-MM-dd) (optional)
     * @param string    $state               Статус документа (optional)
     * @param int       $page                Номер запрашиваемой страницы (начиная с 1) (optional)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \common\models\sbbol2\PaymentsRegistryInfo
     */
    public function getPaymentsRegistryUsingGET($authorization, $datetimeLastRequest = null, $dateSince = null, $dateUntil = null, $state = null, $page = null)
    {
        list($response) = $this->getPaymentsRegistryUsingGETWithHttpInfo($authorization, $datetimeLastRequest, $dateSince, $dateUntil, $state, $page);

        return $response;
    }

    /**
     * Operation getPaymentsRegistryUsingGETWithHttpInfo
     *
     * Запрос реестра платежей
     *
     * @param string    $authorization       Access token организации-клиента, полученный через SSO (required)
     * @param \DateTime $datetimeLastRequest Дата и время последнего запроса реестров платежей (yyyy-MM-dd&#x27;T&#x27;HH:mm:ss) (optional)
     * @param \DateTime $dateSince           Дата начала периода (yyyy-MM-dd) (optional)
     * @param \DateTime $dateUntil           Дата окончания периода (yyyy-MM-dd) (optional)
     * @param string    $state               Статус документа (optional)
     * @param int       $page                Номер запрашиваемой страницы (начиная с 1) (optional)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \common\models\sbbol2\PaymentsRegistryInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsRegistryUsingGETWithHttpInfo($authorization, $datetimeLastRequest = null, $dateSince = null, $dateUntil = null, $state = null, $page = null)
    {
        $returnType = '\common\models\sbbol2\PaymentsRegistryInfo';
        $request = $this->getPaymentsRegistryUsingGETRequest($authorization, $datetimeLastRequest, $dateSince, $dateUntil, $state, $page);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\PaymentsRegistryInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\ResourceFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPaymentsRegistryUsingGETAsync
     *
     * Запрос реестра платежей
     *
     * @param string    $authorization       Access token организации-клиента, полученный через SSO (required)
     * @param \DateTime $datetimeLastRequest Дата и время последнего запроса реестров платежей (yyyy-MM-dd&#x27;T&#x27;HH:mm:ss) (optional)
     * @param \DateTime $dateSince           Дата начала периода (yyyy-MM-dd) (optional)
     * @param \DateTime $dateUntil           Дата окончания периода (yyyy-MM-dd) (optional)
     * @param string    $state               Статус документа (optional)
     * @param int       $page                Номер запрашиваемой страницы (начиная с 1) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsRegistryUsingGETAsync($authorization, $datetimeLastRequest = null, $dateSince = null, $dateUntil = null, $state = null, $page = null)
    {
        return $this->getPaymentsRegistryUsingGETAsyncWithHttpInfo($authorization, $datetimeLastRequest, $dateSince, $dateUntil, $state, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsRegistryUsingGETAsyncWithHttpInfo
     *
     * Запрос реестра платежей
     *
     * @param string    $authorization       Access token организации-клиента, полученный через SSO (required)
     * @param \DateTime $datetimeLastRequest Дата и время последнего запроса реестров платежей (yyyy-MM-dd&#x27;T&#x27;HH:mm:ss) (optional)
     * @param \DateTime $dateSince           Дата начала периода (yyyy-MM-dd) (optional)
     * @param \DateTime $dateUntil           Дата окончания периода (yyyy-MM-dd) (optional)
     * @param string    $state               Статус документа (optional)
     * @param int       $page                Номер запрашиваемой страницы (начиная с 1) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsRegistryUsingGETAsyncWithHttpInfo($authorization, $datetimeLastRequest = null, $dateSince = null, $dateUntil = null, $state = null, $page = null)
    {
        $returnType = '\common\models\sbbol2\PaymentsRegistryInfo';
        $request = $this->getPaymentsRegistryUsingGETRequest($authorization, $datetimeLastRequest, $dateSince, $dateUntil, $state, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changePaymentsRegistryStateUsingPUT'
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $externalId    Внешний UUID реестра платежей (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changePaymentsRegistryStateUsingPUTRequest($authorization, $externalId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling changePaymentsRegistryStateUsingPUT'
            );
        }
        // verify the required parameter 'externalId' is set
        if ($externalId === null || (is_array($externalId) && count($externalId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalId when calling changePaymentsRegistryStateUsingPUT'
            );
        }

        $resourcePath = '/v1/payments-registry/{externalId}/change-state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($externalId !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($externalId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'getPaymentsRegistryUsingGET'
     *
     * @param string    $authorization       Access token организации-клиента, полученный через SSO (required)
     * @param \DateTime $datetimeLastRequest Дата и время последнего запроса реестров платежей (yyyy-MM-dd&#x27;T&#x27;HH:mm:ss) (optional)
     * @param \DateTime $dateSince           Дата начала периода (yyyy-MM-dd) (optional)
     * @param \DateTime $dateUntil           Дата окончания периода (yyyy-MM-dd) (optional)
     * @param string    $state               Статус документа (optional)
     * @param int       $page                Номер запрашиваемой страницы (начиная с 1) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentsRegistryUsingGETRequest($authorization, $datetimeLastRequest = null, $dateSince = null, $dateUntil = null, $state = null, $page = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getPaymentsRegistryUsingGET'
            );
        }

        $resourcePath = '/v1/payments-registry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datetimeLastRequest !== null) {
            $queryParams['datetimeLastRequest'] = ObjectSerializer::toQueryValue($datetimeLastRequest);
        }
        // query params
        if ($dateSince !== null) {
            $queryParams['dateSince'] = ObjectSerializer::toQueryValue($dateSince);
        }
        // query params
        if ($dateUntil !== null) {
            $queryParams['dateUntil'] = ObjectSerializer::toQueryValue($dateUntil);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
