<?php
/**
 * FilesApi
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FINTECH
 *
 * Документация FINTECH REST API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace addons\sbbol2\apiClient\api;

use addons\sbbol2\apiClient\ApiException;
use addons\sbbol2\apiClient\Configuration;
use addons\sbbol2\apiClient\HeaderSelector;
use addons\sbbol2\apiClient\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class FilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation downloadUsingPOST
     *
     * Запрос ссылки на загрузку файла
     *
     * @param \common\models\sbbol2\FileDownloadRequest $body          Параметры запроса на создание задач на загрузку файлов (required)
     * @param string                                    $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function downloadUsingPOST($body, $authorization)
    {
        $this->downloadUsingPOSTWithHttpInfo($body, $authorization);
    }

    /**
     * Operation downloadUsingPOSTWithHttpInfo
     *
     * Запрос ссылки на загрузку файла
     *
     * @param \common\models\sbbol2\FileDownloadRequest $body          Параметры запроса на создание задач на загрузку файлов (required)
     * @param string                                    $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadUsingPOSTWithHttpInfo($body, $authorization)
    {
        $returnType = '';
        $request = $this->downloadUsingPOSTRequest($body, $authorization);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\ResourceFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downloadUsingPOSTAsync
     *
     * Запрос ссылки на загрузку файла
     *
     * @param \common\models\sbbol2\FileDownloadRequest $body          Параметры запроса на создание задач на загрузку файлов (required)
     * @param string                                    $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadUsingPOSTAsync($body, $authorization)
    {
        return $this->downloadUsingPOSTAsyncWithHttpInfo($body, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadUsingPOSTAsyncWithHttpInfo
     *
     * Запрос ссылки на загрузку файла
     *
     * @param \common\models\sbbol2\FileDownloadRequest $body          Параметры запроса на создание задач на загрузку файлов (required)
     * @param string                                    $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadUsingPOSTAsyncWithHttpInfo($body, $authorization)
    {
        $returnType = '';
        $request = $this->downloadUsingPOSTRequest($body, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getDownloadStateUsingPOST
     *
     * Получение статусов загрузки файлов
     *
     * @param \common\models\sbbol2\FileDownloadStateRequest $body          Параметры запроса на получение статусов загрузки файлов (required)
     * @param string                                         $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \common\models\sbbol2\FileDownloadState[]
     */
    public function getDownloadStateUsingPOST($body, $authorization)
    {
        list($response) = $this->getDownloadStateUsingPOSTWithHttpInfo($body, $authorization);

        return $response;
    }

    /**
     * Operation getDownloadStateUsingPOSTWithHttpInfo
     *
     * Получение статусов загрузки файлов
     *
     * @param \common\models\sbbol2\FileDownloadStateRequest $body          Параметры запроса на получение статусов загрузки файлов (required)
     * @param string                                         $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \common\models\sbbol2\FileDownloadState[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadStateUsingPOSTWithHttpInfo($body, $authorization)
    {
        $returnType = '\common\models\sbbol2\FileDownloadState[]';
        $request = $this->getDownloadStateUsingPOSTRequest($body, $authorization);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\FileDownloadState[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\ResourceFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDownloadStateUsingPOSTAsync
     *
     * Получение статусов загрузки файлов
     *
     * @param \common\models\sbbol2\FileDownloadStateRequest $body          Параметры запроса на получение статусов загрузки файлов (required)
     * @param string                                         $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDownloadStateUsingPOSTAsync($body, $authorization)
    {
        return $this->getDownloadStateUsingPOSTAsyncWithHttpInfo($body, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDownloadStateUsingPOSTAsyncWithHttpInfo
     *
     * Получение статусов загрузки файлов
     *
     * @param \common\models\sbbol2\FileDownloadStateRequest $body          Параметры запроса на получение статусов загрузки файлов (required)
     * @param string                                         $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDownloadStateUsingPOSTAsyncWithHttpInfo($body, $authorization)
    {
        $returnType = '\common\models\sbbol2\FileDownloadState[]';
        $request = $this->getDownloadStateUsingPOSTRequest($body, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getUploadStateUsingGET
     *
     * Получение статуса выгрузки файла
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $fileId        Идентификатор файла (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \common\models\sbbol2\FileUploadState
     */
    public function getUploadStateUsingGET($authorization, $fileId)
    {
        list($response) = $this->getUploadStateUsingGETWithHttpInfo($authorization, $fileId);

        return $response;
    }

    /**
     * Operation getUploadStateUsingGETWithHttpInfo
     *
     * Получение статуса выгрузки файла
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $fileId        Идентификатор файла (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \common\models\sbbol2\FileUploadState, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUploadStateUsingGETWithHttpInfo($authorization, $fileId)
    {
        $returnType = '\common\models\sbbol2\FileUploadState';
        $request = $this->getUploadStateUsingGETRequest($authorization, $fileId);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\FileUploadState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\ResourceFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUploadStateUsingGETAsync
     *
     * Получение статуса выгрузки файла
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $fileId        Идентификатор файла (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUploadStateUsingGETAsync($authorization, $fileId)
    {
        return $this->getUploadStateUsingGETAsyncWithHttpInfo($authorization, $fileId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUploadStateUsingGETAsyncWithHttpInfo
     *
     * Получение статуса выгрузки файла
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $fileId        Идентификатор файла (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUploadStateUsingGETAsyncWithHttpInfo($authorization, $fileId)
    {
        $returnType = '\common\models\sbbol2\FileUploadState';
        $request = $this->getUploadStateUsingGETRequest($authorization, $fileId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation uploadUsingPOST
     *
     * Запрос ссылки на выгрузку файла
     *
     * @param \common\models\sbbol2\FileUploadRequest $body          Параметры запроса на создание задачи на выгрузку файла (required)
     * @param string                                  $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \common\models\sbbol2\FileUploadState
     */
    public function uploadUsingPOST($body, $authorization)
    {
        list($response) = $this->uploadUsingPOSTWithHttpInfo($body, $authorization);

        return $response;
    }

    /**
     * Operation uploadUsingPOSTWithHttpInfo
     *
     * Запрос ссылки на выгрузку файла
     *
     * @param \common\models\sbbol2\FileUploadRequest $body          Параметры запроса на создание задачи на выгрузку файла (required)
     * @param string                                  $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \addons\sbbol2\apiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \common\models\sbbol2\FileUploadState, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadUsingPOSTWithHttpInfo($body, $authorization)
    {
        $returnType = '\common\models\sbbol2\FileUploadState';
        $request = $this->uploadUsingPOSTRequest($body, $authorization);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\FileUploadState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\ResourceFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\common\models\sbbol2\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uploadUsingPOSTAsync
     *
     * Запрос ссылки на выгрузку файла
     *
     * @param \common\models\sbbol2\FileUploadRequest $body          Параметры запроса на создание задачи на выгрузку файла (required)
     * @param string                                  $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadUsingPOSTAsync($body, $authorization)
    {
        return $this->uploadUsingPOSTAsyncWithHttpInfo($body, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadUsingPOSTAsyncWithHttpInfo
     *
     * Запрос ссылки на выгрузку файла
     *
     * @param \common\models\sbbol2\FileUploadRequest $body          Параметры запроса на создание задачи на выгрузку файла (required)
     * @param string                                  $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadUsingPOSTAsyncWithHttpInfo($body, $authorization)
    {
        $returnType = '\common\models\sbbol2\FileUploadState';
        $request = $this->uploadUsingPOSTRequest($body, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadUsingPOST'
     *
     * @param \common\models\sbbol2\FileDownloadRequest $body          Параметры запроса на создание задач на загрузку файлов (required)
     * @param string                                    $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadUsingPOSTRequest($body, $authorization)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling downloadUsingPOST'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling downloadUsingPOST'
            );
        }

        $resourcePath = '/v1/files/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'getDownloadStateUsingPOST'
     *
     * @param \common\models\sbbol2\FileDownloadStateRequest $body          Параметры запроса на получение статусов загрузки файлов (required)
     * @param string                                         $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDownloadStateUsingPOSTRequest($body, $authorization)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getDownloadStateUsingPOST'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getDownloadStateUsingPOST'
            );
        }

        $resourcePath = '/v1/files/downloadState';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'getUploadStateUsingGET'
     *
     * @param string $authorization Access token организации-клиента, полученный через SSO (required)
     * @param string $fileId        Идентификатор файла (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUploadStateUsingGETRequest($authorization, $fileId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getUploadStateUsingGET'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling getUploadStateUsingGET'
            );
        }

        $resourcePath = '/v1/files/upload/{fileId}/state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'uploadUsingPOST'
     *
     * @param \common\models\sbbol2\FileUploadRequest $body          Параметры запроса на создание задачи на выгрузку файла (required)
     * @param string                                  $authorization Access token организации-клиента, полученный через SSO (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadUsingPOSTRequest($body, $authorization)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling uploadUsingPOST'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling uploadUsingPOST'
            );
        }

        $resourcePath = '/v1/files/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
